<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\keil\Obj\rtthread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\keil\Obj\rtthread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Thu Aug 11 23:43:55 2022
<BR><P>
<H3>Maximum Stack Usage =      11104 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_click_cb &rArr; create_net_up &rArr; lv_tabview_add_tab &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b]">Reset_Handler</a>
 <LI><a href="#[90]">ACMP1_IRQHandler</a>
 <LI><a href="#[91]">ACMP2_IRQHandler</a>
 <LI><a href="#[92]">ACMP3_IRQHandler</a>
 <LI><a href="#[93]">ACMP4_IRQHandler</a>
 <LI><a href="#[58]">ADC1_IRQHandler</a>
 <LI><a href="#[59]">ADC2_IRQHandler</a>
 <LI><a href="#[8e]">ADC_ETC_ERROR_IRQ_IRQHandler</a>
 <LI><a href="#[8b]">ADC_ETC_IRQ0_IRQHandler</a>
 <LI><a href="#[8c]">ADC_ETC_IRQ1_IRQHandler</a>
 <LI><a href="#[8d]">ADC_ETC_IRQ2_IRQHandler</a>
 <LI><a href="#[4c]">BEE_IRQHandler</a>
 <LI><a href="#[f]">BusFault_Handler</a>
 <LI><a href="#[d6]">CAN1_DriverIRQHandler</a>
 <LI><a href="#[d7]">CAN2_DriverIRQHandler</a>
 <LI><a href="#[e7]">CAN3_DriverIRQHandler</a>
 <LI><a href="#[74]">CCM_1_IRQHandler</a>
 <LI><a href="#[75]">CCM_2_IRQHandler</a>
 <LI><a href="#[28]">CORE_IRQHandler</a>
 <LI><a href="#[40]">CSI_IRQHandler</a>
 <LI><a href="#[46]">CSU_IRQHandler</a>
 <LI><a href="#[26]">CTI0_ERROR_IRQHandler</a>
 <LI><a href="#[27]">CTI1_ERROR_IRQHandler</a>
 <LI><a href="#[5a]">DCDC_IRQHandler</a>
 <LI><a href="#[47]">DCP_IRQHandler</a>
 <LI><a href="#[48]">DCP_VMI_IRQHandler</a>
 <LI><a href="#[b5]">DMA0_DMA16_DriverIRQHandler</a>
 <LI><a href="#[bf]">DMA10_DMA26_DriverIRQHandler</a>
 <LI><a href="#[c0]">DMA11_DMA27_DriverIRQHandler</a>
 <LI><a href="#[c1]">DMA12_DMA28_DriverIRQHandler</a>
 <LI><a href="#[c2]">DMA13_DMA29_DriverIRQHandler</a>
 <LI><a href="#[c3]">DMA14_DMA30_DriverIRQHandler</a>
 <LI><a href="#[c4]">DMA15_DMA31_DriverIRQHandler</a>
 <LI><a href="#[b6]">DMA1_DMA17_DriverIRQHandler</a>
 <LI><a href="#[b7]">DMA2_DMA18_DriverIRQHandler</a>
 <LI><a href="#[b8]">DMA3_DMA19_DriverIRQHandler</a>
 <LI><a href="#[b9]">DMA4_DMA20_DriverIRQHandler</a>
 <LI><a href="#[ba]">DMA5_DMA21_DriverIRQHandler</a>
 <LI><a href="#[bb]">DMA6_DMA22_DriverIRQHandler</a>
 <LI><a href="#[bc]">DMA7_DMA23_DriverIRQHandler</a>
 <LI><a href="#[bd]">DMA8_DMA24_DriverIRQHandler</a>
 <LI><a href="#[be]">DMA9_DMA25_DriverIRQHandler</a>
 <LI><a href="#[c5]">DMA_ERROR_DriverIRQHandler</a>
 <LI><a href="#[12]">DebugMon_Handler</a>
 <LI><a href="#[a]">DefaultISR</a>
 <LI><a href="#[96]">ENC1_IRQHandler</a>
 <LI><a href="#[97]">ENC2_IRQHandler</a>
 <LI><a href="#[98]">ENC3_IRQHandler</a>
 <LI><a href="#[99]">ENC4_IRQHandler</a>
 <LI><a href="#[e6]">ENET2_1588_Timer_DriverIRQHandler</a>
 <LI><a href="#[e5]">ENET2_DriverIRQHandler</a>
 <LI><a href="#[e4]">ENET_1588_Timer_DriverIRQHandler</a>
 <LI><a href="#[e3]">ENET_DriverIRQHandler</a>
 <LI><a href="#[73]">EWM_IRQHandler</a>
 <LI><a href="#[dd]">FLEXIO1_DriverIRQHandler</a>
 <LI><a href="#[de]">FLEXIO2_DriverIRQHandler</a>
 <LI><a href="#[e8]">FLEXIO3_DriverIRQHandler</a>
 <LI><a href="#[3b]">FLEXRAM_IRQHandler</a>
 <LI><a href="#[df]">FLEXSPI2_DriverIRQHandler</a>
 <LI><a href="#[e0]">FLEXSPI_DriverIRQHandler</a>
 <LI><a href="#[76]">GPC_IRQHandler</a>
 <LI><a href="#[5d]">GPIO1_INT0_IRQHandler</a>
 <LI><a href="#[5e]">GPIO1_INT1_IRQHandler</a>
 <LI><a href="#[5f]">GPIO1_INT2_IRQHandler</a>
 <LI><a href="#[60]">GPIO1_INT3_IRQHandler</a>
 <LI><a href="#[61]">GPIO1_INT4_IRQHandler</a>
 <LI><a href="#[62]">GPIO1_INT5_IRQHandler</a>
 <LI><a href="#[63]">GPIO1_INT6_IRQHandler</a>
 <LI><a href="#[64]">GPIO1_INT7_IRQHandler</a>
 <LI><a href="#[b2]">GPIO6_7_8_9_IRQHandler</a>
 <LI><a href="#[3e]">GPR_IRQ_IRQHandler</a>
 <LI><a href="#[79]">GPT1_IRQHandler</a>
 <LI><a href="#[7a]">GPT2_IRQHandler</a>
 <LI><a href="#[3c]">KPP_IRQHandler</a>
 <LI><a href="#[d2]">LPSPI1_DriverIRQHandler</a>
 <LI><a href="#[d3]">LPSPI2_DriverIRQHandler</a>
 <LI><a href="#[d4]">LPSPI3_DriverIRQHandler</a>
 <LI><a href="#[d5]">LPSPI4_DriverIRQHandler</a>
 <LI><a href="#[8f]">PIT_IRQHandler</a>
 <LI><a href="#[52]">PMU_EVENT_IRQHandler</a>
 <LI><a href="#[7b]">PWM1_0_IRQHandler</a>
 <LI><a href="#[7c]">PWM1_1_IRQHandler</a>
 <LI><a href="#[7d]">PWM1_2_IRQHandler</a>
 <LI><a href="#[7e]">PWM1_3_IRQHandler</a>
 <LI><a href="#[7f]">PWM1_FAULT_IRQHandler</a>
 <LI><a href="#[9e]">PWM2_0_IRQHandler</a>
 <LI><a href="#[9f]">PWM2_1_IRQHandler</a>
 <LI><a href="#[a0]">PWM2_2_IRQHandler</a>
 <LI><a href="#[a1]">PWM2_3_IRQHandler</a>
 <LI><a href="#[a2]">PWM2_FAULT_IRQHandler</a>
 <LI><a href="#[a3]">PWM3_0_IRQHandler</a>
 <LI><a href="#[a4]">PWM3_1_IRQHandler</a>
 <LI><a href="#[a5]">PWM3_2_IRQHandler</a>
 <LI><a href="#[a6]">PWM3_3_IRQHandler</a>
 <LI><a href="#[a7]">PWM3_FAULT_IRQHandler</a>
 <LI><a href="#[a8]">PWM4_0_IRQHandler</a>
 <LI><a href="#[a9]">PWM4_1_IRQHandler</a>
 <LI><a href="#[aa]">PWM4_2_IRQHandler</a>
 <LI><a href="#[ab]">PWM4_3_IRQHandler</a>
 <LI><a href="#[ac]">PWM4_FAULT_IRQHandler</a>
 <LI><a href="#[41]">PXP_IRQHandler</a>
 <LI><a href="#[72]">RTWDOG_IRQHandler</a>
 <LI><a href="#[78]">Reserved115_IRQHandler</a>
 <LI><a href="#[94]">Reserved143_IRQHandler</a>
 <LI><a href="#[95]">Reserved144_IRQHandler</a>
 <LI><a href="#[b0]">Reserved171_IRQHandler</a>
 <LI><a href="#[49]">Reserved68_IRQHandler</a>
 <LI><a href="#[53]">Reserved78_IRQHandler</a>
 <LI><a href="#[5b]">Reserved86_IRQHandler</a>
 <LI><a href="#[5c]">Reserved87_IRQHandler</a>
 <LI><a href="#[d8]">SAI1_DriverIRQHandler</a>
 <LI><a href="#[d9]">SAI2_DriverIRQHandler</a>
 <LI><a href="#[da]">SAI3_RX_DriverIRQHandler</a>
 <LI><a href="#[db]">SAI3_TX_DriverIRQHandler</a>
 <LI><a href="#[82]">SEMC_IRQHandler</a>
 <LI><a href="#[4b]">SJC_IRQHandler</a>
 <LI><a href="#[43]">SNVS_HP_WRAPPER_IRQHandler</a>
 <LI><a href="#[44]">SNVS_HP_WRAPPER_TZ_IRQHandler</a>
 <LI><a href="#[45]">SNVS_LP_WRAPPER_IRQHandler</a>
 <LI><a href="#[dc]">SPDIF_DriverIRQHandler</a>
 <LI><a href="#[77]">SRC_IRQHandler</a>
 <LI><a href="#[54]">TEMP_LOW_HIGH_IRQHandler</a>
 <LI><a href="#[55]">TEMP_PANIC_IRQHandler</a>
 <LI><a href="#[9a]">TMR1_IRQHandler</a>
 <LI><a href="#[9b]">TMR2_IRQHandler</a>
 <LI><a href="#[9c]">TMR3_IRQHandler</a>
 <LI><a href="#[9d]">TMR4_IRQHandler</a>
 <LI><a href="#[4a]">TRNG_IRQHandler</a>
 <LI><a href="#[3d]">TSC_DIG_IRQHandler</a>
 <LI><a href="#[86]">USB_OTG1_IRQHandler</a>
 <LI><a href="#[85]">USB_OTG2_IRQHandler</a>
 <LI><a href="#[56]">USB_PHY1_IRQHandler</a>
 <LI><a href="#[57]">USB_PHY2_IRQHandler</a>
 <LI><a href="#[e1]">USDHC1_DriverIRQHandler</a>
 <LI><a href="#[e2]">USDHC2_DriverIRQHandler</a>
 <LI><a href="#[10]">UsageFault_Handler</a>
 <LI><a href="#[71]">WDOG1_IRQHandler</a>
 <LI><a href="#[42]">WDOG2_IRQHandler</a>
 <LI><a href="#[89]">XBAR1_IRQ_0_1_IRQHandler</a>
 <LI><a href="#[8a]">XBAR1_IRQ_2_3_IRQHandler</a>
 <LI><a href="#[c]">NMI_Handler</a>
 <LI><a href="#[11]">SVC_Handler</a>
 <LI><a href="#[15]">DMA0_DMA16_IRQHandler</a>
 <LI><a href="#[16]">DMA1_DMA17_IRQHandler</a>
 <LI><a href="#[17]">DMA2_DMA18_IRQHandler</a>
 <LI><a href="#[18]">DMA3_DMA19_IRQHandler</a>
 <LI><a href="#[19]">DMA4_DMA20_IRQHandler</a>
 <LI><a href="#[1a]">DMA5_DMA21_IRQHandler</a>
 <LI><a href="#[1b]">DMA6_DMA22_IRQHandler</a>
 <LI><a href="#[1c]">DMA7_DMA23_IRQHandler</a>
 <LI><a href="#[1d]">DMA8_DMA24_IRQHandler</a>
 <LI><a href="#[1e]">DMA9_DMA25_IRQHandler</a>
 <LI><a href="#[1f]">DMA10_DMA26_IRQHandler</a>
 <LI><a href="#[20]">DMA11_DMA27_IRQHandler</a>
 <LI><a href="#[21]">DMA12_DMA28_IRQHandler</a>
 <LI><a href="#[22]">DMA13_DMA29_IRQHandler</a>
 <LI><a href="#[23]">DMA14_DMA30_IRQHandler</a>
 <LI><a href="#[24]">DMA15_DMA31_IRQHandler</a>
 <LI><a href="#[25]">DMA_ERROR_IRQHandler</a>
 <LI><a href="#[2a]">LPUART2_IRQHandler</a>
 <LI><a href="#[2c]">LPUART4_IRQHandler</a>
 <LI><a href="#[2d]">LPUART5_IRQHandler</a>
 <LI><a href="#[2e]">LPUART6_IRQHandler</a>
 <LI><a href="#[2f]">LPUART7_IRQHandler</a>
 <LI><a href="#[30]">LPUART8_IRQHandler</a>
 <LI><a href="#[31]">LPI2C1_IRQHandler</a>
 <LI><a href="#[32]">LPI2C2_IRQHandler</a>
 <LI><a href="#[33]">LPI2C3_IRQHandler</a>
 <LI><a href="#[34]">LPI2C4_IRQHandler</a>
 <LI><a href="#[35]">LPSPI1_IRQHandler</a>
 <LI><a href="#[36]">LPSPI2_IRQHandler</a>
 <LI><a href="#[37]">LPSPI3_IRQHandler</a>
 <LI><a href="#[38]">LPSPI4_IRQHandler</a>
 <LI><a href="#[39]">CAN1_IRQHandler</a>
 <LI><a href="#[3a]">CAN2_IRQHandler</a>
 <LI><a href="#[4d]">SAI1_IRQHandler</a>
 <LI><a href="#[4e]">SAI2_IRQHandler</a>
 <LI><a href="#[4f]">SAI3_RX_IRQHandler</a>
 <LI><a href="#[50]">SAI3_TX_IRQHandler</a>
 <LI><a href="#[51]">SPDIF_IRQHandler</a>
 <LI><a href="#[6f]">FLEXIO1_IRQHandler</a>
 <LI><a href="#[70]">FLEXIO2_IRQHandler</a>
 <LI><a href="#[80]">FLEXSPI2_IRQHandler</a>
 <LI><a href="#[81]">FLEXSPI_IRQHandler</a>
 <LI><a href="#[83]">USDHC1_IRQHandler</a>
 <LI><a href="#[84]">USDHC2_IRQHandler</a>
 <LI><a href="#[87]">ENET_IRQHandler</a>
 <LI><a href="#[88]">ENET_1588_Timer_IRQHandler</a>
 <LI><a href="#[ad]">ENET2_IRQHandler</a>
 <LI><a href="#[ae]">ENET2_1588_Timer_IRQHandler</a>
 <LI><a href="#[af]">CAN3_IRQHandler</a>
 <LI><a href="#[b1]">FLEXIO3_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[800]">get_timeval</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b6]">ulog_output</a><BR>
 <LI><a href="#[844]">lv_obj_transform_point</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[844]">lv_obj_transform_point</a><BR>
 <LI><a href="#[3f0]">_lv_area_is_point_on</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f0]">_lv_area_is_point_on</a><BR>
 <LI><a href="#[77f]">event_send_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77f]">event_send_core</a><BR>
 <LI><a href="#[a19]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a19]">refresh_children_style</a><BR>
 <LI><a href="#[98e]">lv_obj_is_group_def</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98e]">lv_obj_is_group_def</a><BR>
 <LI><a href="#[98c]">lv_obj_construct</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98c]">lv_obj_construct</a><BR>
 <LI><a href="#[4e8]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e8]">apply_theme</a><BR>
 <LI><a href="#[a15]">lv_obj_redraw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a16]">refr_obj</a><BR>
 <LI><a href="#[a3e]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a3e]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[a26]">lv_obj_scroll_by_bounded</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f7]">lv_obj_update_layout</a><BR>
 <LI><a href="#[446]">lv_obj_move_children_by</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[446]">lv_obj_move_children_by</a><BR>
 <LI><a href="#[864]">layout_update_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[864]">layout_update_core</a><BR>
 <LI><a href="#[444]">_lv_obj_destruct</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[444]">_lv_obj_destruct</a><BR>
 <LI><a href="#[98f]">obj_del_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98f]">obj_del_core</a><BR>
 <LI><a href="#[530]">rt_slist_remove</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[530]">rt_slist_remove</a><BR>
 <LI><a href="#[abc]">msh_exec_script</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7ae]">msh_exec</a><BR>
 <LI><a href="#[841]">lv_indev_search_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[841]">lv_indev_search_obj</a><BR>
 <LI><a href="#[836]">lv_obj_is_editable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[836]">lv_obj_is_editable</a><BR>
 <LI><a href="#[847]">lv_textarea_add_text</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[846]">insert_handler</a><BR>
 <LI><a href="#[93d]">lv_textarea_add_char</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[846]">insert_handler</a><BR>
 <LI><a href="#[b9f]">webclient_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b9f]">webclient_get</a><BR>
 <LI><a href="#[557]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[557]">cJSON_Delete</a><BR>
 <LI><a href="#[ae1]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[566]">parse_value</a><BR>
 <LI><a href="#[ade]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[566]">parse_value</a><BR>
 <LI><a href="#[af2]">print_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[aea]">print_value</a><BR>
 <LI><a href="#[aec]">print_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[aea]">print_value</a><BR>
 <LI><a href="#[531]">rt_slist_append</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[531]">rt_slist_append</a><BR>
 <LI><a href="#[517]">rt_slist_append</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[517]">rt_slist_append</a><BR>
 <LI><a href="#[ad3]">rt_slist_append</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ad3]">rt_slist_append</a><BR>
 <LI><a href="#[5e1]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e1]">copydir</a><BR>
 <LI><a href="#[5c9]">directory_delete_for_msh</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c9]">directory_delete_for_msh</a><BR>
 <LI><a href="#[a1f]">report_style_change_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a1f]">report_style_change_core</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[90]">ACMP1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[91]">ACMP2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[92]">ACMP3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[93]">ACMP4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[58]">ADC1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[59]">ADC2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8e]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8b]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8c]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8d]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[4c]">BEE_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[225]">BOARD_ConfigTouchIntPin</a> from lv_port_indev.o(.text.BOARD_ConfigTouchIntPin) referenced from lv_port_indev.o(.rodata.s_touchConfig)
 <LI><a href="#[226]">BOARD_PullTouchResetPin</a> from lv_port_indev.o(.text.BOARD_PullTouchResetPin) referenced from lv_port_indev.o(.rodata.s_touchConfig)
 <LI><a href="#[223]">BOARD_Touch_I2C_Receive</a> from touchpad.o(.text.BOARD_Touch_I2C_Receive) referenced from lv_port_indev.o(.rodata.s_touchConfig)
 <LI><a href="#[222]">BOARD_Touch_I2C_Send</a> from touchpad.o(.text.BOARD_Touch_I2C_Send) referenced from lv_port_indev.o(.rodata.s_touchConfig)
 <LI><a href="#[f]">BusFault_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d6]">CAN1_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[39]">CAN1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d7]">CAN2_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[3a]">CAN2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[e7]">CAN3_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[af]">CAN3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[74]">CCM_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[75]">CCM_2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[28]">CORE_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[40]">CSI_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[46]">CSU_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[26]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[27]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5a]">DCDC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[47]">DCP_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[48]">DCP_VMI_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[15e]">DEMO_ReadTouch</a> from lv_port_indev.o(.text.DEMO_ReadTouch) referenced 2 times from lv_port_indev.o(.text.lv_port_indev_init)
 <LI><a href="#[b5]">DMA0_DMA16_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[15]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[bf]">DMA10_DMA26_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[1f]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c0]">DMA11_DMA27_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[20]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c1]">DMA12_DMA28_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[21]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c2]">DMA13_DMA29_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[22]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c3]">DMA14_DMA30_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[23]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c4]">DMA15_DMA31_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[24]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b6]">DMA1_DMA17_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[16]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b7]">DMA2_DMA18_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[17]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b8]">DMA3_DMA19_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[18]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b9]">DMA4_DMA20_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[19]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ba]">DMA5_DMA21_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[1a]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[bb]">DMA6_DMA22_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[1b]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[bc]">DMA7_DMA23_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[1c]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[bd]">DMA8_DMA24_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[1d]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[be]">DMA9_DMA25_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[1e]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c5]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[25]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a]">DefaultISR</a> from startup_mimxrt1062.o(.text) referenced 2 times from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[a]">DefaultISR</a> from startup_mimxrt1062.o(.text) referenced 81 times from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[96]">ENC1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[97]">ENC2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[98]">ENC3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[99]">ENC4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[e6]">ENET2_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[ae]">ENET2_1588_Timer_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[e5]">ENET2_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[ad]">ENET2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[e4]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[88]">ENET_1588_Timer_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[e3]">ENET_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[87]">ENET_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[73]">EWM_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[dd]">FLEXIO1_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[6f]">FLEXIO1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[de]">FLEXIO2_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[70]">FLEXIO2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[e8]">FLEXIO3_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[b1]">FLEXIO3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3b]">FLEXRAM_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[df]">FLEXSPI2_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[80]">FLEXSPI2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[e0]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[81]">FLEXSPI_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[76]">GPC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[65]">GPIO1_Combined_0_15_IRQHandler</a> from drv_gpio.o(.text.GPIO1_Combined_0_15_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[66]">GPIO1_Combined_16_31_IRQHandler</a> from drv_gpio.o(.text.GPIO1_Combined_16_31_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5d]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5e]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5f]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[60]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[61]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[62]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[63]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[64]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[67]">GPIO2_Combined_0_15_IRQHandler</a> from drv_gpio.o(.text.GPIO2_Combined_0_15_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[68]">GPIO2_Combined_16_31_IRQHandler</a> from drv_gpio.o(.text.GPIO2_Combined_16_31_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[69]">GPIO3_Combined_0_15_IRQHandler</a> from drv_gpio.o(.text.GPIO3_Combined_0_15_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6a]">GPIO3_Combined_16_31_IRQHandler</a> from drv_gpio.o(.text.GPIO3_Combined_16_31_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6b]">GPIO4_Combined_0_15_IRQHandler</a> from drv_gpio.o(.text.GPIO4_Combined_0_15_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6c]">GPIO4_Combined_16_31_IRQHandler</a> from drv_gpio.o(.text.GPIO4_Combined_16_31_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6d]">GPIO5_Combined_0_15_IRQHandler</a> from drv_gpio.o(.text.GPIO5_Combined_0_15_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6e]">GPIO5_Combined_16_31_IRQHandler</a> from drv_gpio.o(.text.GPIO5_Combined_16_31_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b2]">GPIO6_7_8_9_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3e]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[79]">GPT1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7a]">GPT2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[3c]">KPP_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3f]">LCDIF_IRQHandler</a> from lv_port_disp.o(.text.LCDIF_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ce]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[31]">LPI2C1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[cf]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[32]">LPI2C2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d0]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[33]">LPI2C3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d1]">LPI2C4_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[34]">LPI2C4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d2]">LPSPI1_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[35]">LPSPI1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d3]">LPSPI2_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[36]">LPSPI2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d4]">LPSPI3_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[37]">LPSPI3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d5]">LPSPI4_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[38]">LPSPI4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c6]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[29]">LPUART1_IRQHandler</a> from drv_uart.o(.text.LPUART1_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c7]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2a]">LPUART2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c8]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2b]">LPUART3_IRQHandler</a> from drv_uart.o(.text.LPUART3_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c9]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2c]">LPUART4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ca]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2d]">LPUART5_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[cb]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2e]">LPUART6_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[cc]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2f]">LPUART7_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[cd]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[30]">LPUART8_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[e]">MemManage_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c]">NMI_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c]">NMI_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[8f]">PIT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[52]">PMU_EVENT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7b]">PWM1_0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7c]">PWM1_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7d]">PWM1_2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7e]">PWM1_3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7f]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9e]">PWM2_0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9f]">PWM2_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a0]">PWM2_2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a1]">PWM2_3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a2]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a3]">PWM3_0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a4]">PWM3_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a5]">PWM3_2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a6]">PWM3_3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a7]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a8]">PWM4_0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a9]">PWM4_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[aa]">PWM4_2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ab]">PWM4_3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ac]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[41]">PXP_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[13]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[13]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[72]">RTWDOG_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[78]">Reserved115_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[94]">Reserved143_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[95]">Reserved144_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b0]">Reserved171_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[49]">Reserved68_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[53]">Reserved78_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5b]">Reserved86_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5c]">Reserved87_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b]">Reset_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d8]">SAI1_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[4d]">SAI1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d9]">SAI2_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[4e]">SAI2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[da]">SAI3_RX_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[4f]">SAI3_RX_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[db]">SAI3_TX_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[50]">SAI3_TX_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[82]">SEMC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[4b]">SJC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[43]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[44]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[45]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[dc]">SPDIF_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[51]">SPDIF_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[77]">SRC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[11]">SVC_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[11]">SVC_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[14]">SysTick_Handler</a> from board.o(.text.SysTick_Handler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[14]">SysTick_Handler</a> from board.o(.text.SysTick_Handler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[b3]">SystemInit</a> from system_mimxrt1062.o(.text.SystemInit) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[54]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[55]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9a]">TMR1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9b]">TMR2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9c]">TMR3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9d]">TMR4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[4a]">TRNG_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3d]">TSC_DIG_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[86]">USB_OTG1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[85]">USB_OTG2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[56]">USB_PHY1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[57]">USB_PHY2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[e1]">USDHC1_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[83]">USDHC1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[e2]">USDHC2_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[84]">USDHC2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[224]">VIDEO_DelayMs</a> from fsl_video_common.o(.text.VIDEO_DelayMs) referenced from lv_port_indev.o(.rodata.s_touchConfig)
 <LI><a href="#[71]">WDOG1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[42]">WDOG2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[89]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8a]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b4]">__main</a> from __main.o(!!!main) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[f9]">__wqueue_pollwake</a> from poll.o(.text.__wqueue_pollwake) referenced 2 times from poll.o(.text._poll_add)
 <LI><a href="#[fc]">_delayed_work_timeout_handler</a> from workqueue.o(.text._delayed_work_timeout_handler) referenced 2 times from workqueue.o(.text._workqueue_submit_work)
 <LI><a href="#[e9]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[138]">_lv_disp_refr_timer</a> from lv_refr.o(.text._lv_disp_refr_timer) referenced 2 times from lv_hal_disp.o(.text.lv_disp_drv_register)
 <LI><a href="#[14e]">_lv_ll_get_head</a> from lv_ll.o(.text._lv_ll_get_head) referenced 2 times from lv_group.o(.text.lv_group_focus_next)
 <LI><a href="#[14f]">_lv_ll_get_next</a> from lv_ll.o(.text._lv_ll_get_next) referenced 2 times from lv_group.o(.text.lv_group_focus_next)
 <LI><a href="#[151]">_lv_ll_get_prev</a> from lv_ll.o(.text._lv_ll_get_prev) referenced 2 times from lv_group.o(.text.lv_group_focus_prev)
 <LI><a href="#[150]">_lv_ll_get_tail</a> from lv_ll.o(.text._lv_ll_get_tail) referenced 2 times from lv_group.o(.text.lv_group_focus_prev)
 <LI><a href="#[252]">_pin_cmd</a> from pin.o(.text._pin_cmd) referenced from pin.o(FSymTab)
 <LI><a href="#[175]">_pin_control</a> from pin.o(.text._pin_control) referenced 2 times from pin.o(.text.rt_device_pin_register)
 <LI><a href="#[173]">_pin_read</a> from pin.o(.text._pin_read) referenced 2 times from pin.o(.text.rt_device_pin_register)
 <LI><a href="#[174]">_pin_write</a> from pin.o(.text._pin_write) referenced 2 times from pin.o(.text.rt_device_pin_register)
 <LI><a href="#[171]">_poll_add</a> from poll.o(.text._poll_add) referenced 2 times from poll.o(.text.poll_table_init)
 <LI><a href="#[ee]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[ed]">_sbackspace</a> from _sgetc.o(.text) referenced 3 times from vsscanf.o(.text)
 <LI><a href="#[f0]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[ec]">_sgetc</a> from _sgetc.o(.text) referenced 3 times from vsscanf.o(.text)
 <LI><a href="#[ea]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[eb]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[fa]">_thread_exit</a> from thread.o(.text._thread_exit) referenced 2 times from thread.o(.text._thread_init)
 <LI><a href="#[fb]">_thread_timeout</a> from thread.o(.text._thread_timeout) referenced 2 times from thread.o(.text._thread_init)
 <LI><a href="#[180]">_workqueue_thread_entry</a> from workqueue.o(.text._workqueue_thread_entry) referenced 2 times from workqueue.o(.text.rt_workqueue_create)
 <LI><a href="#[ff]">alram_timer_cb</a> from alarm_timer.o(.text.alram_timer_cb) referenced 2 times from alarm_timer.o(.text.alram_timer_start)
 <LI><a href="#[12f]">anim_read_cb</a> from lvgl_sn_interface.o(.text.anim_read_cb) referenced 2 times from lvgl_sn_interface.o(.text.lv_anim_set_ready_cb)
 <LI><a href="#[f2]">anim_timer</a> from lv_anim.o(.text.anim_timer) referenced 2 times from lv_anim.o(.text._lv_anim_core_init)
 <LI><a href="#[127]">anim_x_cb</a> from lvgl_sn_interface.o(.text.anim_x_cb) referenced 2 times from lvgl_sn_interface.o(.text.lv_anim_set_exec_cb)
 <LI><a href="#[111]">app_click_cb</a> from lvgl_sn_interface.o(.text.app_click_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_desk)
 <LI><a href="#[10c]">app_close_cb</a> from lvgl_sn_interface.o(.text.app_close_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_alarm)
 <LI><a href="#[10c]">app_close_cb</a> from lvgl_sn_interface.o(.text.app_close_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_device_status)
 <LI><a href="#[10c]">app_close_cb</a> from lvgl_sn_interface.o(.text.app_close_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_net_up)
 <LI><a href="#[15f]">arc_anim_end_angle</a> from lv_spinner.o(.text.arc_anim_end_angle) referenced 2 times from lv_spinner.o(.text.lv_spinner_constructor)
 <LI><a href="#[160]">arc_anim_start_angle</a> from lv_spinner.o(.text.arc_anim_start_angle) referenced 2 times from lv_spinner.o(.text.lv_spinner_constructor)
 <LI><a href="#[251]">at</a> from at_cli.o(.text.at) referenced from at_cli.o(FSymTab)
 <LI><a href="#[1a5]">at_bind</a> from at_socket.o(.text.at_bind) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[10b]">at_client_entry</a> from at_cli.o(.text.at_client_entry) referenced 2 times from at_cli.o(.text.client_cli_parser)
 <LI><a href="#[101]">at_client_rx_ind</a> from at_client.o(.text.at_client_rx_ind) referenced 2 times from at_client.o(.text.at_client_init)
 <LI><a href="#[104]">at_closed_notice_cb</a> from at_socket.o(.text.at_closed_notice_cb) referenced 2 times from at_socket.o(.text.at_socket)
 <LI><a href="#[1a4]">at_closesocket</a> from at_socket.o(.text.at_closesocket) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[1a6]">at_connect</a> from at_socket.o(.text.at_connect) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[1a2]">at_freeaddrinfo</a> from at_socket.o(.text.at_freeaddrinfo) referenced from af_inet_at.o(.rodata.at_netdb_ops)
 <LI><a href="#[1a1]">at_getaddrinfo</a> from at_socket.o(.text.at_getaddrinfo) referenced from af_inet_at.o(.rodata.at_netdb_ops)
 <LI><a href="#[1a0]">at_gethostbyname</a> from at_socket.o(.text.at_gethostbyname) referenced from af_inet_at.o(.rodata.at_netdb_ops)
 <LI><a href="#[1a9]">at_getsockopt</a> from at_socket.o(.text.at_getsockopt) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[1ac]">at_poll</a> from af_inet_at.o(.text.at_poll) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[103]">at_recv_notice_cb</a> from at_socket.o(.text.at_recv_notice_cb) referenced 2 times from at_socket.o(.text.at_socket)
 <LI><a href="#[1a8]">at_recvfrom</a> from at_socket.o(.text.at_recvfrom) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[1a7]">at_sendto</a> from at_socket.o(.text.at_sendto) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[1aa]">at_setsockopt</a> from at_socket.o(.text.at_setsockopt) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[1ab]">at_shutdown</a> from at_socket.o(.text.at_shutdown) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[1a3]">at_socket</a> from at_socket.o(.text.at_socket) referenced from af_inet_at.o(.rodata.at_socket_ops)
 <LI><a href="#[162]">btns_value_changed_event_cb</a> from lv_tabview.o(.text.btns_value_changed_event_cb) referenced 2 times from lv_tabview.o(.text.lv_tabview_constructor)
 <LI><a href="#[181]">check_netdev_internet_up_work</a> from sal_socket.o(.text.check_netdev_internet_up_work) referenced 2 times from sal_socket.o(.text.sal_check_netdev_internet_up)
 <LI><a href="#[10e]">ck_alram_cb</a> from lvgl_sn_interface.o(.text.ck_alram_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_alarm)
 <LI><a href="#[258]">clear</a> from cmd.o(.text.clear) referenced from cmd.o(FSymTab)
 <LI><a href="#[10a]">client_getchar_rx_ind</a> from at_cli.o(.text.client_getchar_rx_ind) referenced 2 times from at_cli.o(.text.client_cli_parser)
 <LI><a href="#[102]">client_parser</a> from at_client.o(.text.client_parser) referenced 2 times from at_client.o(.text.at_client_para_init)
 <LI><a href="#[267]">cmd_cat</a> from msh_file.o(.text.cmd_cat) referenced from msh_file.o(FSymTab)
 <LI><a href="#[269]">cmd_cd</a> from msh_file.o(.text.cmd_cd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[265]">cmd_cp</a> from msh_file.o(.text.cmd_cp) referenced from msh_file.o(FSymTab)
 <LI><a href="#[26f]">cmd_df</a> from msh_file.o(.text.cmd_df) referenced from msh_file.o(FSymTab)
 <LI><a href="#[270]">cmd_echo</a> from msh_file.o(.text.cmd_echo) referenced from msh_file.o(FSymTab)
 <LI><a href="#[257]">cmd_free</a> from msh.o(.text.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[264]">cmd_ls</a> from msh_file.o(.text.cmd_ls) referenced from msh_file.o(FSymTab)
 <LI><a href="#[26b]">cmd_mkdir</a> from msh_file.o(.text.cmd_mkdir) referenced from msh_file.o(FSymTab)
 <LI><a href="#[26c]">cmd_mkfs</a> from msh_file.o(.text.cmd_mkfs) referenced from msh_file.o(FSymTab)
 <LI><a href="#[26d]">cmd_mount</a> from msh_file.o(.text.cmd_mount) referenced from msh_file.o(FSymTab)
 <LI><a href="#[266]">cmd_mv</a> from msh_file.o(.text.cmd_mv) referenced from msh_file.o(FSymTab)
 <LI><a href="#[249]">cmd_ntp_sync</a> from ntp.o(.text.cmd_ntp_sync) referenced from ntp.o(FSymTab)
 <LI><a href="#[256]">cmd_ps</a> from msh.o(.text.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[26a]">cmd_pwd</a> from msh_file.o(.text.cmd_pwd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[268]">cmd_rm</a> from msh_file.o(.text.cmd_rm) referenced from msh_file.o(FSymTab)
 <LI><a href="#[271]">cmd_tail</a> from msh_file.o(.text.cmd_tail) referenced from msh_file.o(FSymTab)
 <LI><a href="#[26e]">cmd_umount</a> from msh_file.o(.text.cmd_umount) referenced from msh_file.o(FSymTab)
 <LI><a href="#[11a]">color_blend_true_color_additive</a> from lv_draw_sw_blend.o(.text.color_blend_true_color_additive) referenced from lv_draw_sw_blend.o(.text.fill_blended)
 <LI><a href="#[11a]">color_blend_true_color_additive</a> from lv_draw_sw_blend.o(.text.color_blend_true_color_additive) referenced from lv_draw_sw_blend.o(.text.map_blended)
 <LI><a href="#[11c]">color_blend_true_color_multiply</a> from lv_draw_sw_blend.o(.text.color_blend_true_color_multiply) referenced from lv_draw_sw_blend.o(.text.fill_blended)
 <LI><a href="#[11c]">color_blend_true_color_multiply</a> from lv_draw_sw_blend.o(.text.color_blend_true_color_multiply) referenced from lv_draw_sw_blend.o(.text.map_blended)
 <LI><a href="#[11b]">color_blend_true_color_subtractive</a> from lv_draw_sw_blend.o(.text.color_blend_true_color_subtractive) referenced from lv_draw_sw_blend.o(.text.fill_blended)
 <LI><a href="#[11b]">color_blend_true_color_subtractive</a> from lv_draw_sw_blend.o(.text.color_blend_true_color_subtractive) referenced from lv_draw_sw_blend.o(.text.map_blended)
 <LI><a href="#[100]">console_getchar_rx_ind</a> from at_cli.o(.text.console_getchar_rx_ind) referenced 2 times from at_cli.o(.text.at_cli_init)
 <LI><a href="#[163]">cont_scroll_end_event_cb</a> from lv_tabview.o(.text.cont_scroll_end_event_cb) referenced 2 times from lv_tabview.o(.text.lv_tabview_constructor)
 <LI><a href="#[182]">cursor_blink_anim_cb</a> from lv_textarea.o(.text.cursor_blink_anim_cb) referenced 4 times from lv_textarea.o(.text.start_cursor_blink)
 <LI><a href="#[183]">dark_color_filter_cb</a> from lv_theme_default.o(.text.dark_color_filter_cb) referenced 2 times from lv_theme_default.o(.text.style_init)
 <LI><a href="#[253]">date</a> from rtc.o(.text.date) referenced from rtc.o(FSymTab)
 <LI><a href="#[10d]">dev_btn_cb</a> from lvgl_sn_interface.o(.text.dev_btn_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_alarm)
 <LI><a href="#[1b5]">dfs_elm_close</a> from dfs_elm.o(.text.dfs_elm_close) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[1b9]">dfs_elm_flush</a> from dfs_elm.o(.text.dfs_elm_flush) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[1bb]">dfs_elm_getdents</a> from dfs_elm.o(.text.dfs_elm_getdents) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[1b6]">dfs_elm_ioctl</a> from dfs_elm.o(.text.dfs_elm_ioctl) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[1ba]">dfs_elm_lseek</a> from dfs_elm.o(.text.dfs_elm_lseek) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[1af]">dfs_elm_mkfs</a> from dfs_elm.o(.text.dfs_elm_mkfs) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[1ad]">dfs_elm_mount</a> from dfs_elm.o(.text.dfs_elm_mount) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[1b4]">dfs_elm_open</a> from dfs_elm.o(.text.dfs_elm_open) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[1b7]">dfs_elm_read</a> from dfs_elm.o(.text.dfs_elm_read) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[1b3]">dfs_elm_rename</a> from dfs_elm.o(.text.dfs_elm_rename) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[1b2]">dfs_elm_stat</a> from dfs_elm.o(.text.dfs_elm_stat) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[1b0]">dfs_elm_statfs</a> from dfs_elm.o(.text.dfs_elm_statfs) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[1b1]">dfs_elm_unlink</a> from dfs_elm.o(.text.dfs_elm_unlink) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[1ae]">dfs_elm_unmount</a> from dfs_elm.o(.text.dfs_elm_unmount) referenced from dfs_elm.o(.rodata.dfs_elm)
 <LI><a href="#[1b8]">dfs_elm_write</a> from dfs_elm.o(.text.dfs_elm_write) referenced from dfs_elm.o(.rodata.dfs_elm_fops)
 <LI><a href="#[235]">dfs_init</a> from dfs.o(.text.dfs_init) referenced from dfs.o(.rti_fn.2)
 <LI><a href="#[18e]">dfs_net_close</a> from dfs_net.o(.text.dfs_net_close) referenced from dfs_net.o(.rodata._net_fops)
 <LI><a href="#[18f]">dfs_net_ioctl</a> from dfs_net.o(.text.dfs_net_ioctl) referenced from dfs_net.o(.rodata._net_fops)
 <LI><a href="#[192]">dfs_net_poll</a> from dfs_net.o(.text.dfs_net_poll) referenced from dfs_net.o(.rodata._net_fops)
 <LI><a href="#[190]">dfs_net_read</a> from dfs_net.o(.text.dfs_net_read) referenced from dfs_net.o(.rodata._net_fops)
 <LI><a href="#[191]">dfs_net_write</a> from dfs_net.o(.text.dfs_net_write) referenced from dfs_net.o(.rodata._net_fops)
 <LI><a href="#[194]">dfs_ramfs_close</a> from dfs_ramfs.o(.text.dfs_ramfs_close) referenced from dfs_ramfs.o(.rodata._ram_fops)
 <LI><a href="#[199]">dfs_ramfs_getdents</a> from dfs_ramfs.o(.text.dfs_ramfs_getdents) referenced from dfs_ramfs.o(.rodata._ram_fops)
 <LI><a href="#[23d]">dfs_ramfs_init</a> from dfs_ramfs.o(.text.dfs_ramfs_init) referenced from dfs_ramfs.o(.rti_fn.4)
 <LI><a href="#[195]">dfs_ramfs_ioctl</a> from dfs_ramfs.o(.text.dfs_ramfs_ioctl) referenced from dfs_ramfs.o(.rodata._ram_fops)
 <LI><a href="#[198]">dfs_ramfs_lseek</a> from dfs_ramfs.o(.text.dfs_ramfs_lseek) referenced from dfs_ramfs.o(.rodata._ram_fops)
 <LI><a href="#[19a]">dfs_ramfs_mount</a> from dfs_ramfs.o(.text.dfs_ramfs_mount) referenced from dfs_ramfs.o(.rodata._ramfs)
 <LI><a href="#[193]">dfs_ramfs_open</a> from dfs_ramfs.o(.text.dfs_ramfs_open) referenced from dfs_ramfs.o(.rodata._ram_fops)
 <LI><a href="#[196]">dfs_ramfs_read</a> from dfs_ramfs.o(.text.dfs_ramfs_read) referenced from dfs_ramfs.o(.rodata._ram_fops)
 <LI><a href="#[19f]">dfs_ramfs_rename</a> from dfs_ramfs.o(.text.dfs_ramfs_rename) referenced from dfs_ramfs.o(.rodata._ramfs)
 <LI><a href="#[19e]">dfs_ramfs_stat</a> from dfs_ramfs.o(.text.dfs_ramfs_stat) referenced from dfs_ramfs.o(.rodata._ramfs)
 <LI><a href="#[19c]">dfs_ramfs_statfs</a> from dfs_ramfs.o(.text.dfs_ramfs_statfs) referenced from dfs_ramfs.o(.rodata._ramfs)
 <LI><a href="#[19d]">dfs_ramfs_unlink</a> from dfs_ramfs.o(.text.dfs_ramfs_unlink) referenced from dfs_ramfs.o(.rodata._ramfs)
 <LI><a href="#[19b]">dfs_ramfs_unmount</a> from dfs_ramfs.o(.text.dfs_ramfs_unmount) referenced from dfs_ramfs.o(.rodata._ramfs)
 <LI><a href="#[197]">dfs_ramfs_write</a> from dfs_ramfs.o(.text.dfs_ramfs_write) referenced from dfs_ramfs.o(.rodata._ram_fops)
 <LI><a href="#[136]">draw_part_begin_event_cb</a> from lv_calendar.o(.text.draw_part_begin_event_cb) referenced 2 times from lv_calendar.o(.text.lv_calendar_constructor)
 <LI><a href="#[23c]">elm_init</a> from dfs_elm.o(.text.elm_init) referenced from dfs_elm.o(.rti_fn.4)
 <LI><a href="#[1be]">esp32_control</a> from at_device_esp32.o(.text.esp32_control) referenced from at_device_esp32.o(.rodata.esp32_device_ops)
 <LI><a href="#[1bd]">esp32_deinit</a> from at_device_esp32.o(.text.esp32_deinit) referenced from at_device_esp32.o(.rodata.esp32_device_ops)
 <LI><a href="#[237]">esp32_device_class_register</a> from at_device_esp32.o(.text.esp32_device_class_register) referenced from at_device_esp32.o(.rti_fn.3)
 <LI><a href="#[241]">esp32_device_register</a> from at_sample_esp32.o(.text.esp32_device_register) referenced from at_sample_esp32.o(.rti_fn.6)
 <LI><a href="#[1c9]">esp32_domain_resolve</a> from at_socket_esp32.o(.text.esp32_domain_resolve) referenced from at_socket_esp32.o(.rodata.esp32_socket_ops)
 <LI><a href="#[119]">esp32_get_netdev_info</a> from at_device_esp32.o(.text.esp32_get_netdev_info) referenced 2 times from at_device_esp32.o(.text.esp32_netdev_start_delay_work)
 <LI><a href="#[1bc]">esp32_init</a> from at_device_esp32.o(.text.esp32_init) referenced from at_device_esp32.o(.rodata.esp32_device_ops)
 <LI><a href="#[1c5]">esp32_netdev_netstat</a> from at_device_esp32.o(.text.esp32_netdev_netstat) referenced from at_device_esp32.o(.rodata.esp32_netdev_ops)
 <LI><a href="#[1c4]">esp32_netdev_ping</a> from at_device_esp32.o(.text.esp32_netdev_ping) referenced from at_device_esp32.o(.rodata.esp32_netdev_ops)
 <LI><a href="#[1c1]">esp32_netdev_set_addr_info</a> from at_device_esp32.o(.text.esp32_netdev_set_addr_info) referenced from at_device_esp32.o(.rodata.esp32_netdev_ops)
 <LI><a href="#[1c3]">esp32_netdev_set_dhcp</a> from at_device_esp32.o(.text.esp32_netdev_set_dhcp) referenced from at_device_esp32.o(.rodata.esp32_netdev_ops)
 <LI><a href="#[1c2]">esp32_netdev_set_dns_server</a> from at_device_esp32.o(.text.esp32_netdev_set_dns_server) referenced from at_device_esp32.o(.rodata.esp32_netdev_ops)
 <LI><a href="#[1c0]">esp32_netdev_set_down</a> from at_device_esp32.o(.text.esp32_netdev_set_down) referenced from at_device_esp32.o(.rodata.esp32_netdev_ops)
 <LI><a href="#[1bf]">esp32_netdev_set_up</a> from at_device_esp32.o(.text.esp32_netdev_set_up) referenced from at_device_esp32.o(.rodata.esp32_netdev_ops)
 <LI><a href="#[1c7]">esp32_socket_close</a> from at_socket_esp32.o(.text.esp32_socket_close) referenced from at_socket_esp32.o(.rodata.esp32_socket_ops)
 <LI><a href="#[1c6]">esp32_socket_connect</a> from at_socket_esp32.o(.text.esp32_socket_connect) referenced from at_socket_esp32.o(.rodata.esp32_socket_ops)
 <LI><a href="#[1c8]">esp32_socket_send</a> from at_socket_esp32.o(.text.esp32_socket_send) referenced from at_socket_esp32.o(.rodata.esp32_socket_ops)
 <LI><a href="#[1ca]">esp32_socket_set_event_cb</a> from at_socket_esp32.o(.text.esp32_socket_set_event_cb) referenced from at_socket_esp32.o(.rodata.esp32_socket_ops)
 <LI><a href="#[159]">fade_anim_cb</a> from lv_obj_style.o(.text.fade_anim_cb) referenced 2 times from lv_obj_style.o(.text.lv_obj_fade_in)
 <LI><a href="#[15a]">fade_in_anim_ready</a> from lv_obj_style.o(.text.fade_in_anim_ready) referenced 2 times from lv_obj_style.o(.text.lv_obj_fade_in)
 <LI><a href="#[122]">file_read</a> from zftp_test.o(.text.file_read) referenced 2 times from zftp_test.o(.text.ftp_upload)
 <LI><a href="#[121]">file_write</a> from zftp_test.o(.text.file_write) referenced 2 times from zftp_test.o(.text.ftp_upload)
 <LI><a href="#[14c]">find_item</a> from lv_draw_sw_gradient.o(.text.find_item) referenced 2 times from lv_draw_sw_gradient.o(.text.lv_gradient_get)
 <LI><a href="#[fd]">find_oldest_item_life</a> from lv_draw_sw_gradient.o(.text.find_oldest_item_life) referenced 2 times from lv_draw_sw_gradient.o(.text.allocate_item)
 <LI><a href="#[11f]">finsh_rx_ind</a> from shell.o(.text.finsh_rx_ind) referenced 2 times from shell.o(.text.finsh_set_device)
 <LI><a href="#[242]">finsh_system_init</a> from shell.o(.text.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[120]">finsh_thread_entry</a> from shell.o(.text.finsh_thread_entry) referenced 2 times from shell.o(.text.finsh_system_init)
 <LI><a href="#[14b]">flex_update</a> from lv_flex.o(.text.flex_update) referenced 2 times from lv_flex.o(.text.lv_flex_init)
 <LI><a href="#[ef]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[184]">grey_filter_cb</a> from lv_theme_default.o(.text.grey_filter_cb) referenced 2 times from lv_theme_default.o(.text.style_init)
 <LI><a href="#[14d]">grid_update</a> from lv_grid.o(.text.grid_update) referenced 2 times from lv_grid.o(.text.lv_grid_init)
 <LI><a href="#[110]">humi_slider_cb</a> from lvgl_sn_interface.o(.text.humi_slider_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_alarm)
 <LI><a href="#[1d2]">imxrt_configure</a> from drv_uart.o(.text.imxrt_configure) referenced from drv_uart.o(.rodata.imxrt_uart_ops)
 <LI><a href="#[1d3]">imxrt_control</a> from drv_uart.o(.text.imxrt_control) referenced from drv_uart.o(.rodata.imxrt_uart_ops)
 <LI><a href="#[1d5]">imxrt_getc</a> from drv_uart.o(.text.imxrt_getc) referenced from drv_uart.o(.rodata.imxrt_uart_ops)
 <LI><a href="#[176]">imxrt_lcd_control</a> from drv_lcd.o(.text.imxrt_lcd_control) referenced 2 times from drv_lcd.o(.text.rt_hw_lcd_init)
 <LI><a href="#[177]">imxrt_lcd_init</a> from drv_lcd.o(.text.imxrt_lcd_init) referenced 2 times from drv_lcd.o(.text.rt_hw_lcd_init)
 <LI><a href="#[1ce]">imxrt_pin_attach_irq</a> from drv_gpio.o(.text.imxrt_pin_attach_irq) referenced from drv_gpio.o(.rodata.imxrt_pin_ops)
 <LI><a href="#[1cf]">imxrt_pin_detach_irq</a> from drv_gpio.o(.text.imxrt_pin_detach_irq) referenced from drv_gpio.o(.rodata.imxrt_pin_ops)
 <LI><a href="#[1d1]">imxrt_pin_get</a> from drv_gpio.o(.text.imxrt_pin_get) referenced from drv_gpio.o(.rodata.imxrt_pin_ops)
 <LI><a href="#[1d0]">imxrt_pin_irq_enable</a> from drv_gpio.o(.text.imxrt_pin_irq_enable) referenced from drv_gpio.o(.rodata.imxrt_pin_ops)
 <LI><a href="#[1cb]">imxrt_pin_mode</a> from drv_gpio.o(.text.imxrt_pin_mode) referenced from drv_gpio.o(.rodata.imxrt_pin_ops)
 <LI><a href="#[1cd]">imxrt_pin_read</a> from drv_gpio.o(.text.imxrt_pin_read) referenced from drv_gpio.o(.rodata.imxrt_pin_ops)
 <LI><a href="#[1cc]">imxrt_pin_write</a> from drv_gpio.o(.text.imxrt_pin_write) referenced from drv_gpio.o(.rodata.imxrt_pin_ops)
 <LI><a href="#[1d4]">imxrt_putc</a> from drv_uart.o(.text.imxrt_putc) referenced from drv_uart.o(.rodata.imxrt_uart_ops)
 <LI><a href="#[f1]">isspace</a> from isspace.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[125]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_16_compare) referenced 2 times from lv_font_fmt_txt.o(.text.get_kern_value)
 <LI><a href="#[124]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_8_compare) referenced 2 times from lv_font_fmt_txt.o(.text.get_kern_value)
 <LI><a href="#[fe]">kill_oldest_item</a> from lv_draw_sw_gradient.o(.text.kill_oldest_item) referenced 2 times from lv_draw_sw_gradient.o(.text.allocate_item)
 <LI><a href="#[164]">label_event_cb</a> from lv_textarea.o(.text.label_event_cb) referenced 2 times from lv_textarea.o(.text.lv_textarea_constructor)
 <LI><a href="#[15d]">lcd_fb_flush</a> from lv_port_disp.o(.text.lcd_fb_flush) referenced 2 times from lv_port_disp.o(.text.lv_port_disp_init)
 <LI><a href="#[112]">list_btn_cb</a> from lvgl_sn_interface.o(.text.list_btn_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_device_status)
 <LI><a href="#[263]">list_device</a> from cmd.o(.text.list_device) referenced from cmd.o(FSymTab)
 <LI><a href="#[25c]">list_event</a> from cmd.o(.text.list_event) referenced from cmd.o(FSymTab)
 <LI><a href="#[254]">list_fd</a> from dfs.o(.text.list_fd) referenced from dfs.o(FSymTab)
 <LI><a href="#[25e]">list_mailbox</a> from cmd.o(.text.list_mailbox) referenced from cmd.o(FSymTab)
 <LI><a href="#[260]">list_memheap</a> from cmd.o(.text.list_memheap) referenced from cmd.o(FSymTab)
 <LI><a href="#[261]">list_mempool</a> from cmd.o(.text.list_mempool) referenced from cmd.o(FSymTab)
 <LI><a href="#[25f]">list_msgqueue</a> from cmd.o(.text.list_msgqueue) referenced from cmd.o(FSymTab)
 <LI><a href="#[25d]">list_mutex</a> from cmd.o(.text.list_mutex) referenced from cmd.o(FSymTab)
 <LI><a href="#[25b]">list_sem</a> from cmd.o(.text.list_sem) referenced from cmd.o(FSymTab)
 <LI><a href="#[25a]">list_thread</a> from cmd.o(.text.list_thread) referenced from cmd.o(FSymTab)
 <LI><a href="#[262]">list_timer</a> from cmd.o(.text.list_timer) referenced from cmd.o(FSymTab)
 <LI><a href="#[12c]">lv_anim_path_ease_in_out</a> from lv_anim.o(.text.lv_anim_path_ease_in_out) referenced 2 times from lv_spinner.o(.text.lv_anim_set_path_cb)
 <LI><a href="#[12e]">lv_anim_path_ease_out</a> from lv_anim.o(.text.lv_anim_path_ease_out) referenced 4 times from lv_obj_scroll.o(.text.lv_anim_set_path_cb)
 <LI><a href="#[126]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced 2 times from lv_anim.o(.text.lv_anim_init)
 <LI><a href="#[126]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced 2 times from lv_style.o(.text.lv_style_transition_dsc_init)
 <LI><a href="#[126]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced 2 times from lv_theme_default.o(.text.style_init)
 <LI><a href="#[12b]">lv_anim_path_overshoot</a> from lv_anim.o(.text.lv_anim_path_overshoot) referenced 2 times from lvgl_sn_interface.o(.text.lv_anim_set_path_cb)
 <LI><a href="#[12d]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_anim_set_path_cb)
 <LI><a href="#[1d6]">lv_arc_constructor</a> from lv_arc.o(.text.lv_arc_constructor) referenced from lv_arc.o(.rodata.lv_arc_class)
 <LI><a href="#[1d7]">lv_arc_event</a> from lv_arc.o(.text.lv_arc_event) referenced from lv_arc.o(.rodata.lv_arc_class)
 <LI><a href="#[107]">lv_area_get_height</a> from lv_flex.o(.text.lv_area_get_height) referenced 2 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[117]">lv_area_get_height</a> from lv_bar.o(.text.lv_area_get_height) referenced 2 times from lv_bar.o(.text.draw_indic)
 <LI><a href="#[106]">lv_area_get_width</a> from lv_flex.o(.text.lv_area_get_width) referenced 4 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[118]">lv_area_get_width</a> from lv_bar.o(.text.lv_area_get_width) referenced 2 times from lv_bar.o(.text.draw_indic)
 <LI><a href="#[108]">lv_area_set_height</a> from lv_area.o(.text.lv_area_set_height) referenced 2 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[109]">lv_area_set_width</a> from lv_area.o(.text.lv_area_set_width) referenced 2 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[128]">lv_bar_anim</a> from lv_bar.o(.text.lv_bar_anim) referenced 2 times from lv_bar.o(.text.lv_anim_set_exec_cb)
 <LI><a href="#[130]">lv_bar_anim_ready</a> from lv_bar.o(.text.lv_bar_anim_ready) referenced 2 times from lv_bar.o(.text.lv_anim_set_ready_cb)
 <LI><a href="#[1d8]">lv_bar_constructor</a> from lv_bar.o(.text.lv_bar_constructor) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[1d9]">lv_bar_destructor</a> from lv_bar.o(.text.lv_bar_destructor) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[1da]">lv_bar_event</a> from lv_bar.o(.text.lv_bar_event) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[1db]">lv_btn_constructor</a> from lv_btn.o(.text.lv_btn_constructor) referenced from lv_btn.o(.rodata.lv_btn_class)
 <LI><a href="#[1dc]">lv_btnmatrix_constructor</a> from lv_btnmatrix.o(.text.lv_btnmatrix_constructor) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[1dd]">lv_btnmatrix_destructor</a> from lv_btnmatrix.o(.text.lv_btnmatrix_destructor) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[1de]">lv_btnmatrix_event</a> from lv_btnmatrix.o(.text.lv_btnmatrix_event) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[1df]">lv_calendar_constructor</a> from lv_calendar.o(.text.lv_calendar_constructor) referenced from lv_calendar.o(.rodata.lv_calendar_class)
 <LI><a href="#[1e2]">lv_canvas_constructor</a> from lv_canvas.o(.text.lv_canvas_constructor) referenced from lv_canvas.o(.rodata.lv_canvas_class)
 <LI><a href="#[1e3]">lv_canvas_destructor</a> from lv_canvas.o(.text.lv_canvas_destructor) referenced from lv_canvas.o(.rodata.lv_canvas_class)
 <LI><a href="#[1e4]">lv_chart_constructor</a> from lv_chart.o(.text.lv_chart_constructor) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[1e5]">lv_chart_destructor</a> from lv_chart.o(.text.lv_chart_destructor) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[1e6]">lv_chart_event</a> from lv_chart.o(.text.lv_chart_event) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[1e7]">lv_checkbox_constructor</a> from lv_checkbox.o(.text.lv_checkbox_constructor) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[1e8]">lv_checkbox_destructor</a> from lv_checkbox.o(.text.lv_checkbox_destructor) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[1e9]">lv_checkbox_event</a> from lv_checkbox.o(.text.lv_checkbox_event) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[1ea]">lv_colorwheel_constructor</a> from lv_colorwheel.o(.text.lv_colorwheel_constructor) referenced from lv_colorwheel.o(.rodata.lv_colorwheel_class)
 <LI><a href="#[1eb]">lv_colorwheel_event</a> from lv_colorwheel.o(.text.lv_colorwheel_event) referenced from lv_colorwheel.o(.rodata.lv_colorwheel_class)
 <LI><a href="#[139]">lv_draw_mask_angle</a> from lv_draw_mask.o(.text.lv_draw_mask_angle) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_angle_init)
 <LI><a href="#[13a]">lv_draw_mask_line</a> from lv_draw_mask.o(.text.lv_draw_mask_line) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_line_points_init)
 <LI><a href="#[13b]">lv_draw_mask_radius</a> from lv_draw_mask.o(.text.lv_draw_mask_radius) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_radius_init)
 <LI><a href="#[13d]">lv_draw_sw_arc</a> from lv_draw_sw_arc.o(.text.lv_draw_sw_arc) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[143]">lv_draw_sw_bg</a> from lv_draw_sw_rect.o(.text.lv_draw_sw_bg) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[147]">lv_draw_sw_blend_basic</a> from lv_draw_sw_blend.o(.text.lv_draw_sw_blend_basic) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[145]">lv_draw_sw_buffer_copy</a> from lv_draw_sw.o(.text.lv_draw_sw_buffer_copy) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[13e]">lv_draw_sw_img_decoded</a> from lv_draw_sw_img.o(.text.lv_draw_sw_img_decoded) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[137]">lv_draw_sw_init_ctx</a> from lv_draw_sw.o(.text.lv_draw_sw_init_ctx) referenced 2 times from lv_hal_disp.o(.text.lv_disp_drv_init)
 <LI><a href="#[148]">lv_draw_sw_layer_adjust</a> from lv_draw_sw_layer.o(.text.lv_draw_sw_layer_adjust) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[149]">lv_draw_sw_layer_blend</a> from lv_draw_sw_layer.o(.text.lv_draw_sw_layer_blend) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[146]">lv_draw_sw_layer_create</a> from lv_draw_sw_layer.o(.text.lv_draw_sw_layer_create) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[14a]">lv_draw_sw_layer_destroy</a> from lv_draw_sw_layer.o(.text.lv_draw_sw_layer_destroy) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[13f]">lv_draw_sw_letter</a> from lv_draw_sw_letter.o(.text.lv_draw_sw_letter) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[140]">lv_draw_sw_line</a> from lv_draw_sw_line.o(.text.lv_draw_sw_line) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[141]">lv_draw_sw_polygon</a> from lv_draw_sw_polygon.o(.text.lv_draw_sw_polygon) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[13c]">lv_draw_sw_rect</a> from lv_draw_sw_rect.o(.text.lv_draw_sw_rect) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[142]">lv_draw_sw_transform</a> from lv_draw_sw_transform.o(.text.lv_draw_sw_transform) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[144]">lv_draw_sw_wait_for_finish</a> from lv_draw_sw.o(.text.lv_draw_sw_wait_for_finish) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[1ec]">lv_dropdown_constructor</a> from lv_dropdown.o(.text.lv_dropdown_constructor) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[1ed]">lv_dropdown_destructor</a> from lv_dropdown.o(.text.lv_dropdown_destructor) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[1ee]">lv_dropdown_event</a> from lv_dropdown.o(.text.lv_dropdown_event) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[1f1]">lv_dropdown_list_event</a> from lv_dropdown.o(.text.lv_dropdown_list_event) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[1ef]">lv_dropdownlist_constructor</a> from lv_dropdown.o(.text.lv_dropdownlist_constructor) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[1f0]">lv_dropdownlist_destructor</a> from lv_dropdown.o(.text.lv_dropdownlist_destructor) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[1f3]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserrat_12.o(.rodata.lv_font_montserrat_12)
 <LI><a href="#[1f3]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
 <LI><a href="#[1f3]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserrat_22.o(.rodata.lv_font_montserrat_22)
 <LI><a href="#[1f3]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserrat_48.o(.rodata.lv_font_montserrat_48)
 <LI><a href="#[1f3]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_siyuanheiti_20.o(.rodata.lv_font_siyuanheiti_20)
 <LI><a href="#[1f2]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserrat_12.o(.rodata.lv_font_montserrat_12)
 <LI><a href="#[1f2]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
 <LI><a href="#[1f2]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserrat_22.o(.rodata.lv_font_montserrat_22)
 <LI><a href="#[1f2]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserrat_48.o(.rodata.lv_font_montserrat_48)
 <LI><a href="#[1f2]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_siyuanheiti_20.o(.rodata.lv_font_siyuanheiti_20)
 <LI><a href="#[1f4]">lv_img_constructor</a> from lv_img.o(.text.lv_img_constructor) referenced from lv_img.o(.rodata.lv_img_class)
 <LI><a href="#[f6]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_close) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[f3]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_info) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[f4]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_open) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[f5]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_read_line) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[1f5]">lv_img_destructor</a> from lv_img.o(.text.lv_img_destructor) referenced from lv_img.o(.rodata.lv_img_class)
 <LI><a href="#[1f6]">lv_img_event</a> from lv_img.o(.text.lv_img_event) referenced from lv_img.o(.rodata.lv_img_class)
 <LI><a href="#[152]">lv_indev_read_timer_cb</a> from lv_indev.o(.text.lv_indev_read_timer_cb) referenced 2 times from lv_hal_indev.o(.text.lv_indev_drv_register)
 <LI><a href="#[1f7]">lv_keyboard_constructor</a> from lv_keyboard.o(.text.lv_keyboard_constructor) referenced from lv_keyboard.o(.rodata.lv_keyboard_class)
 <LI><a href="#[153]">lv_keyboard_def_event_cb</a> from lv_keyboard.o(.text.lv_keyboard_def_event_cb) referenced 2 times from lv_keyboard.o(.text.lv_keyboard_constructor)
 <LI><a href="#[1f8]">lv_label_constructor</a> from lv_label.o(.text.lv_label_constructor) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[1f9]">lv_label_destructor</a> from lv_label.o(.text.lv_label_destructor) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[1fa]">lv_label_event</a> from lv_label.o(.text.lv_label_event) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[1fb]">lv_led_constructor</a> from lv_led.o(.text.lv_led_constructor) referenced from lv_led.o(.rodata.lv_led_class)
 <LI><a href="#[1fc]">lv_led_event</a> from lv_led.o(.text.lv_led_event) referenced from lv_led.o(.rodata.lv_led_class)
 <LI><a href="#[1fd]">lv_line_constructor</a> from lv_line.o(.text.lv_line_constructor) referenced from lv_line.o(.rodata.lv_line_class)
 <LI><a href="#[1fe]">lv_line_event</a> from lv_line.o(.text.lv_line_event) referenced from lv_line.o(.rodata.lv_line_class)
 <LI><a href="#[156]">lv_menu_back_event_cb</a> from lv_menu.o(.text.lv_menu_back_event_cb) referenced 2 times from lv_menu.o(.text.lv_menu_constructor)
 <LI><a href="#[1ff]">lv_menu_constructor</a> from lv_menu.o(.text.lv_menu_constructor) referenced from lv_menu.o(.rodata.lv_menu_class)
 <LI><a href="#[201]">lv_menu_cont_constructor</a> from lv_menu.o(.text.lv_menu_cont_constructor) referenced from lv_menu.o(.rodata.lv_menu_cont_class)
 <LI><a href="#[200]">lv_menu_destructor</a> from lv_menu.o(.text.lv_menu_destructor) referenced from lv_menu.o(.rodata.lv_menu_class)
 <LI><a href="#[202]">lv_menu_page_constructor</a> from lv_menu.o(.text.lv_menu_page_constructor) referenced from lv_menu.o(.rodata.lv_menu_page_class)
 <LI><a href="#[203]">lv_menu_page_destructor</a> from lv_menu.o(.text.lv_menu_page_destructor) referenced from lv_menu.o(.rodata.lv_menu_page_class)
 <LI><a href="#[204]">lv_menu_section_constructor</a> from lv_menu.o(.text.lv_menu_section_constructor) referenced from lv_menu.o(.rodata.lv_menu_section_class)
 <LI><a href="#[157]">lv_menu_value_changed_event_cb</a> from lv_menu.o(.text.lv_menu_value_changed_event_cb) referenced 2 times from lv_menu.o(.text.lv_menu_constructor)
 <LI><a href="#[205]">lv_meter_constructor</a> from lv_meter.o(.text.lv_meter_constructor) referenced from lv_meter.o(.rodata.lv_meter_class)
 <LI><a href="#[206]">lv_meter_destructor</a> from lv_meter.o(.text.lv_meter_destructor) referenced from lv_meter.o(.rodata.lv_meter_class)
 <LI><a href="#[207]">lv_meter_event</a> from lv_meter.o(.text.lv_meter_event) referenced from lv_meter.o(.rodata.lv_meter_class)
 <LI><a href="#[208]">lv_obj_constructor</a> from lv_obj.o(.text.lv_obj_constructor) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[209]">lv_obj_destructor</a> from lv_obj.o(.text.lv_obj_destructor) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[20a]">lv_obj_event</a> from lv_obj.o(.text.lv_obj_event) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[11d]">lv_obj_get_height</a> from lv_obj_pos.o(.text.lv_obj_get_height) referenced 2 times from lv_flex.o(.text.find_track_end)
 <LI><a href="#[11e]">lv_obj_get_width</a> from lv_obj_pos.o(.text.lv_obj_get_width) referenced 2 times from lv_flex.o(.text.find_track_end)
 <LI><a href="#[20b]">lv_roller_constructor</a> from lv_roller.o(.text.lv_roller_constructor) referenced from lv_roller.o(.rodata.lv_roller_class)
 <LI><a href="#[20c]">lv_roller_event</a> from lv_roller.o(.text.lv_roller_event) referenced from lv_roller.o(.rodata.lv_roller_class)
 <LI><a href="#[20d]">lv_roller_label_event</a> from lv_roller.o(.text.lv_roller_label_event) referenced from lv_roller.o(.rodata.lv_roller_label_class)
 <LI><a href="#[20e]">lv_slider_constructor</a> from lv_slider.o(.text.lv_slider_constructor) referenced from lv_slider.o(.rodata.lv_slider_class)
 <LI><a href="#[20f]">lv_slider_event</a> from lv_slider.o(.text.lv_slider_event) referenced from lv_slider.o(.rodata.lv_slider_class)
 <LI><a href="#[210]">lv_spinbox_constructor</a> from lv_spinbox.o(.text.lv_spinbox_constructor) referenced from lv_spinbox.o(.rodata.lv_spinbox_class)
 <LI><a href="#[211]">lv_spinbox_event</a> from lv_spinbox.o(.text.lv_spinbox_event) referenced from lv_spinbox.o(.rodata.lv_spinbox_class)
 <LI><a href="#[212]">lv_spinner_constructor</a> from lv_spinner.o(.text.lv_spinner_constructor) referenced from lv_spinner.o(.rodata.lv_spinner_class)
 <LI><a href="#[161]">lv_style_set_prop_helper</a> from lv_style.o(.text.lv_style_set_prop_helper) referenced 2 times from lv_style.o(.text.lv_style_set_prop)
 <LI><a href="#[129]">lv_switch_anim_exec_cb</a> from lv_switch.o(.text.lv_switch_anim_exec_cb) referenced 2 times from lv_switch.o(.text.lv_anim_set_exec_cb)
 <LI><a href="#[133]">lv_switch_anim_ready</a> from lv_switch.o(.text.lv_switch_anim_ready) referenced 2 times from lv_switch.o(.text.lv_anim_set_ready_cb)
 <LI><a href="#[213]">lv_switch_constructor</a> from lv_switch.o(.text.lv_switch_constructor) referenced from lv_switch.o(.rodata.lv_switch_class)
 <LI><a href="#[214]">lv_switch_destructor</a> from lv_switch.o(.text.lv_switch_destructor) referenced from lv_switch.o(.rodata.lv_switch_class)
 <LI><a href="#[215]">lv_switch_event</a> from lv_switch.o(.text.lv_switch_event) referenced from lv_switch.o(.rodata.lv_switch_class)
 <LI><a href="#[216]">lv_table_constructor</a> from lv_table.o(.text.lv_table_constructor) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[217]">lv_table_destructor</a> from lv_table.o(.text.lv_table_destructor) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[218]">lv_table_event</a> from lv_table.o(.text.lv_table_event) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[219]">lv_tabview_constructor</a> from lv_tabview.o(.text.lv_tabview_constructor) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[21a]">lv_tabview_destructor</a> from lv_tabview.o(.text.lv_tabview_destructor) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[21b]">lv_tabview_event</a> from lv_tabview.o(.text.lv_tabview_event) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[21c]">lv_textarea_constructor</a> from lv_textarea.o(.text.lv_textarea_constructor) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[21d]">lv_textarea_destructor</a> from lv_textarea.o(.text.lv_textarea_destructor) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[21e]">lv_textarea_event</a> from lv_textarea.o(.text.lv_textarea_event) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[21f]">lv_tileview_constructor</a> from lv_tileview.o(.text.lv_tileview_constructor) referenced from lv_tileview.o(.rodata.lv_tileview_class)
 <LI><a href="#[220]">lv_tileview_tile_constructor</a> from lv_tileview.o(.text.lv_tileview_tile_constructor) referenced from lv_tileview.o(.rodata.lv_tileview_tile_class)
 <LI><a href="#[6]">lv_txt_unicode_to_utf8</a> from lv_txt.o(.text.lv_txt_unicode_to_utf8) referenced 2 times from lv_txt.o(.data._lv_txt_unicode_to_encoded)
 <LI><a href="#[0]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(.text.lv_txt_utf8_get_byte_id) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_get_byte_id)
 <LI><a href="#[1]">lv_txt_utf8_get_char_id</a> from lv_txt.o(.text.lv_txt_utf8_get_char_id) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_get_char_id)
 <LI><a href="#[5]">lv_txt_utf8_get_length</a> from lv_txt.o(.text.lv_txt_utf8_get_length) referenced 2 times from lv_txt.o(.data._lv_txt_get_encoded_length)
 <LI><a href="#[2]">lv_txt_utf8_next</a> from lv_txt.o(.text.lv_txt_utf8_next) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_next)
 <LI><a href="#[3]">lv_txt_utf8_prev</a> from lv_txt.o(.text.lv_txt_utf8_prev) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_prev)
 <LI><a href="#[4]">lv_txt_utf8_size</a> from lv_txt.o(.text.lv_txt_utf8_size) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_size)
 <LI><a href="#[221]">lv_win_constructor</a> from lv_win.o(.text.lv_win_constructor) referenced from lv_win.o(.rodata.lv_win_class)
 <LI><a href="#[16a]">lvgl_thread_entry</a> from lv_rt_thread_port.o(.text.lvgl_thread_entry) referenced 2 times from lv_rt_thread_port.o(.text.lvgl_thread_init)
 <LI><a href="#[240]">lvgl_thread_init</a> from lv_rt_thread_port.o(.text.lvgl_thread_init) referenced from lv_rt_thread_port.o(.rti_fn.5)
 <LI><a href="#[172]">main_thread_entry</a> from components.o(.text.main_thread_entry) referenced 2 times from components.o(.text.rt_application_init)
 <LI><a href="#[23f]">mnt_init</a> from main.o(.text.mnt_init) referenced from main.o(.rti_fn.5)
 <LI><a href="#[16b]">month_event_cb</a> from lv_calendar_header_arrow.o(.text.month_event_cb) referenced 4 times from lv_calendar_header_arrow.o(.text.my_constructor)
 <LI><a href="#[18a]">mqtt_thread1</a> from umqtt.o(.text.mqtt_thread1) referenced 2 times from umqtt.o(.text.umqtt_create)
 <LI><a href="#[158]">msgbox_close_click_event_cb</a> from lv_msgbox.o(.text.msgbox_close_click_event_cb) referenced 2 times from lv_msgbox.o(.text.lv_msgbox_create)
 <LI><a href="#[255]">msh_help</a> from msh.o(.text.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[1e0]">my_constructor</a> from lv_calendar_header_arrow.o(.text.my_constructor) referenced from lv_calendar_header_arrow.o(.rodata.lv_calendar_header_arrow_class)
 <LI><a href="#[1e1]">my_constructor</a> from lv_calendar_header_dropdown.o(.text.my_constructor) referenced from lv_calendar_header_dropdown.o(.rodata.lv_calendar_header_dropdown_class)
 <LI><a href="#[168]">my_event_cb_1</a> from lvgl_sn_interface.o(.text.my_event_cb_1) referenced 2 times from lvgl_sn_interface.o(.text.lvgl_sn_interface_show)
 <LI><a href="#[169]">my_event_cb_2</a> from lvgl_sn_interface.o(.text.my_event_cb_2) referenced 2 times from lvgl_sn_interface.o(.text.lvgl_sn_interface_show)
 <LI><a href="#[274]">netdev_dns</a> from netdev.o(.text.netdev_dns) referenced from netdev.o(FSymTab)
 <LI><a href="#[272]">netdev_ifconfig</a> from netdev.o(.text.netdev_ifconfig) referenced from netdev.o(FSymTab)
 <LI><a href="#[275]">netdev_netstat</a> from netdev.o(.text.netdev_netstat) referenced from netdev.o(FSymTab)
 <LI><a href="#[273]">netdev_ping</a> from netdev.o(.text.netdev_ping) referenced from netdev.o(FSymTab)
 <LI><a href="#[23a]">ntp_auto_sync_init</a> from ntp.o(.text.ntp_auto_sync_init) referenced from ntp.o(.rti_fn.4)
 <LI><a href="#[170]">ntp_sync_work_func</a> from ntp.o(.text.ntp_sync_work_func) referenced 2 times from ntp.o(.text.ntp_auto_sync_init)
 <LI><a href="#[105]">pwd_char_hider_anim</a> from lv_textarea.o(.text.pwd_char_hider_anim) referenced 2 times from lv_textarea.o(.text.auto_hide_characters)
 <LI><a href="#[131]">pwd_char_hider_anim_ready</a> from lv_textarea.o(.text.pwd_char_hider_anim_ready) referenced 2 times from lv_textarea.o(.text.lv_anim_set_ready_cb)
 <LI><a href="#[244]">reboot</a> from main.o(.text.reboot) referenced from main.o(FSymTab)
 <LI><a href="#[8]">rt_free</a> from kservice.o(.text.rt_free) referenced 2 times from cjson.o(.data.global_hooks)
 <LI><a href="#[239]">rt_hw_lcd_init</a> from drv_lcd.o(.text.rt_hw_lcd_init) referenced from drv_lcd.o(.rti_fn.3)
 <LI><a href="#[230]">rt_hw_pin_init</a> from drv_gpio.o(.text.rt_hw_pin_init) referenced from drv_gpio.o(.rti_fn.1)
 <LI><a href="#[231]">rt_hw_uart_init</a> from drv_uart.o(.text.rt_hw_uart_init) referenced from drv_uart.o(.rti_fn.1)
 <LI><a href="#[23b]">rt_i2c_core_init</a> from i2c_core.o(.text.rt_i2c_core_init) referenced from i2c_core.o(.rti_fn.4)
 <LI><a href="#[7]">rt_malloc</a> from kservice.o(.text.rt_malloc) referenced 2 times from cjson.o(.data.global_hooks)
 <LI><a href="#[9]">rt_realloc</a> from kservice.o(.text.rt_realloc) referenced 2 times from cjson.o(.data.global_hooks)
 <LI><a href="#[17a]">rt_serial_close</a> from serial.o(.text.rt_serial_close) referenced 2 times from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[17d]">rt_serial_control</a> from serial.o(.text.rt_serial_control) referenced 2 times from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[178]">rt_serial_init</a> from serial.o(.text.rt_serial_init) referenced 2 times from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[179]">rt_serial_open</a> from serial.o(.text.rt_serial_open) referenced 2 times from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[17b]">rt_serial_read</a> from serial.o(.text.rt_serial_read) referenced 2 times from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[17c]">rt_serial_write</a> from serial.o(.text.rt_serial_write) referenced 2 times from serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[238]">rt_soft_rtc_init</a> from soft_rtc.o(.text.rt_soft_rtc_init) referenced from soft_rtc.o(.rti_fn.3)
 <LI><a href="#[17f]">rt_thread_idle_entry</a> from idle.o(.text.rt_thread_idle_entry) referenced 2 times from idle.o(.text.rt_thread_idle_init)
 <LI><a href="#[234]">rt_work_sys_workqueue_init</a> from workqueue.o(.text.rt_work_sys_workqueue_init) referenced from workqueue.o(.rti_fn.2)
 <LI><a href="#[233]">rti_board_end</a> from components.o(.text.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[22f]">rti_board_start</a> from components.o(.text.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[243]">rti_end</a> from components.o(.text.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[22e]">rti_start</a> from components.o(.text.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[23e]">sal_init</a> from sal_socket.o(.text.sal_init) referenced from sal_socket.o(.rti_fn.4)
 <LI><a href="#[132]">scroll_anim_ready_cb</a> from lv_obj_scroll.o(.text.scroll_anim_ready_cb) referenced 4 times from lv_obj_scroll.o(.text.lv_anim_set_ready_cb)
 <LI><a href="#[15b]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
 <LI><a href="#[15b]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 4 times from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[15b]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_to_x)
 <LI><a href="#[15b]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 2 times from lv_obj_scroll.o(.text.scroll_area_into_view)
 <LI><a href="#[15c]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
 <LI><a href="#[15c]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 4 times from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[15c]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_to_y)
 <LI><a href="#[15c]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.scroll_area_into_view)
 <LI><a href="#[113]">set_humi_cb</a> from lvgl_sn_interface.o(.text.set_humi_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_device_status)
 <LI><a href="#[154]">set_ofs_x_anim</a> from lv_label.o(.text.set_ofs_x_anim) referenced 8 times from lv_label.o(.text.lv_label_refr_text)
 <LI><a href="#[154]">set_ofs_x_anim</a> from lv_label.o(.text.set_ofs_x_anim) referenced 2 times from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[155]">set_ofs_y_anim</a> from lv_label.o(.text.set_ofs_y_anim) referenced 6 times from lv_label.o(.text.lv_label_refr_text)
 <LI><a href="#[155]">set_ofs_y_anim</a> from lv_label.o(.text.set_ofs_y_anim) referenced 2 times from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[12a]">set_y_anim</a> from lv_roller.o(.text.set_y_anim) referenced 2 times from lv_roller.o(.text.lv_anim_set_exec_cb)
 <LI><a href="#[12a]">set_y_anim</a> from lv_roller.o(.text.set_y_anim) referenced 2 times from lv_roller.o(.text.lv_roller_event)
 <LI><a href="#[12a]">set_y_anim</a> from lv_roller.o(.text.set_y_anim) referenced 2 times from lv_roller.o(.text.refr_position)
 <LI><a href="#[17e]">soft_rtc_control</a> from soft_rtc.o(.text.soft_rtc_control) referenced 2 times from soft_rtc.o(.text.rt_soft_rtc_init)
 <LI><a href="#[114]">sw_cb</a> from lvgl_sn_interface.o(.text.sw_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_device_status)
 <LI><a href="#[115]">ta_event_cb</a> from lvgl_sn_interface.o(.text.ta_event_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_net_up)
 <LI><a href="#[245]">tcpclient</a> from main.o(.text.tcpclient) referenced from main.o(FSymTab)
 <LI><a href="#[246]">tcpserv</a> from main.o(.text.tcpserv) referenced from main.o(FSymTab)
 <LI><a href="#[10f]">temp_dd_cb</a> from lvgl_sn_interface.o(.text.temp_dd_cb) referenced 2 times from lvgl_sn_interface.o(.text.create_alarm)
 <LI><a href="#[165]">theme_apply</a> from lv_theme_default.o(.text.theme_apply) referenced 2 times from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[166]">tileview_event_cb</a> from lv_tileview.o(.text.tileview_event_cb) referenced 2 times from lv_tileview.o(.text.lv_tileview_constructor)
 <LI><a href="#[167]">timer_cb</a> from lvgl_sn_interface.o(.text.timer_cb) referenced 2 times from lvgl_sn_interface.o(.text.lvgl_sn_interface_show)
 <LI><a href="#[f7]">trans_anim_cb</a> from lv_obj_style.o(.text.trans_anim_cb) referenced 2 times from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[f8]">trans_anim_ready_cb</a> from lv_obj_style.o(.text.trans_anim_ready_cb) referenced 2 times from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[135]">trans_anim_start_cb</a> from lv_obj_style.o(.text.trans_anim_start_cb) referenced 2 times from lv_obj_style.o(.text.lv_anim_set_start_cb)
 <LI><a href="#[247]">udpclient</a> from main.o(.text.udpclient) referenced from main.o(FSymTab)
 <LI><a href="#[248]">udpserv</a> from main.o(.text.udpserv) referenced from main.o(FSymTab)
 <LI><a href="#[24a]">udptest</a> from udp_server.o(.text.udptest) referenced from udp_server.o(FSymTab)
 <LI><a href="#[185]">udptest_entry</a> from udp_server.o(.text.udptest_entry) referenced 2 times from udp_server.o(.text.udptest)
 <LI><a href="#[236]">ulog_console_backend_init</a> from console_be.o(.text.ulog_console_backend_init) referenced from console_be.o(.rti_fn.2)
 <LI><a href="#[186]">ulog_console_backend_output</a> from console_be.o(.text.ulog_console_backend_output) referenced 2 times from console_be.o(.text.ulog_console_backend_init)
 <LI><a href="#[188]">ulog_file_backend_flush_with_buf</a> from file_be.o(.text.ulog_file_backend_flush_with_buf) referenced 2 times from file_be.o(.text.ulog_file_backend_init)
 <LI><a href="#[187]">ulog_file_backend_output_with_buf</a> from file_be.o(.text.ulog_file_backend_output_with_buf) referenced 2 times from file_be.o(.text.ulog_file_backend_init)
 <LI><a href="#[232]">ulog_init</a> from ulog.o(.text.ulog_init) referenced from ulog.o(.rti_fn.1)
 <LI><a href="#[24d]">umqtt_ex_publish</a> from umqtt_sample.o(.text.umqtt_ex_publish) referenced from umqtt_sample.o(FSymTab)
 <LI><a href="#[24b]">umqtt_ex_start</a> from umqtt_sample.o(.text.umqtt_ex_start) referenced from umqtt_sample.o(FSymTab)
 <LI><a href="#[24c]">umqtt_ex_stop</a> from umqtt_sample.o(.text.umqtt_ex_stop) referenced from umqtt_sample.o(FSymTab)
 <LI><a href="#[24e]">umqtt_ex_subscribe</a> from umqtt_sample.o(.text.umqtt_ex_subscribe) referenced from umqtt_sample.o(FSymTab)
 <LI><a href="#[24f]">umqtt_ex_unsubscribe</a> from umqtt_sample.o(.text.umqtt_ex_unsubscribe) referenced from umqtt_sample.o(FSymTab)
 <LI><a href="#[18b]">umqtt_thread</a> from umqtt.o(.text.umqtt_thread) referenced 2 times from umqtt.o(.text.umqtt_create)
 <LI><a href="#[18d]">umqtt_topic_recv_callback</a> from umqtt_sample.o(.text.umqtt_topic_recv_callback) referenced 2 times from umqtt_sample.o(.text.umqtt_ex_start)
 <LI><a href="#[18d]">umqtt_topic_recv_callback</a> from umqtt_sample.o(.text.umqtt_topic_recv_callback) referenced 2 times from umqtt_sample.o(.text.umqtt_ex_subscribe)
 <LI><a href="#[189]">umqtt_uplink_timer_callback</a> from umqtt.o(.text.umqtt_uplink_timer_callback) referenced 2 times from umqtt.o(.text.umqtt_create)
 <LI><a href="#[123]">unicode_list_compare</a> from lv_font_fmt_txt.o(.text.unicode_list_compare) referenced 2 times from lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
 <LI><a href="#[116]">up_btn_cb</a> from lvgl_sn_interface.o(.text.up_btn_cb) referenced 6 times from lvgl_sn_interface.o(.text.create_net_up)
 <LI><a href="#[22b]">urc_busy_p_func</a> from at_device_esp32.o(.text.urc_busy_p_func) referenced from at_device_esp32.o(.rodata.urc_table)
 <LI><a href="#[22c]">urc_busy_s_func</a> from at_device_esp32.o(.text.urc_busy_s_func) referenced from at_device_esp32.o(.rodata.urc_table)
 <LI><a href="#[229]">urc_close_func</a> from at_socket_esp32.o(.text.urc_close_func) referenced from at_socket_esp32.o(.rodata.urc_table)
 <LI><a href="#[22d]">urc_func</a> from at_device_esp32.o(.text.urc_func) referenced 2 times from at_device_esp32.o(.rodata.urc_table)
 <LI><a href="#[22a]">urc_recv_func</a> from at_socket_esp32.o(.text.urc_recv_func) referenced from at_socket_esp32.o(.rodata.urc_table)
 <LI><a href="#[228]">urc_send_bfsz_func</a> from at_socket_esp32.o(.text.urc_send_bfsz_func) referenced from at_socket_esp32.o(.rodata.urc_table)
 <LI><a href="#[227]">urc_send_func</a> from at_socket_esp32.o(.text.urc_send_func) referenced 2 times from at_socket_esp32.o(.rodata.urc_table)
 <LI><a href="#[18c]">user_callback</a> from umqtt_sample.o(.text.user_callback) referenced 2 times from umqtt_sample.o(.text.umqtt_ex_start)
 <LI><a href="#[16c]">value_changed_event_cb</a> from lv_calendar_header_arrow.o(.text.value_changed_event_cb) referenced 4 times from lv_calendar_header_arrow.o(.text.my_constructor)
 <LI><a href="#[259]">version</a> from cmd.o(.text.version) referenced from cmd.o(FSymTab)
 <LI><a href="#[250]">weather</a> from httpclient_sample.o(.text.weather) referenced from httpclient_sample.o(FSymTab)
 <LI><a href="#[276]">wget</a> from webclient_file.o(.text.wget) referenced from webclient_file.o(FSymTab)
 <LI><a href="#[16d]">year_event_cb</a> from lv_calendar_header_dropdown.o(.text.year_event_cb) referenced 2 times from lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b4]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[277]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[279]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[bc8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[bc9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[bca]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[bcb]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[bcc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[27a]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[2c3]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[27c]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[27e]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[280]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[281]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[282]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[bcd]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[284]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[286]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[287]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[288]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[28a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[28c]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[28e]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[28f]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[290]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[292]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[bce]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[294]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[296]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[298]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[29a]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[bcf]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[2a8]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[29c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[bd0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[29e]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[bd1]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[bd2]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[bd3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[bd4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2a0]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[bd5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[bd6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2a1]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[bd7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[bd8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[bd9]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[bda]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[bdb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[bdc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[bdd]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2a3]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[bde]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[bdf]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[be0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[be1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[be2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[be3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2ad]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[be4]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2a5]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[be5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[be6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[be7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[be8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[be9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[bea]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[278]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[beb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[bec]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[2a7]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[bed]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2a9]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bee]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[31d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2ac]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[bef]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2ae]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3d4]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_ipaddr
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_empty_socket
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_get
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_detach_irq
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_attach_irq
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_poll
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[3d9]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_ipaddr
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_empty_socket
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_get
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_detach_irq
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_attach_irq
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_poll
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[b2d]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[b2c]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.isr_vector)
<LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b38]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[bf0]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.isr_vector)
<LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[90]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[91]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[92]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[93]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[58]"></a>ADC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[59]"></a>ADC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8e]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8b]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8c]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8d]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4c]"></a>BEE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[d6]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>CAN3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[75]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>CORE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>CSI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>CSU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5a]"></a>DCDC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[47]"></a>DCP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[b5]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_IRQHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.isr_vector)
<LI> fsl_lpuart.o(.data.s_lpuartIsr)
</UL>
<P><STRONG><a name="[96]"></a>ENC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[97]"></a>ENC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[98]"></a>ENC3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[99]"></a>ENC4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[e6]"></a>ENET2_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>ENET2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>EWM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[dd]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>FLEXIO3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[df]"></a>FLEXSPI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>GPC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[60]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[61]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[62]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[63]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[64]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[b2]"></a>GPIO6_7_8_9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[79]"></a>GPT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7a]"></a>GPT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>KPP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[d2]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>PIT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[52]"></a>PMU_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7d]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7e]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7f]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9e]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9f]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a0]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a1]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a2]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a3]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a4]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a5]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a6]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a7]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a8]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a9]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[aa]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[ab]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[ac]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>PXP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[72]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[78]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[94]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[95]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[b0]"></a>Reserved171_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[49]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[53]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5b]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5c]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[d8]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>SEMC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4b]"></a>SJC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[dc]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>SRC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[54]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[55]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9a]"></a>TMR1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9b]"></a>TMR2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9c]"></a>TMR3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9d]"></a>TMR4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>TRNG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[86]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[85]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[56]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[57]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[e1]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[71]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[89]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8a]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.isr_vector)
<LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.isr_vector)
<LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4d]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4e]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4f]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[50]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[51]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6f]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[70]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[80]"></a>FLEXSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[81]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[83]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[84]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[87]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[88]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[ad]"></a>ENET2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[ae]"></a>ENET2_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[af]"></a>CAN3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[b1]"></a>FLEXIO3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[bf1]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_atol
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtoc16
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2ca]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readpacket
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[bf2]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[bf3]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[bf4]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strncasecmp
</UL>

<P><STRONG><a name="[2b3]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
</UL>

<P><STRONG><a name="[2b4]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
</UL>

<P><STRONG><a name="[2b6]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendmail
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectHost
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_close_cb
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_btn_cb
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_2
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_btn_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_click_cb
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_read_cb
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</UL>

<P><STRONG><a name="[2b8]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
</UL>

<P><STRONG><a name="[2b9]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendmail
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_alarm_up
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_update
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_change_path
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[2bb]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[2bc]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[2ba]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[285]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[2c0]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[28b]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[293]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[27d]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[2c1]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2c4]"></a>vsscanf</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, vsscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
</UL>

<P><STRONG><a name="[2c6]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_bfsz_func
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_wait_server_ack
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_send_cmd_wait_server_ack
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_pasv_mode
</UL>

<P><STRONG><a name="[2c7]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[303]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2c9]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_btn_cb
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[2cb]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2cd]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
</UL>

<P><STRONG><a name="[2e1]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2ce]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSend
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReceive
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetInstance
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetCyclesForWidth
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_GetInstance
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
</UL>

<P><STRONG><a name="[bf5]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[61e]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_to_u32
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[47d]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
</UL>

<P><STRONG><a name="[534]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
</UL>

<P><STRONG><a name="[5a7]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[66c]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_set_text
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_create
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[3dc]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[3c0]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_topic_recv_callback
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_publish
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_int
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utl_base64_encode
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendmail
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected_str
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_set_text
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_btn_cb
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_change_path
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_cut
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strstri
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeMQTTString
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeCString
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribeLength
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_pasv_mode
</UL>

<P><STRONG><a name="[663]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
</UL>

<P><STRONG><a name="[7a8]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendmail
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[2d1]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_topic_recv_callback
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeMQTTString
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeCString
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[2ff]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[bf6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[bf7]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[bf8]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_topic_recv_callback
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendmail
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectHost
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetDefaultConfig
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
</UL>

<P><STRONG><a name="[2f7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_cb
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_alarm_up
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_change_path
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_start
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubrec_cycle_callback
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_wait_server_ack
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_send_cmd_wait_server_ack
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_pasv_mode
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[bf9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[bfa]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[2d5]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_rename
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
</UL>

<P><STRONG><a name="[48e]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_btn_text
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_popovers_in_top_row
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_btn_areas_and_controls
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[bfb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bfc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[2bd]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2be]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2bf]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[27b]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[2dd]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[2b5]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[eb]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[2e0]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[295]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[297]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[2b7]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2e2]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[28d]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[2e4]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[289]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[291]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[2c8]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[2e5]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2ea]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[2c5]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>

<P><STRONG><a name="[ec]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> vsscanf.o(.text)
<LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> vsscanf.o(.text)
<LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2cc]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2f1]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>

<P><STRONG><a name="[2f2]"></a>_scanf_mbtowc</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, _scanf_mbtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2f4]"></a>_scanf_wctomb</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, _scanf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2f6]"></a>_scanf_wstring</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, _scanf_wstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2a4]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[2a6]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[2d0]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[2d2]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[2fe]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[bfd]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[bfe]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[312]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[bff]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f1]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[301]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2df]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[302]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[299]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[29b]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[2ee]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[2f5]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _scanf_wcharmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[2d8]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2fa]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2f8]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _sys_open &rArr; open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[306]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[2fb]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[c00]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>_mbrtoc16</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, _mbrtoc16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[2f3]"></a>_mbrtowc</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _mbrtoc16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[30b]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[2e3]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[2fd]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2f9]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __rt_SIGRTRED &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[30f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[310]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[311]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[bc7]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[314]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[bc3]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[c01]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[c02]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[319]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[308]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[315]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[2ab]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[30d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[30c]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[30e]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[31f]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[320]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[31a]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[c03]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[2cf]"></a>__assert_puts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, assert_stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[322]"></a>fputs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[2aa]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[324]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1560 bytes, Stack size 40 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb2Pll
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitEnetPll
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetSaiMClkClockSource
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_MQSConfig
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_EnableMode
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetXtalFreq
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetRtcXtalFreq
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[335]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, board.o(.text.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = BOARD_ConfigMPU &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Enable
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Disable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[33a]"></a>BOARD_InitPins</STRONG> (Thumb, 660 bytes, Stack size 24 bytes, pin_mux.o(.text.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BOARD_InitPins &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[33e]"></a>BOARD_InitSemcPins</STRONG> (Thumb, 1110 bytes, Stack size 24 bytes, pin_mux.o(.text.BOARD_InitSemcPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BOARD_InitSemcPins &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[33f]"></a>BOARD_LPI2C_Init</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, touchpad.o(.text.BOARD_LPI2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = BOARD_LPI2C_Init &rArr; LPI2C_MasterInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
</UL>

<P><STRONG><a name="[342]"></a>BOARD_LPI2C_Receive</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, touchpad.o(.text.BOARD_LPI2C_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = BOARD_LPI2C_Receive &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_Touch_I2C_Receive
</UL>

<P><STRONG><a name="[344]"></a>BOARD_LPI2C_Send</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, touchpad.o(.text.BOARD_LPI2C_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = BOARD_LPI2C_Send &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_Touch_I2C_Send
</UL>

<P><STRONG><a name="[223]"></a>BOARD_Touch_I2C_Receive</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, touchpad.o(.text.BOARD_Touch_I2C_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = BOARD_Touch_I2C_Receive &rArr; BOARD_LPI2C_Receive &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_LPI2C_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev.o(.rodata.s_touchConfig)
</UL>
<P><STRONG><a name="[222]"></a>BOARD_Touch_I2C_Send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, touchpad.o(.text.BOARD_Touch_I2C_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = BOARD_Touch_I2C_Send &rArr; BOARD_LPI2C_Send &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_LPI2C_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev.o(.rodata.s_touchConfig)
</UL>
<P><STRONG><a name="[32e]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[330]"></a>CLOCK_DeinitEnetPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitEnetPll))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[331]"></a>CLOCK_DeinitUsb2Pll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitUsb2Pll))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[358]"></a>CLOCK_GetAhbFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetAhbFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
</UL>

<P><STRONG><a name="[35a]"></a>CLOCK_GetFreq</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllUsb1SWFreq
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
</UL>

<P><STRONG><a name="[35c]"></a>CLOCK_GetIpgFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetIpgFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
</UL>

<P><STRONG><a name="[35d]"></a>CLOCK_GetPerClkFreq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetPerClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[35f]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 650 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllEnabled
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllBypassed
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSrcFreq
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllUsb1SWFreq
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[35b]"></a>CLOCK_GetSemcFreq</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetSemcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetSemcFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[361]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[360]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
</UL>

<P><STRONG><a name="[32d]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitArmPll))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[327]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitExternalClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = CLOCK_InitExternalClk &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[328]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[373]"></a>CLOCK_InitVideoPll</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitVideoPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitVideoPll
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcdClock
</UL>

<P><STRONG><a name="[329]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SwitchOsc))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[366]"></a>DCACHE_CleanInvalidateByRange</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_cache.o(.text.DCACHE_CleanInvalidateByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCACHE_CleanInvalidateByRange
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L1CACHE_CleanInvalidateDCacheByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fb_flush
</UL>

<P><STRONG><a name="[37f]"></a>ELCDIF_Reset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_elcdif.o(.text.ELCDIF_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
</UL>

<P><STRONG><a name="[36d]"></a>ELCDIF_RgbModeInit</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, fsl_elcdif.o(.text.ELCDIF_RgbModeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ELCDIF_RgbModeInit &rArr; ELCDIF_GetInstance &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_Reset
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_GetInstance
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
</UL>

<P><STRONG><a name="[65]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_gpio.o(.text.GPIO1_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO1_Combined_0_15_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[66]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_gpio.o(.text.GPIO1_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO1_Combined_16_31_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[67]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_gpio.o(.text.GPIO2_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO2_Combined_0_15_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[68]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_gpio.o(.text.GPIO2_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO2_Combined_16_31_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[69]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_gpio.o(.text.GPIO3_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO3_Combined_0_15_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6a]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_gpio.o(.text.GPIO3_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO3_Combined_16_31_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_gpio.o(.text.GPIO4_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO4_Combined_0_15_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_gpio.o(.text.GPIO4_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO4_Combined_16_31_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6d]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_gpio.o(.text.GPIO5_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO5_Combined_0_15_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6e]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_gpio.o(.text.GPIO5_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO5_Combined_16_31_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[372]"></a>GPIO_PinInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_mode
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcdBackLight
</UL>

<P><STRONG><a name="[389]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, fsl_gpio.o(.text.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_irq_enable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
</UL>

<P><STRONG><a name="[339]"></a>GPIO_PinWrite</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_write
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_PullTouchResetPin
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigTouchIntPin
</UL>

<P><STRONG><a name="[37a]"></a>GT911_GetResolution</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_gt911.o(.text.GT911_GetResolution))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
</UL>

<P><STRONG><a name="[37b]"></a>GT911_GetSingleTouch</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fsl_gt911.o(.text.GT911_GetSingleTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GT911_GetSingleTouch &rArr; GT911_ReadRawTouchData
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadRawTouchData
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_ReadTouch
</UL>

<P><STRONG><a name="[379]"></a>GT911_Init</STRONG> (Thumb, 360 bytes, Stack size 216 bytes, fsl_gt911.o(.text.GT911_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = GT911_Init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_VerifyFirmware
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_GetFirmwareCheckSum
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
</UL>

<P><STRONG><a name="[38d]"></a>GetUartSrcFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_uart.o(.text.GetUartSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = GetUartSrcFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMux
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_configure
</UL>

<P><STRONG><a name="[3f]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_port_disp.o(.text.LCDIF_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LCDIF_IRQHandler &rArr; rt_sem_release &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_GetInterruptStatus
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_ClearInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[ce]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LPI2C4_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[396]"></a>LPI2C_CheckForBusyBus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C_CheckForBusyBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPI2C_CheckForBusyBus
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[39a]"></a>LPI2C_GetInstance</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = LPI2C_GetInstance &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[39b]"></a>LPI2C_MasterCheckAndClearError</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_MasterCheckAndClearError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReceive
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
</UL>

<P><STRONG><a name="[340]"></a>LPI2C_MasterGetDefaultConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LPI2C_MasterGetDefaultConfig &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_LPI2C_Init
</UL>

<P><STRONG><a name="[341]"></a>LPI2C_MasterInit</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, fsl_lpi2c.o(.text.LPI2C_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = LPI2C_MasterInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSetBaudRate
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetInstance
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSetWatermarks
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReset
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterEnable
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetCyclesForWidth
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_LPI2C_Init
</UL>

<P><STRONG><a name="[3a1]"></a>LPI2C_MasterReceive</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, fsl_lpi2c.o(.text.LPI2C_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = LPI2C_MasterReceive &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[3a3]"></a>LPI2C_MasterSend</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_MasterSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = LPI2C_MasterSend &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[39f]"></a>LPI2C_MasterSetBaudRate</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, fsl_lpi2c.o(.text.LPI2C_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LPI2C_MasterSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[3a4]"></a>LPI2C_MasterStop</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_MasterStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPI2C_MasterStop &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[343]"></a>LPI2C_MasterTransferBlocking</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, fsl_lpi2c.o(.text.LPI2C_MasterTransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSend
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReceive
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CheckForBusyBus
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterClearStatusFlags
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_LPI2C_Send
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_LPI2C_Receive
</UL>

<P><STRONG><a name="[398]"></a>LPI2C_SlaveTransferHandleIRQ</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LPI2C_SlaveTransferHandleIRQ &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveGetStatusFlags
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveClearStatusFlags
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveCheckAndClearError
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_uart.o(.text.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = LPUART1_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[c7]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_uart.o(.text.LPUART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = LPUART3_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[c9]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[3aa]"></a>LPUART_ClearStatusFlags</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[818]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_control
</UL>

<P><STRONG><a name="[3ac]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_configure
</UL>

<P><STRONG><a name="[3ad]"></a>LPUART_GetInstance</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[3ab]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_putc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_getc
</UL>

<P><STRONG><a name="[3ae]"></a>LPUART_Init</STRONG> (Thumb, 620 bytes, Stack size 40 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SoftwareReset
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_configure
</UL>

<P><STRONG><a name="[3c8]"></a>SDK_DelayAtLeastUs</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_common_arm.o(.text.SDK_DelayAtLeastUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLoop
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIDEO_DelayMs
</UL>

<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.isr_vector)
<LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>SystemInit</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, system_mimxrt1062.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[3ce]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1062.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[224]"></a>VIDEO_DelayMs</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_video_common.o(.text.VIDEO_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = VIDEO_DelayMs &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev.o(.rodata.s_touchConfig)
</UL>
<P><STRONG><a name="[486]"></a>__rt_ffs</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, kservice.o(.text.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>

<P><STRONG><a name="[3cf]"></a>__rt_libc_exit</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cstdlib.o(.text.__rt_libc_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3d2]"></a>__wqueue_default_wake</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waitqueue.o(.text.__wqueue_default_wake))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_pollwake
</UL>

<P><STRONG><a name="[3eb]"></a>_lv_anim_core_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lv_anim.o(.text._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _lv_anim_core_init &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[439]"></a>_lv_area_intersect</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_area.o(.text._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_get_area
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_3
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_2
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_1
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_0
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_list
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_label
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
</UL>

<P><STRONG><a name="[3ef]"></a>_lv_area_is_in</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lv_area.o(.text._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_alpha_test
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[a3f]"></a>_lv_area_is_on</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(.text._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[3f1]"></a>_lv_area_is_out</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lv_area.o(.text._lv_area_is_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_area_is_out &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[3f0]"></a>_lv_area_is_point_on</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, lv_area.o(.text._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_within_circle
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[a40]"></a>_lv_area_join</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_area.o(.text._lv_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[138]"></a>_lv_disp_refr_timer</STRONG> (Thumb, 564 bytes, Stack size 32 bytes, lv_refr.o(.text._lv_disp_refr_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = _lv_disp_refr_timer &rArr; refr_invalid_areas &rArr; refr_area &rArr; refr_area_part &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_get_idle
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_invalid_areas
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layer_sys
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_white
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(.text.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[402]"></a>_lv_draw_mask_cleanup</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_draw_mask.o(.text._lv_draw_mask_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _lv_draw_mask_cleanup &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[995]"></a>_lv_event_mark_deleted</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_event.o(.text._lv_event_mark_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[401]"></a>_lv_font_clean_up_fmt_txt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text._lv_font_clean_up_fmt_txt))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[414]"></a>_lv_fs_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_fs.o(.text._lv_fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_fs_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[415]"></a>_lv_group_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_group.o(.text._lv_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[416]"></a>_lv_img_buf_get_transformed_area</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, lv_img_buf.o(.text._lv_img_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_img_buf_get_transformed_area &rArr; lv_point_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_transformed_size
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[418]"></a>_lv_img_cache_open</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lv_img_cache.o(.text._lv_img_cache_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _lv_img_cache_open &rArr; lv_img_decoder_open &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[41a]"></a>_lv_img_decoder_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lv_img_decoder.o(.text._lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _lv_img_decoder_init &rArr; lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_read_line_cb
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_open_cb
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_info_cb
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_close_cb
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[420]"></a>_lv_indev_read</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_hal_indev.o(.text._lv_indev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_indev_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[421]"></a>_lv_indev_scroll_handler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, lv_indev_scroll.o(.text._lv_indev_scroll_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _lv_indev_scroll_handler &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_limit_diff
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[42d]"></a>_lv_indev_scroll_throw_handler</STRONG> (Thumb, 552 bytes, Stack size 40 bytes, lv_indev_scroll.o(.text._lv_indev_scroll_throw_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_throw_predict_y
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_throw_predict_x
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_limit_diff
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[437]"></a>_lv_inv_area</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, lv_refr.o(.text._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[43c]"></a>_lv_ll_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _lv_ll_clear &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_destructor
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_clear_history
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_destructor
</UL>

<P><STRONG><a name="[14e]"></a>_lv_ll_get_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_next)
</UL>
<P><STRONG><a name="[43e]"></a>_lv_ll_get_len</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_ll_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_obj_count
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
</UL>

<P><STRONG><a name="[14f]"></a>_lv_ll_get_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_next)
</UL>
<P><STRONG><a name="[151]"></a>_lv_ll_get_prev</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[150]"></a>_lv_ll_get_tail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[3ec]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_constructor
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_constructor
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>

<P><STRONG><a name="[43f]"></a>_lv_ll_ins_head</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_scale_lines
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_scale
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_needle_line
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_needle_img
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_arc
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[443]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[6c9]"></a>_lv_ll_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
</UL>

<P><STRONG><a name="[43d]"></a>_lv_ll_remove</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>

<P><STRONG><a name="[444]"></a>_lv_obj_destruct</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj_class.o(.text._lv_obj_destruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _lv_obj_destruct &rArr;  _lv_obj_destruct (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_destruct
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_destruct
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[862]"></a>_lv_obj_get_ext_draw_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_draw.o(.text._lv_obj_get_ext_draw_size))
<BR><BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_get_area
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[a3a]"></a>_lv_obj_get_layer_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_draw.o(.text._lv_obj_get_layer_type))
<BR><BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
</UL>

<P><STRONG><a name="[42c]"></a>_lv_obj_scroll_by_raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text._lv_obj_scroll_by_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[448]"></a>_lv_obj_style_apply_color_filter</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_obj_style.o(.text._lv_obj_style_apply_color_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_color_filter_opa
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_color_filter_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_color_filtered
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_color_filtered
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_color_filtered
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_img_recolor_filtered
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_color_filtered
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_recolor_filtered
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_grad_color_filtered
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_color_filtered
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_color_filtered
</UL>

<P><STRONG><a name="[44b]"></a>_lv_obj_style_create_transition</STRONG> (Thumb, 358 bytes, Stack size 104 bytes, lv_obj_style.o(.text._lv_obj_style_create_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_start_cb
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_ready_cb
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_path_cb
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_early_apply
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_delay
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Called By]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[45a]"></a>_lv_obj_style_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_obj_style.o(.text._lv_obj_style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_obj_style_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[45b]"></a>_lv_obj_style_state_compare</STRONG> (Thumb, 606 bytes, Stack size 40 bytes, lv_obj_style.o(.text._lv_obj_style_state_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_obj_style_state_compare &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_state
</UL>
<BR>[Called By]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[4ec]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_no_aa
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;argb_and_rgb_aa
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_adjust
</UL>

<P><STRONG><a name="[45e]"></a>_lv_refr_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_refr.o(.text._lv_refr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_refr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perf_monitor_init
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[7f4]"></a>_lv_style_get_prop_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_style.o(.text._lv_style_get_prop_group))
<BR><BR>[Called By]<UL><LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop_internal
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_core
</UL>

<P><STRONG><a name="[a5d]"></a>_lv_style_prop_lookup_flags</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lv_style.o(.text._lv_style_prop_lookup_flags))
<BR><BR>[Called By]<UL><LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_has_flag
</UL>

<P><STRONG><a name="[460]"></a>_lv_timer_core_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_timer.o(.text._lv_timer_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_timer_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[462]"></a>_lv_txt_cut</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_txt.o(.text._lv_txt_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_txt_cut &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
</UL>

<P><STRONG><a name="[8e4]"></a>_lv_txt_encoded_letter_next_2</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_txt.o(.text._lv_txt_encoded_letter_next_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_txt_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[463]"></a>_lv_txt_get_next_line</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, lv_txt.o(.text._lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[466]"></a>_lv_txt_ins</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lv_txt.o(.text._lv_txt_ins))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_txt_ins &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
</UL>

<P><STRONG><a name="[94f]"></a>_lv_txt_is_cmd</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lv_txt.o(.text._lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
</UL>

<P><STRONG><a name="[468]"></a>_lv_txt_set_text_vfmt</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lv_txt.o(.text._lv_txt_set_text_vfmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _lv_txt_set_text_vfmt &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>

<P><STRONG><a name="[7dd]"></a>_lv_utils_bsearch</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lv_utils.o(.text._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[46a]"></a>_memheap_alloc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, memheap.o(.text._memheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_realloc
</UL>

<P><STRONG><a name="[46d]"></a>_memheap_free</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memheap.o(.text._memheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_realloc
</UL>

<P><STRONG><a name="[46f]"></a>_memheap_realloc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, memheap.o(.text._memheap_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_alloc
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[309]"></a>_sys_close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, syscalls.o(.text._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _sys_close &rArr; close &rArr; dfs_file_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[2af]"></a>_sys_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, syscalls.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[317]"></a>_sys_flen</STRONG> (Thumb, 24 bytes, Stack size 72 bytes, syscalls.o(.text._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[318]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, syscalls.o(.text._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[304]"></a>_sys_open</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, syscalls.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _sys_open &rArr; open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[31b]"></a>_sys_seek</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, syscalls.o(.text._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _sys_seek &rArr; lseek &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[31c]"></a>_sys_write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, syscalls.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[321]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscalls.o(.text._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[4a9]"></a>accept</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_sockets.o(.text.accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = accept &rArr; sal_accept &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
</UL>

<P><STRONG><a name="[4b2]"></a>access</STRONG> (Thumb, 16 bytes, Stack size 72 bytes, dfs_posix.o(.text.access))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = access &rArr; stat &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_flush_with_buf
</UL>

<P><STRONG><a name="[4d4]"></a>alram_timer_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, alarm_timer.o(.text.alram_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = alram_timer_start &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[10c]"></a>app_close_cb</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lvgl_sn_interface.o(.text.app_close_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = app_close_cb &rArr; create_desk &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lvgl_sn_interface.o(.text.create_device_status)
<LI> lvgl_sn_interface.o(.text.create_alarm)
<LI> lvgl_sn_interface.o(.text.create_net_up)
</UL>
<P><STRONG><a name="[4ee]"></a>asctime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctime.o(.text.asctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = asctime &rArr; asctime_r &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[4ef]"></a>asctime_r</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, ctime.o(.text.asctime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = asctime_r &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2str
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[1a5]"></a>at_bind</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, at_socket.o(.text.at_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = at_bind &rArr; alloc_socket_by_device &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_ipaddr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closesocket
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketaddr_to_ipaddr_port
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[4f2]"></a>at_cli_deinit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, at_cli.o(.text.at_cli_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = at_cli_deinit &rArr; rt_ringbuffer_destroy &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_destroy
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
</UL>

<P><STRONG><a name="[4f1]"></a>at_cli_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, at_cli.o(.text.at_cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = at_cli_init &rArr; rt_ringbuffer_create &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
</UL>

<P><STRONG><a name="[4f4]"></a>at_client_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at_client.o(.text.at_client_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_client_get
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
</UL>

<P><STRONG><a name="[4f3]"></a>at_client_get_first</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_client.o(.text.at_client_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
</UL>

<P><STRONG><a name="[504]"></a>at_client_init</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, at_client.o(.text.at_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = at_client_init &rArr; at_client_para_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init
</UL>

<P><STRONG><a name="[508]"></a>at_client_obj_recv</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, at_client.o(.text.at_client_obj_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = at_client_obj_recv &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
</UL>

<P><STRONG><a name="[509]"></a>at_client_obj_send</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, at_client.o(.text.at_client_obj_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = at_client_obj_send &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_utils_send
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_send
</UL>

<P><STRONG><a name="[50b]"></a>at_client_obj_wait_connect</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, at_client.o(.text.at_client_obj_wait_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = at_client_obj_wait_connect &rArr; at_create_resp &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_utils_send
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_reset
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
</UL>

<P><STRONG><a name="[1a4]"></a>at_closesocket</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, at_socket.o(.text.at_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = at_closesocket &rArr; free_socket &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[1a6]"></a>at_connect</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, at_socket.o(.text.at_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = at_connect &rArr; at_do_event_changes &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketaddr_to_ipaddr_port
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_ipstr
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[50c]"></a>at_create_resp</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, at_client.o(.text.at_create_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = at_create_resp &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_wifi_info_set
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dns_server
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dhcp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_ping
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_send
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_connect
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_close
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_domain_resolve
</UL>

<P><STRONG><a name="[50d]"></a>at_delete_resp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_client.o(.text.at_delete_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = at_delete_resp &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_wifi_info_set
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dns_server
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dhcp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_ping
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_send
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_connect
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_close
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_domain_resolve
</UL>

<P><STRONG><a name="[515]"></a>at_device_class_register</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_device.o(.text.at_device_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at_device_class_register
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_device_class_register
</UL>

<P><STRONG><a name="[4f8]"></a>at_device_get_by_ipaddr</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at_device.o(.text.at_device_get_by_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_device_get_by_ipaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_bind
</UL>

<P><STRONG><a name="[4c4]"></a>at_device_get_by_name</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, at_device.o(.text.at_device_get_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_device_get_by_name
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_up
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_down
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dns_server
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dhcp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_ping
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
</UL>

<P><STRONG><a name="[519]"></a>at_device_get_first_initialized</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, at_device.o(.text.at_device_get_first_initialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_device_get_first_initialized
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_domain_resolve
</UL>

<P><STRONG><a name="[51a]"></a>at_device_register</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, at_device.o(.text.at_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = at_device_register &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_get
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_device_register
</UL>

<P><STRONG><a name="[1a2]"></a>at_freeaddrinfo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_socket.o(.text.at_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = at_freeaddrinfo &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_netdb_ops)
</UL>
<P><STRONG><a name="[521]"></a>at_get_last_cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at_utils.o(.text.at_get_last_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>

<P><STRONG><a name="[4f6]"></a>at_get_socket</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, at_socket.o(.text.at_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_shutdown
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setsockopt
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sendto
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getsockopt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_connect
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closesocket
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_bind
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_poll
</UL>

<P><STRONG><a name="[1a1]"></a>at_getaddrinfo</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, at_socket.o(.text.at_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = at_getaddrinfo &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_to_u32
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_netdb_ops)
</UL>
<P><STRONG><a name="[1a0]"></a>at_gethostbyname</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, at_socket.o(.text.at_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = at_gethostbyname &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_to_u32
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_netdb_ops)
</UL>
<P><STRONG><a name="[1a9]"></a>at_getsockopt</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, at_socket.o(.text.at_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = at_getsockopt &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[51f]"></a>at_obj_exec_cmd</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, at_client.o(.text.at_obj_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = at_obj_exec_cmd &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_last_cmd
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_wifi_info_set
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_reset
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dns_server
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dhcp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_ping
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_send
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_connect
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_close
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_domain_resolve
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
</UL>

<P><STRONG><a name="[522]"></a>at_obj_set_end_sign</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at_client.o(.text.at_obj_set_end_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = at_obj_set_end_sign &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_send
</UL>

<P><STRONG><a name="[523]"></a>at_obj_set_urc_table</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, at_client.o(.text.at_obj_set_urc_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = at_obj_set_urc_table &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_init
</UL>

<P><STRONG><a name="[1a8]"></a>at_recvfrom</STRONG> (Thumb, 440 bytes, Stack size 72 bytes, at_socket.o(.text.at_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = at_recvfrom &rArr; at_do_event_changes &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketaddr_to_ipaddr_port
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_ipstr
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_clean
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[532]"></a>at_resp_get_line</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, at_client.o(.text.at_resp_get_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = at_resp_get_line &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
</UL>

<P><STRONG><a name="[533]"></a>at_resp_get_line_by_kw</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, at_client.o(.text.at_resp_get_line_by_kw))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = at_resp_get_line_by_kw &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
</UL>

<P><STRONG><a name="[535]"></a>at_resp_parse_line_args</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at_client.o(.text.at_resp_parse_line_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = at_resp_parse_line_args &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
</UL>

<P><STRONG><a name="[536]"></a>at_resp_parse_line_args_by_kw</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at_client.o(.text.at_resp_parse_line_args_by_kw))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = at_resp_parse_line_args_by_kw &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_ping
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_domain_resolve
</UL>

<P><STRONG><a name="[537]"></a>at_resp_set_info</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, at_client.o(.text.at_resp_set_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = at_resp_set_info &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
</UL>

<P><STRONG><a name="[1a7]"></a>at_sendto</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, at_socket.o(.text.at_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = at_sendto &rArr; at_do_event_changes &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketaddr_to_ipaddr_port
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_ipstr
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[1aa]"></a>at_setsockopt</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, at_socket.o(.text.at_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = at_setsockopt &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[1ab]"></a>at_shutdown</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, at_socket.o(.text.at_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = at_shutdown &rArr; free_socket &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[1a3]"></a>at_socket</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, at_socket.o(.text.at_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = at_socket &rArr; alloc_socket &rArr; alloc_socket_by_device &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[50a]"></a>at_utils_send</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, at_utils.o(.text.at_utils_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_utils_send &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
</UL>

<P><STRONG><a name="[520]"></a>at_vprintfln</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, at_utils.o(.text.at_vprintfln))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = at_vprintfln &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_utils_send
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>

<P><STRONG><a name="[540]"></a>bind</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_sockets.o(.text.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = bind &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
</UL>

<P><STRONG><a name="[54d]"></a>build_status_json_str</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, umqtt_sample.o(.text.build_status_json_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = build_status_json_str &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddArrayToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_topic_recv_callback
</UL>

<P><STRONG><a name="[559]"></a>bzero</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cstring.o(.text.bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectHost
</UL>

<P><STRONG><a name="[550]"></a>cJSON_AddArrayToObject</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_AddArrayToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cJSON_AddArrayToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
</UL>

<P><STRONG><a name="[555]"></a>cJSON_AddBoolToObject</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_AddBoolToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cJSON_AddBoolToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateBool
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
</UL>

<P><STRONG><a name="[551]"></a>cJSON_AddItemToArray</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_AddItemToArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_AddItemToArray &rArr; add_item_to_array
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
</UL>

<P><STRONG><a name="[554]"></a>cJSON_AddItemToObject</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_AddItemToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_AddItemToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
</UL>

<P><STRONG><a name="[54f]"></a>cJSON_AddNumberToObject</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_AddNumberToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cJSON_AddNumberToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
</UL>

<P><STRONG><a name="[552]"></a>cJSON_AddStringToObject</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_AddStringToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cJSON_AddStringToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
</UL>

<P><STRONG><a name="[55a]"></a>cJSON_CreateArray</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_CreateArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_CreateArray &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddArrayToObject
</UL>

<P><STRONG><a name="[55b]"></a>cJSON_CreateBool</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_CreateBool))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_CreateBool &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
</UL>

<P><STRONG><a name="[553]"></a>cJSON_CreateIntArray</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, cjson.o(.text.cJSON_CreateIntArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_CreateIntArray &rArr; cJSON_CreateNumber &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
</UL>

<P><STRONG><a name="[55c]"></a>cJSON_CreateNumber</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_CreateNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_CreateNumber &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>

<P><STRONG><a name="[54e]"></a>cJSON_CreateObject</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_CreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_CreateObject &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
</UL>

<P><STRONG><a name="[55d]"></a>cJSON_CreateString</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_CreateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cJSON_CreateString &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
</UL>

<P><STRONG><a name="[557]"></a>cJSON_Delete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_data_parse
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddArrayToObject
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
</UL>

<P><STRONG><a name="[55f]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_GetObjectItem &rArr; get_object_item &rArr; case_insensitive_strcmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_data_parse
</UL>

<P><STRONG><a name="[561]"></a>cJSON_Parse</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_data_parse
</UL>

<P><STRONG><a name="[563]"></a>cJSON_ParseWithLengthOpts</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, cjson.o(.text.cJSON_ParseWithLengthOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[562]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_ParseWithOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[556]"></a>cJSON_Print</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
</UL>

<P><STRONG><a name="[598]"></a>cat</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, dfs_file.o(.text.cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
</UL>

<P><STRONG><a name="[59e]"></a>chdir</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, dfs_posix.o(.text.chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = chdir &rArr; opendir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
</UL>

<P><STRONG><a name="[48c]"></a>close</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dfs_posix.o(.text.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = close &rArr; dfs_file_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendmail
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_rotate
</UL>

<P><STRONG><a name="[5a2]"></a>closedir</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dfs_posix.o(.text.closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = closedir &rArr; dfs_file_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[5bf]"></a>closesocket</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, net_sockets.o(.text.closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_disconnect
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_connect
</UL>

<P><STRONG><a name="[257]"></a>cmd_free</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, msh.o(.text.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = cmd_free &rArr; list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[256]"></a>cmd_ps</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, msh.o(.text.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[5d1]"></a>connect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_sockets.o(.text.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = connect &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_connect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectHost
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_connect
</UL>

<P><STRONG><a name="[5d3]"></a>connectHost</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, send_mail.o(.text.connectHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = connectHost &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_inet_pton
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
</UL>

<P><STRONG><a name="[5c0]"></a>copy</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, dfs_file.o(.text.copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
</UL>

<P><STRONG><a name="[4e5]"></a>create_alarm</STRONG> (Thumb, 772 bytes, Stack size 56 bytes, lvgl_sn_interface.o(.text.create_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = create_alarm &rArr; para_update &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_create
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_text
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_set_text
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_create
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_click_cb
</UL>

<P><STRONG><a name="[4dd]"></a>create_desk</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, lvgl_sn_interface.o(.text.create_desk))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = create_desk &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_rounded
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_center
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_close_cb
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_read_cb
</UL>

<P><STRONG><a name="[4e3]"></a>create_device_status</STRONG> (Thumb, 1120 bytes, Stack size 48 bytes, lvgl_sn_interface.o(.text.create_device_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = create_device_status &rArr; lv_tabview_add_tab &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_scale_ticks
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_scale_range
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_scale_major_ticks
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_value
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_start_value
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_end_value
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_create
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_scale_lines
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_scale
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_needle_line
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_arc
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_text
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_center
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_click_cb
</UL>

<P><STRONG><a name="[4e4]"></a>create_net_up</STRONG> (Thumb, 1628 bytes, Stack size 10336 bytes, lvgl_sn_interface.o(.text.create_net_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 11080 + Unknown Stack Size
<LI>Call Chain = create_net_up &rArr; lv_tabview_add_tab &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_create
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_create
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_pct
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_center
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_click_cb
</UL>

<P><STRONG><a name="[62f]"></a>ctime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctime.o(.text.ctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ctime &rArr; asctime &rArr; asctime_r &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[645]"></a>dev_status_update</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, lvgl_sn_interface.o(.text.dev_status_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = dev_status_update &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_value
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_btn_cb
</UL>

<P><STRONG><a name="[5c1]"></a>df</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, dfs_fs.o(.text.df))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</UL>

<P><STRONG><a name="[1b5]"></a>dfs_elm_close</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs_elm.o(.text.dfs_elm_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[1b9]"></a>dfs_elm_flush</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dfs_elm.o(.text.dfs_elm_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[1bb]"></a>dfs_elm_getdents</STRONG> (Thumb, 206 bytes, Stack size 328 bytes, dfs_elm.o(.text.dfs_elm_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[1b6]"></a>dfs_elm_ioctl</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dfs_elm.o(.text.dfs_elm_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dfs_elm_ioctl &rArr; f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[1ba]"></a>dfs_elm_lseek</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs_elm.o(.text.dfs_elm_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dfs_elm_lseek &rArr; f_seekdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[1af]"></a>dfs_elm_mkfs</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, dfs_elm.o(.text.dfs_elm_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = dfs_elm_mkfs &rArr; f_mkfs &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[1ad]"></a>dfs_elm_mount</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, dfs_elm.o(.text.dfs_elm_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = dfs_elm_mount &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[1b4]"></a>dfs_elm_open</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, dfs_elm.o(.text.dfs_elm_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dfs_elm_open &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[1b7]"></a>dfs_elm_read</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dfs_elm.o(.text.dfs_elm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dfs_elm_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[1b3]"></a>dfs_elm_rename</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dfs_elm.o(.text.dfs_elm_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[1b2]"></a>dfs_elm_stat</STRONG> (Thumb, 216 bytes, Stack size 368 bytes, dfs_elm.o(.text.dfs_elm_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[1b0]"></a>dfs_elm_statfs</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, dfs_elm.o(.text.dfs_elm_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[1b1]"></a>dfs_elm_unlink</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dfs_elm.o(.text.dfs_elm_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[1ae]"></a>dfs_elm_unmount</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dfs_elm.o(.text.dfs_elm_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dfs_elm_unmount &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm)
</UL>
<P><STRONG><a name="[1b8]"></a>dfs_elm_write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dfs_elm.o(.text.dfs_elm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dfs_elm_write &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rodata.dfs_elm_fops)
</UL>
<P><STRONG><a name="[59b]"></a>dfs_file_close</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs_file.o(.text.dfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[7c3]"></a>dfs_file_flush</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dfs_file.o(.text.dfs_file_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfs_file_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</UL>

<P><STRONG><a name="[5e3]"></a>dfs_file_getdents</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dfs_file.o(.text.dfs_file_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[877]"></a>dfs_file_lseek</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dfs_file.o(.text.dfs_file_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
</UL>

<P><STRONG><a name="[599]"></a>dfs_file_open</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, dfs_file.o(.text.dfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[59a]"></a>dfs_file_read</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dfs_file.o(.text.dfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[660]"></a>dfs_file_rename</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, dfs_file.o(.text.dfs_file_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_rotate
</UL>

<P><STRONG><a name="[5e0]"></a>dfs_file_stat</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, dfs_file.o(.text.dfs_file_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[661]"></a>dfs_file_unlink</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, dfs_file.o(.text.dfs_file_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</UL>

<P><STRONG><a name="[5e4]"></a>dfs_file_write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dfs_file.o(.text.dfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[65d]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, dfs_fs.o(.text.dfs_filesystem_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[235]"></a>dfs_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, dfs.o(.text.dfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dfs_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[5a0]"></a>dfs_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dfs.o(.text.dfs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>

<P><STRONG><a name="[5c4]"></a>dfs_mkfs</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, dfs_fs.o(.text.dfs_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dfs_mkfs &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
</UL>

<P><STRONG><a name="[5c5]"></a>dfs_mount</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, dfs_fs.o(.text.dfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = dfs_mount &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnt_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
</UL>

<P><STRONG><a name="[4ae]"></a>dfs_net_get_fops</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dfs_net.o(.text.dfs_net_get_fops))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[4aa]"></a>dfs_net_getsocket</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dfs_net.o(.text.dfs_net_getsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[59f]"></a>dfs_normalize_path</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, dfs.o(.text.dfs_normalize_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[194]"></a>dfs_ramfs_close</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dfs_ramfs.o(.text.dfs_ramfs_close))
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ram_fops)
</UL>
<P><STRONG><a name="[668]"></a>dfs_ramfs_create</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dfs_ramfs.o(.text.dfs_ramfs_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_ramfs_create &rArr; rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnt_init
</UL>

<P><STRONG><a name="[199]"></a>dfs_ramfs_getdents</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, dfs_ramfs.o(.text.dfs_ramfs_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfs_ramfs_getdents &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ram_fops)
</UL>
<P><STRONG><a name="[23d]"></a>dfs_ramfs_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dfs_ramfs.o(.text.dfs_ramfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dfs_ramfs_init &rArr; dfs_register &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[195]"></a>dfs_ramfs_ioctl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_ramfs.o(.text.dfs_ramfs_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ram_fops)
</UL>
<P><STRONG><a name="[66e]"></a>dfs_ramfs_lookup</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dfs_ramfs.o(.text.dfs_ramfs_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_ramfs_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_unlink
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_stat
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_rename
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
</UL>

<P><STRONG><a name="[198]"></a>dfs_ramfs_lseek</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfs_ramfs.o(.text.dfs_ramfs_lseek))
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ram_fops)
</UL>
<P><STRONG><a name="[19a]"></a>dfs_ramfs_mount</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dfs_ramfs.o(.text.dfs_ramfs_mount))
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ramfs)
</UL>
<P><STRONG><a name="[193]"></a>dfs_ramfs_open</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, dfs_ramfs.o(.text.dfs_ramfs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = dfs_ramfs_open &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ram_fops)
</UL>
<P><STRONG><a name="[196]"></a>dfs_ramfs_read</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dfs_ramfs.o(.text.dfs_ramfs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_ramfs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ram_fops)
</UL>
<P><STRONG><a name="[19f]"></a>dfs_ramfs_rename</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dfs_ramfs.o(.text.dfs_ramfs_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = dfs_ramfs_rename &rArr; dfs_ramfs_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ramfs)
</UL>
<P><STRONG><a name="[19e]"></a>dfs_ramfs_stat</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dfs_ramfs.o(.text.dfs_ramfs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dfs_ramfs_stat &rArr; dfs_ramfs_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ramfs)
</UL>
<P><STRONG><a name="[19c]"></a>dfs_ramfs_statfs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dfs_ramfs.o(.text.dfs_ramfs_statfs))
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ramfs)
</UL>
<P><STRONG><a name="[19d]"></a>dfs_ramfs_unlink</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_ramfs.o(.text.dfs_ramfs_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dfs_ramfs_unlink &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ramfs)
</UL>
<P><STRONG><a name="[19b]"></a>dfs_ramfs_unmount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dfs_ramfs.o(.text.dfs_ramfs_unmount))
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ramfs)
</UL>
<P><STRONG><a name="[197]"></a>dfs_ramfs_write</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dfs_ramfs.o(.text.dfs_ramfs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dfs_ramfs_write &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_ramfs.o(.rodata._ram_fops)
</UL>
<P><STRONG><a name="[66d]"></a>dfs_register</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, dfs_fs.o(.text.dfs_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dfs_register &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_init
</UL>

<P><STRONG><a name="[646]"></a>dfs_statfs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dfs_fs.o(.text.dfs_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[65e]"></a>dfs_subdir</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dfs.o(.text.dfs_subdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_subdir &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[5a3]"></a>dfs_unlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dfs.o(.text.dfs_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>

<P><STRONG><a name="[5cb]"></a>dfs_unmount</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, dfs_fs.o(.text.dfs_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_umount
</UL>

<P><STRONG><a name="[78b]"></a>disk_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_elm.o(.text.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[62b]"></a>disk_ioctl</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, dfs_elm.o(.text.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disk_ioctl &rArr; rt_device_control
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[682]"></a>disk_read</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dfs_elm.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[ab3]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_elm.o(.text.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[62e]"></a>disk_write</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dfs_elm.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[6ac]"></a>draw_border_generic</STRONG> (Thumb, 1344 bytes, Stack size 208 bytes, lv_draw_sw_rect.o(.text.draw_border_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = draw_border_generic &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
</UL>

<P><STRONG><a name="[653]"></a>elm_get_vol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(.text.elm_get_vol))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[23c]"></a>elm_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dfs_elm.o(.text.elm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = elm_init &rArr; dfs_register &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[1c5]"></a>esp32_netdev_netstat</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, at_device_esp32.o(.text.esp32_netdev_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = esp32_netdev_netstat &rArr; at_resp_parse_line_args &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.esp32_netdev_ops)
</UL>
<P><STRONG><a name="[766]"></a>esp32_socket_class_register</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_socket_esp32.o(.text.esp32_socket_class_register))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_device_class_register
</UL>

<P><STRONG><a name="[76c]"></a>esp32_socket_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_socket_esp32.o(.text.esp32_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = esp32_socket_init &rArr; at_obj_set_urc_table &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init
</UL>

<P><STRONG><a name="[647]"></a>f_close</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ff.o(.text.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = f_close &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[65a]"></a>f_getfree</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, ff.o(.text.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</UL>

<P><STRONG><a name="[64b]"></a>f_lseek</STRONG> (Thumb, 754 bytes, Stack size 40 bytes, ff.o(.text.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[655]"></a>f_mkdir</STRONG> (Thumb, 290 bytes, Stack size 104 bytes, ff.o(.text.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[64f]"></a>f_mkfs</STRONG> (Thumb, 1804 bytes, Stack size 128 bytes, ff.o(.text.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = f_mkfs &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[650]"></a>f_mount</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[654]"></a>f_open</STRONG> (Thumb, 594 bytes, Stack size 96 bytes, ff.o(.text.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[652]"></a>f_opendir</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(.text.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[656]"></a>f_read</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, ff.o(.text.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</UL>

<P><STRONG><a name="[64a]"></a>f_readdir</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ff.o(.text.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[657]"></a>f_rename</STRONG> (Thumb, 316 bytes, Stack size 168 bytes, ff.o(.text.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</UL>

<P><STRONG><a name="[64d]"></a>f_seekdir</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ff.o(.text.f_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[658]"></a>f_stat</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, ff.o(.text.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[649]"></a>f_sync</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ff.o(.text.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
</UL>

<P><STRONG><a name="[64c]"></a>f_truncate</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ff.o(.text.f_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = f_truncate &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[65b]"></a>f_unlink</STRONG> (Thumb, 200 bytes, Stack size 128 bytes, ff.o(.text.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</UL>

<P><STRONG><a name="[65c]"></a>f_write</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, ff.o(.text.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</UL>

<P><STRONG><a name="[4ad]"></a>fd_get</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dfs.o(.text.fd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fd_get &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
</UL>

<P><STRONG><a name="[662]"></a>fd_is_open</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, dfs.o(.text.fd_is_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[4ac]"></a>fd_new</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfs.o(.text.fd_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[4af]"></a>fd_put</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dfs.o(.text.fd_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
</UL>

<P><STRONG><a name="[78d]"></a>ff_cre_syncobj</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dfs_elm.o(.text.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[78c]"></a>ff_del_syncobj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dfs_elm.o(.text.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ff_del_syncobj &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[677]"></a>ff_memalloc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dfs_elm.o(.text.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[678]"></a>ff_memfree</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dfs_elm.o(.text.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ff_memfree &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[b6a]"></a>ff_oem2uni</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ffunicode.o(.text.ff_oem2uni))
<BR><BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[794]"></a>ff_rel_grant</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dfs_elm.o(.text.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[795]"></a>ff_req_grant</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dfs_elm.o(.text.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[61f]"></a>ff_uni2oem</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ffunicode.o(.text.ff_uni2oem))
<BR><BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5cd]"></a>ff_wtoupper</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, ffunicode.o(.text.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[122]"></a>file_read</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, zftp_test.o(.text.file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = file_read &rArr; stat &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zftp_test.o(.text.ftp_upload)
</UL>
<P><STRONG><a name="[121]"></a>file_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zftp_test.o(.text.file_write))
<BR>[Address Reference Count : 1]<UL><LI> zftp_test.o(.text.ftp_upload)
</UL>
<P><STRONG><a name="[7a6]"></a>finsh_get_prompt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, shell.o(.text.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[7a9]"></a>finsh_getchar</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, shell.o(.text.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[7aa]"></a>finsh_set_device</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, shell.o(.text.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[7ac]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, shell.o(.text.finsh_set_prompt_mode))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[7ab]"></a>finsh_system_function_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shell.o(.text.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[242]"></a>finsh_system_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, shell.o(.text.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[120]"></a>finsh_thread_entry</STRONG> (Thumb, 992 bytes, Stack size 0 bytes, shell.o(.text.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = finsh_thread_entry &rArr; shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_system_init)
</UL>
<P><STRONG><a name="[2fc]"></a>free</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, syscall_mem.o(.text.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_topic_recv_callback
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[7c0]"></a>freeaddrinfo</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_netdb.o(.text.freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freeaddrinfo &rArr; sal_freeaddrinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_freeaddrinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_connect
</UL>

<P><STRONG><a name="[48d]"></a>fstat</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dfs_posix.o(.text.fstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = fstat &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[7c2]"></a>fsync</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_posix.o(.text.fsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = fsync &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_flush
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_flush_with_buf
</UL>

<P><STRONG><a name="[7c4]"></a>ftp_upload</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, zftp_test.o(.text.ftp_upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = ftp_upload &rArr; zFTP_upload_file &rArr; zFTP_pasv_mode &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_set_callback
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_change_path
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_btn_cb
</UL>

<P><STRONG><a name="[7c9]"></a>getResponse</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, send_mail.o(.text.getResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = getResponse &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendmail
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
</UL>

<P><STRONG><a name="[b6f]"></a>get_dev_index</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, udp_server.o(.text.get_dev_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_dev_index
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
</UL>

<P><STRONG><a name="[786]"></a>get_fattime</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, dfs_elm.o(.text.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = get_fattime &rArr; time &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[75b]"></a>get_tick_gsc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lv_chart.o(.text.get_tick_gsc))
<BR><BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>

<P><STRONG><a name="[635]"></a>get_timestamp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtc.o(.text.get_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_timestamp &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[801]"></a>getaddrinfo</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_netdb.o(.text.getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getaddrinfo &rArr; sal_getaddrinfo &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_getaddrinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
</UL>

<P><STRONG><a name="[7a7]"></a>getcwd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dfs_posix.o(.text.getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[803]"></a>gethostbyname</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_netdb.o(.text.gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gethostbyname &rArr; sal_gethostbyname &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
</UL>

<P><STRONG><a name="[634]"></a>gettimeofday</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ctime.o(.text.gettimeofday))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_get
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[7da]"></a>gmtime_r</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, ctime.o(.text.gmtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gmtime_r &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[82d]"></a>imxrt_uart_pins_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, board.o(.text.imxrt_uart_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = imxrt_uart_pins_init
</UL>
<BR>[Calls]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[263]"></a>list_device</STRONG> (Thumb, 176 bytes, Stack size 104 bytes, cmd.o(.text.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[25c]"></a>list_event</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, cmd.o(.text.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[254]"></a>list_fd</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, dfs.o(.text.list_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = list_fd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(FSymTab)
</UL>
<P><STRONG><a name="[25e]"></a>list_mailbox</STRONG> (Thumb, 216 bytes, Stack size 112 bytes, cmd.o(.text.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[260]"></a>list_memheap</STRONG> (Thumb, 160 bytes, Stack size 104 bytes, cmd.o(.text.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[261]"></a>list_mempool</STRONG> (Thumb, 220 bytes, Stack size 112 bytes, cmd.o(.text.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[25f]"></a>list_msgqueue</STRONG> (Thumb, 208 bytes, Stack size 104 bytes, cmd.o(.text.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[25d]"></a>list_mutex</STRONG> (Thumb, 164 bytes, Stack size 112 bytes, cmd.o(.text.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[25b]"></a>list_sem</STRONG> (Thumb, 208 bytes, Stack size 104 bytes, cmd.o(.text.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[25a]"></a>list_thread</STRONG> (Thumb, 264 bytes, Stack size 232 bytes, cmd.o(.text.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[262]"></a>list_timer</STRONG> (Thumb, 228 bytes, Stack size 104 bytes, cmd.o(.text.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[630]"></a>localtime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctime.o(.text.localtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = localtime &rArr; localtime_r &rArr; gmtime_r &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[873]"></a>localtime_r</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ctime.o(.text.localtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = localtime_r &rArr; gmtime_r &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_get
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[875]"></a>login</STRONG> (Thumb, 356 bytes, Stack size 136 bytes, send_mail.o(.text.login))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = login &rArr; getResponse &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
</UL>

<P><STRONG><a name="[5c2]"></a>ls</STRONG> (Thumb, 276 bytes, Stack size 104 bytes, dfs_file.o(.text.ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ls &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ls
</UL>

<P><STRONG><a name="[490]"></a>lseek</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dfs_posix.o(.text.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lseek &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_flush_with_buf
</UL>

<P><STRONG><a name="[878]"></a>lv_anim_del</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lv_anim.o(.text.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_anim_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_destructor
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_destructor
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[879]"></a>lv_anim_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
</UL>

<P><STRONG><a name="[44f]"></a>lv_anim_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_anim.o(.text.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_anim_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[12c]"></a>lv_anim_path_ease_in_out</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_ease_in_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_anim_path_ease_in_out &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.text.lv_anim_set_path_cb)
</UL>
<P><STRONG><a name="[12e]"></a>lv_anim_path_ease_out</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_ease_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_anim_path_ease_out &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_obj_scroll.o(.text.lv_anim_set_path_cb)
<LI> lv_roller.o(.text.lv_anim_set_path_cb)
</UL>
<P><STRONG><a name="[126]"></a>lv_anim_path_linear</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_anim_path_linear &rArr; lv_map
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_theme_default.o(.text.style_init)
<LI> lv_style.o(.text.lv_style_transition_dsc_init)
<LI> lv_anim.o(.text.lv_anim_init)
</UL>
<P><STRONG><a name="[12b]"></a>lv_anim_path_overshoot</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_overshoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_anim_path_overshoot &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.lv_anim_set_path_cb)
</UL>
<P><STRONG><a name="[12d]"></a>lv_anim_path_step</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_anim.o(.text.lv_anim_path_step))
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.text.lv_anim_set_path_cb)
</UL>
<P><STRONG><a name="[95b]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_anim.o(.text.lv_anim_speed_to_time))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
</UL>

<P><STRONG><a name="[459]"></a>lv_anim_start</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_anim_start &rArr; lv_anim_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[880]"></a>lv_arc_get_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_arc.o(.text.lv_arc_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[882]"></a>lv_arc_set_angles</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_angles))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[883]"></a>lv_arc_set_bg_angles</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_bg_angles))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_arc_set_bg_angles &rArr; lv_arc_set_bg_start_angle &rArr; value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_start_angle
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_end_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[884]"></a>lv_arc_set_bg_end_angle</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_bg_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_arc_set_bg_end_angle &rArr; value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
</UL>

<P><STRONG><a name="[885]"></a>lv_arc_set_bg_start_angle</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_bg_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_arc_set_bg_start_angle &rArr; value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
</UL>

<P><STRONG><a name="[4e9]"></a>lv_arc_set_end_angle</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_angles
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_anim_end_angle
</UL>

<P><STRONG><a name="[887]"></a>lv_arc_set_rotation</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_arc_set_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_arc_set_rotation &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[4ea]"></a>lv_arc_set_start_angle</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_angles
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_anim_start_angle
</UL>

<P><STRONG><a name="[881]"></a>lv_arc_set_value</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_arc_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_arc_set_value &rArr; value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[5db]"></a>lv_area_get_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_invalid_areas
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_cb
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
</UL>

<P><STRONG><a name="[756]"></a>lv_area_increase</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_area.o(.text.lv_area_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_get_area
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[727]"></a>lv_area_move</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_area.o(.text.lv_area_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_move
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
</UL>

<P><STRONG><a name="[3fc]"></a>lv_area_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
</UL>

<P><STRONG><a name="[108]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[109]"></a>lv_area_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_width))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[87f]"></a>lv_atan2</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, lv_math.o(.text.lv_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[619]"></a>lv_bar_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_bar_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[a4b]"></a>lv_bar_get_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
</UL>

<P><STRONG><a name="[a4a]"></a>lv_bar_get_start_value</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_start_value))
<BR><BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_left_value
</UL>

<P><STRONG><a name="[a4c]"></a>lv_bar_get_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_value
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_value
</UL>

<P><STRONG><a name="[88c]"></a>lv_bar_set_start_value</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_bar.o(.text.lv_bar_set_start_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_bar_set_start_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_left_value
</UL>

<P><STRONG><a name="[61a]"></a>lv_bar_set_value</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_bar.o(.text.lv_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_update
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_value
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_value
</UL>

<P><STRONG><a name="[87a]"></a>lv_bezier3</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_math.o(.text.lv_bezier3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_bezier3
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_overshoot
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_in_out
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
</UL>

<P><STRONG><a name="[628]"></a>lv_btn_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btn.o(.text.lv_btn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_btn_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
</UL>

<P><STRONG><a name="[894]"></a>lv_btnmatrix_clear_btn_ctrl</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_clear_btn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
</UL>

<P><STRONG><a name="[814]"></a>lv_btnmatrix_clear_btn_ctrl_all</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_clear_btn_ctrl_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
</UL>

<P><STRONG><a name="[897]"></a>lv_btnmatrix_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_btnmatrix_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[89f]"></a>lv_btnmatrix_get_btn_text</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_get_btn_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_btnmatrix_get_btn_text &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[54b]"></a>lv_btnmatrix_get_selected_btn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_get_selected_btn))
<BR><BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[746]"></a>lv_btnmatrix_has_btn_ctrl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_has_btn_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
</UL>

<P><STRONG><a name="[816]"></a>lv_btnmatrix_set_btn_ctrl</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_btn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
</UL>

<P><STRONG><a name="[8a0]"></a>lv_btnmatrix_set_btn_ctrl_all</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_btn_ctrl_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lv_btnmatrix_set_btn_ctrl_all &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[8a1]"></a>lv_btnmatrix_set_ctrl_map</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_ctrl_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
</UL>

<P><STRONG><a name="[896]"></a>lv_btnmatrix_set_map</STRONG> (Thumb, 494 bytes, Stack size 112 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_width
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_btn_areas_and_controls
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_map
</UL>

<P><STRONG><a name="[8a4]"></a>lv_btnmatrix_set_one_checked</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_one_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_btnmatrix_set_one_checked &rArr; make_one_button_checked &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[8a5]"></a>lv_btnmatrix_set_selected_btn</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_selected_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_btnmatrix_set_selected_btn &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
</UL>

<P><STRONG><a name="[ab1]"></a>lv_calendar_get_showed_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_calendar.o(.text.lv_calendar_get_showed_date))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[8a8]"></a>lv_calendar_set_showed_date</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, lv_calendar.o(.text.lv_calendar_set_showed_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_selected_btn
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_month_length
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_day_of_week
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[8a9]"></a>lv_calendar_set_today_date</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_calendar.o(.text.lv_calendar_set_today_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_calendar_set_today_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[8aa]"></a>lv_canvas_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_canvas.o(.text.lv_canvas_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_canvas_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
</UL>

<P><STRONG><a name="[8ac]"></a>lv_canvas_set_buffer</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_canvas.o(.text.lv_canvas_set_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lv_canvas_set_buffer &rArr; lv_img_set_src &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
</UL>

<P><STRONG><a name="[6cd]"></a>lv_chart_get_point_pos_by_id</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, lv_chart.o(.text.lv_chart_get_point_pos_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_chart_get_point_pos_by_id &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
</UL>

<P><STRONG><a name="[5fa]"></a>lv_checkbox_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_checkbox_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_checkbox_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
</UL>

<P><STRONG><a name="[5b7]"></a>lv_checkbox_get_text</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_checkbox.o(.text.lv_checkbox_get_text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_alram_cb
</UL>

<P><STRONG><a name="[5fb]"></a>lv_checkbox_set_text</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_checkbox.o(.text.lv_checkbox_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_checkbox_set_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
</UL>

<P><STRONG><a name="[a18]"></a>lv_clamp_height</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_clamp_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_clamp_height
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[a17]"></a>lv_clamp_width</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_clamp_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_clamp_width
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[633]"></a>lv_color_darken</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_color.o(.text.lv_color_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_color_darken &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dark_color_filter_cb
</UL>

<P><STRONG><a name="[79a]"></a>lv_color_fill</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_fill))
<BR><BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[8cb]"></a>lv_color_hsv_to_rgb</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, lv_color.o(.text.lv_color_hsv_to_rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_color_hsv_to_rgb
</UL>
<BR>[Calls]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_get_rgb
</UL>

<P><STRONG><a name="[6fc]"></a>lv_colorwheel_get_rgb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.lv_colorwheel_get_rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_colorwheel_get_rgb &rArr; lv_color_hsv_to_rgb
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hsv_to_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[689]"></a>lv_colorwheel_set_hsv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lv_colorwheel.o(.text.lv_colorwheel_set_hsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_colorwheel_set_hsv &rArr; refr_knob_pos &rArr; invalidate_knob &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_click_reset
</UL>

<P><STRONG><a name="[8d5]"></a>lv_disp_draw_buf_init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lv_hal_disp.o(.text.lv_disp_draw_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_disp_draw_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[8d6]"></a>lv_disp_drv_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lv_hal_disp.o(.text.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_drv_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[8d7]"></a>lv_disp_drv_register</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, lv_hal_disp.o(.text.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_is_inited
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_get
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[393]"></a>lv_disp_flush_ready</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIF_IRQHandler
</UL>

<P><STRONG><a name="[3f6]"></a>lv_disp_get_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layer_sys
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layer_top
</UL>

<P><STRONG><a name="[851]"></a>lv_disp_get_dpi</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_hal_disp.o(.text.lv_disp_get_dpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_dpi
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_dpx
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[6b9]"></a>lv_disp_get_draw_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_draw_buf))
<BR><BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>

<P><STRONG><a name="[3fa]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_hal_disp.o(.text.lv_disp_get_hor_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_hor_res
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
</UL>

<P><STRONG><a name="[840]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layer_sys
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[842]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layer_top
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[8dd]"></a>lv_disp_get_next</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_hal_disp.o(.text.lv_disp_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
</UL>

<P><STRONG><a name="[843]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[8de]"></a>lv_disp_get_scr_prev</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_scr_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[8df]"></a>lv_disp_get_theme</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_theme
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
</UL>

<P><STRONG><a name="[3fb]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_hal_disp.o(.text.lv_disp_get_ver_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_ver_res
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
</UL>

<P><STRONG><a name="[438]"></a>lv_disp_is_invalidation_enabled</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_is_invalidation_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_is_invalidation_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>

<P><STRONG><a name="[691]"></a>lv_draw_arc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_draw_arc.o(.text.lv_draw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
</UL>

<P><STRONG><a name="[68b]"></a>lv_draw_arc_dsc_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_draw_arc.o(.text.lv_draw_arc_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_arc_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
</UL>

<P><STRONG><a name="[849]"></a>lv_draw_arc_get_area</STRONG> (Thumb, 1076 bytes, Stack size 48 bytes, lv_draw_arc.o(.text.lv_draw_arc_get_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_draw_arc_get_area
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc
</UL>

<P><STRONG><a name="[6aa]"></a>lv_draw_img</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_draw_img.o(.text.lv_draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
</UL>

<P><STRONG><a name="[640]"></a>lv_draw_img_decoded</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_draw_img.o(.text.lv_draw_img_decoded))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_img_decoded
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[6a9]"></a>lv_draw_img_dsc_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_draw_img.o(.text.lv_draw_img_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_img_dsc_init &rArr; lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[939]"></a>lv_draw_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_draw.o(.text.lv_draw_init))
<BR><BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[6a7]"></a>lv_draw_label</STRONG> (Thumb, 1448 bytes, Stack size 248 bytes, lv_draw_label.o(.text.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bidi_calculate_align
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_char_to_num
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_label
</UL>

<P><STRONG><a name="[6a6]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_draw_label.o(.text.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_draw_label_dsc_init &rArr; lv_palette_main &rArr; lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_label
</UL>

<P><STRONG><a name="[860]"></a>lv_draw_layer_adjust</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_draw_layer.o(.text.lv_draw_layer_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_layer_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_alpha_test
</UL>

<P><STRONG><a name="[b01]"></a>lv_draw_layer_blend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_draw_layer.o(.text.lv_draw_layer_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_layer_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[8e8]"></a>lv_draw_layer_create</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_draw_layer.o(.text.lv_draw_layer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_draw_layer_create &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[8e9]"></a>lv_draw_layer_destroy</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_draw_layer.o(.text.lv_draw_layer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_draw_layer_destroy &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_wait_for_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[8e7]"></a>lv_draw_letter</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_draw_label.o(.text.lv_draw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_letter
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[6ce]"></a>lv_draw_line</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_draw_line.o(.text.lv_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
</UL>

<P><STRONG><a name="[6ca]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_draw_line.o(.text.lv_draw_line_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_line_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
</UL>

<P><STRONG><a name="[69b]"></a>lv_draw_mask_add</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lv_draw_mask.o(.text.lv_draw_mask_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_mask_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[8eb]"></a>lv_draw_mask_angle_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lv_draw_mask.o(.text.lv_draw_mask_angle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_draw_mask_angle_init &rArr; lv_draw_mask_line_angle_init &rArr; lv_draw_mask_line_points_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_angle_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[69f]"></a>lv_draw_mask_apply</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[6a1]"></a>lv_draw_mask_free_param</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lv_draw_mask.o(.text.lv_draw_mask_free_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_draw_mask_free_param &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[697]"></a>lv_draw_mask_is_any</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lv_draw_mask.o(.text.lv_draw_mask_is_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_draw_mask_is_any &rArr; _lv_area_is_out &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[8ec]"></a>lv_draw_mask_line_angle_init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_line_angle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_draw_mask_line_angle_init &rArr; lv_draw_mask_line_points_init
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
</UL>

<P><STRONG><a name="[706]"></a>lv_draw_mask_line_points_init</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, lv_draw_mask.o(.text.lv_draw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_mask_line_points_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_angle_init
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
</UL>

<P><STRONG><a name="[69a]"></a>lv_draw_mask_radius_init</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, lv_draw_mask.o(.text.lv_draw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[8f1]"></a>lv_draw_mask_remove_custom</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lv_draw_mask.o(.text.lv_draw_mask_remove_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_draw_mask_remove_custom
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[6a0]"></a>lv_draw_mask_remove_id</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_remove_id))
<BR><BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
</UL>

<P><STRONG><a name="[6b5]"></a>lv_draw_rect</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_draw_rect.o(.text.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_3
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_2
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_1
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_0
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
</UL>

<P><STRONG><a name="[6b3]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lv_draw_rect.o(.text.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_rect_dsc_init &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_white
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[13d]"></a>lv_draw_sw_arc</STRONG> (Thumb, 950 bytes, Stack size 352 bytes, lv_draw_sw_arc.o(.text.lv_draw_sw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = lv_draw_sw_arc &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rounded_area
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_3
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_2
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_1
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[143]"></a>lv_draw_sw_bg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_draw_sw_rect.o(.text.lv_draw_sw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = lv_draw_sw_bg &rArr; draw_bg_img &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[69d]"></a>lv_draw_sw_blend</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_draw_sw_blend.o(.text.lv_draw_sw_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_sw_blend &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_simple
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[147]"></a>lv_draw_sw_blend_basic</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, lv_draw_sw_blend.o(.text.lv_draw_sw_blend_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_draw_sw_blend_basic &rArr; fill_normal &rArr; lv_color_mix_premult
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_blended
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[145]"></a>lv_draw_sw_buffer_copy</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lv_draw_sw.o(.text.lv_draw_sw_buffer_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_sw_buffer_copy &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[13e]"></a>lv_draw_sw_img_decoded</STRONG> (Thumb, 768 bytes, Stack size 184 bytes, lv_draw_sw_img.o(.text.lv_draw_sw_img_decoded))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_draw_sw_img_decoded &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_transform
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_premult
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_premult
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[137]"></a>lv_draw_sw_init_ctx</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, lv_draw_sw.o(.text.lv_draw_sw_init_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_sw_init_ctx
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(.text.lv_disp_drv_init)
</UL>
<P><STRONG><a name="[148]"></a>lv_draw_sw_layer_adjust</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lv_draw_sw_layer.o(.text.lv_draw_sw_layer_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_sw_layer_adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[149]"></a>lv_draw_sw_layer_blend</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, lv_draw_sw_layer.o(.text.lv_draw_sw_layer_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = lv_draw_sw_layer_blend &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_wait_for_finish
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[146]"></a>lv_draw_sw_layer_create</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, lv_draw_sw_layer.o(.text.lv_draw_sw_layer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_draw_sw_layer_create &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[14a]"></a>lv_draw_sw_layer_destroy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_draw_sw_layer.o(.text.lv_draw_sw_layer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_draw_sw_layer_destroy &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[13f]"></a>lv_draw_sw_letter</STRONG> (Thumb, 292 bytes, Stack size 112 bytes, lv_draw_sw_letter.o(.text.lv_draw_sw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lv_draw_sw_letter &rArr; draw_letter_normal &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[140]"></a>lv_draw_sw_line</STRONG> (Thumb, 370 bytes, Stack size 112 bytes, lv_draw_sw_line.o(.text.lv_draw_sw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = lv_draw_sw_line &rArr; draw_line_skew &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[141]"></a>lv_draw_sw_polygon</STRONG> (Thumb, 738 bytes, Stack size 96 bytes, lv_draw_sw_polygon.o(.text.lv_draw_sw_polygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_draw_sw_polygon &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[13c]"></a>lv_draw_sw_rect</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_draw_sw_rect.o(.text.lv_draw_sw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = lv_draw_sw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[142]"></a>lv_draw_sw_transform</STRONG> (Thumb, 490 bytes, Stack size 152 bytes, lv_draw_sw_transform.o(.text.lv_draw_sw_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_draw_sw_transform &rArr; argb_and_rgb_aa &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point_upscaled
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_no_aa
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb565a8_no_aa
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;argb_no_aa
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;argb_and_rgb_aa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[144]"></a>lv_draw_sw_wait_for_finish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_draw_sw.o(.text.lv_draw_sw_wait_for_finish))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[8fc]"></a>lv_draw_transform</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, lv_draw_transform.o(.text.lv_draw_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_draw_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
</UL>

<P><STRONG><a name="[8ea]"></a>lv_draw_wait_for_finish</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_draw.o(.text.lv_draw_wait_for_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_wait_for_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
</UL>

<P><STRONG><a name="[545]"></a>lv_dropdown_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lv_dropdown_close &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
</UL>

<P><STRONG><a name="[5fc]"></a>lv_dropdown_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_dropdown_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[ab2]"></a>lv_dropdown_get_selected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_dropdown_get_selected))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_dd_cb
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[72e]"></a>lv_dropdown_get_selected_str</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_dropdown.o(.text.lv_dropdown_get_selected_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_dropdown_get_selected_str &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_btn_cb
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[544]"></a>lv_dropdown_is_open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_is_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_dropdown_is_open
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
</UL>

<P><STRONG><a name="[549]"></a>lv_dropdown_open</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, lv_dropdown.o(.text.lv_dropdown_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = lv_dropdown_open &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
</UL>

<P><STRONG><a name="[5fd]"></a>lv_dropdown_set_options</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lv_dropdown.o(.text.lv_dropdown_set_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_dropdown_set_options &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[622]"></a>lv_dropdown_set_options_static</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lv_dropdown.o(.text.lv_dropdown_set_options_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_dropdown_set_options_static &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
</UL>

<P><STRONG><a name="[913]"></a>lv_dropdown_set_selected</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_set_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_dropdown_set_selected &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
</UL>

<P><STRONG><a name="[4e0]"></a>lv_event_get_code</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_code))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_btn_cb
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_dd_cb
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_cb
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_btn_cb
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_btn_cb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_alram_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_click_cb
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[99f]"></a>lv_event_get_current_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_current_target))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[6c3]"></a>lv_event_get_draw_ctx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_event.o(.text.lv_event_get_draw_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_event_get_draw_ctx
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_list
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_label
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[914]"></a>lv_event_get_indev</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_event.o(.text.lv_event_get_indev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_event_get_indev
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[6dd]"></a>lv_event_get_param</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_param))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[4e1]"></a>lv_event_get_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_target))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_dd_cb
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_cb
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_btn_cb
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;humi_slider_cb
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_btn_cb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_alram_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_click_cb
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_list
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_label
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_close_click_event_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[4e2]"></a>lv_event_get_user_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_user_data))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_close_cb
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_btn_cb
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_cb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_btn_cb
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_btn_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_click_cb
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
</UL>

<P><STRONG><a name="[427]"></a>lv_event_send</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, lv_event.o(.text.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_alpha_test
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_click_reset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
</UL>

<P><STRONG><a name="[898]"></a>lv_event_set_ext_draw_size</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_event.o(.text.lv_event_set_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_event_set_ext_draw_size
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[915]"></a>lv_extra_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_extra.o(.text.lv_extra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_extra_init &rArr; lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[916]"></a>lv_flex_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_flex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[1f3]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lv_font_siyuanheiti_20.o(.rodata.lv_font_siyuanheiti_20)
<LI> lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
<LI> lv_font_montserrat_48.o(.rodata.lv_font_montserrat_48)
<LI> lv_font_montserrat_22.o(.rodata.lv_font_montserrat_22)
<LI> lv_font_montserrat_12.o(.rodata.lv_font_montserrat_12)
</UL>
<P><STRONG><a name="[902]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_font.o(.text.lv_font_get_glyph_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_font_get_glyph_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
</UL>

<P><STRONG><a name="[901]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, lv_font.o(.text.lv_font_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_password_bullet
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
</UL>

<P><STRONG><a name="[1f2]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lv_font_siyuanheiti_20.o(.rodata.lv_font_siyuanheiti_20)
<LI> lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
<LI> lv_font_montserrat_48.o(.rodata.lv_font_montserrat_48)
<LI> lv_font_montserrat_22.o(.rodata.lv_font_montserrat_22)
<LI> lv_font_montserrat_12.o(.rodata.lv_font_montserrat_12)
</UL>
<P><STRONG><a name="[465]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_font.o(.text.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
</UL>

<P><STRONG><a name="[91a]"></a>lv_fs_close</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_fs_close &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[91b]"></a>lv_fs_get_drv</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_get_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[91c]"></a>lv_fs_get_ext</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_fs.o(.text.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_get_ext &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[91d]"></a>lv_fs_open</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lv_fs.o(.text.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_fs_open &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_real_path
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[91f]"></a>lv_fs_read</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_fs_read &rArr; lv_fs_read_cached &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read_cached
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[929]"></a>lv_fs_seek</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[921]"></a>lv_gradient_calculate</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, lv_draw_sw_gradient.o(.text.lv_gradient_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_gradient_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_to32
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
</UL>

<P><STRONG><a name="[6a2]"></a>lv_gradient_cleanup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_draw_sw_gradient.o(.text.lv_gradient_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_gradient_cleanup &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[69c]"></a>lv_gradient_get</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lv_draw_sw_gradient.o(.text.lv_gradient_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_gradient_get &rArr; allocate_item &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_set_cache_size
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_calculate
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterate_cache
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_key
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_item
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[923]"></a>lv_gradient_set_cache_size</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_draw_sw_gradient.o(.text.lv_gradient_set_cache_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_gradient_set_cache_size &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
</UL>

<P><STRONG><a name="[917]"></a>lv_grid_init</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_grid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[924]"></a>lv_group_add_obj</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[83a]"></a>lv_group_focus_next</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_group.o(.text.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[833]"></a>lv_group_focus_obj</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lv_group.o(.text.lv_group_focus_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_group_focus_obj &rArr; lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
</UL>

<P><STRONG><a name="[83b]"></a>lv_group_focus_prev</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_group.o(.text.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[98d]"></a>lv_group_get_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[837]"></a>lv_group_get_editing</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[835]"></a>lv_group_get_focused</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[838]"></a>lv_group_get_obj_count</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_group.o(.text.lv_group_get_obj_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_group_get_obj_count &rArr; _lv_ll_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[926]"></a>lv_group_remove_obj</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[839]"></a>lv_group_send_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_group_send_data &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[548]"></a>lv_group_set_editing</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[8ab]"></a>lv_img_cache_invalidate_src</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_img_cache.o(.text.lv_img_cache_invalidate_src))
<BR><BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_canvas_set_buffer
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_canvas_destructor
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
</UL>

<P><STRONG><a name="[928]"></a>lv_img_cf_get_px_size</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[63a]"></a>lv_img_cf_has_alpha</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_has_alpha))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[639]"></a>lv_img_cf_is_chroma_keyed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_is_chroma_keyed))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[5f1]"></a>lv_img_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_img.o(.text.lv_img_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_img_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
</UL>

<P><STRONG><a name="[f6]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_fs_close &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[f3]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_read &rArr; lv_fs_read_cached &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[f4]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_fs_read &rArr; lv_fs_read_cached &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[f5]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_img_decoder_built_in_line_alpha &rArr; lv_fs_read &rArr; lv_fs_read_cached &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[642]"></a>lv_img_decoder_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_img_decoder.o(.text.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cleanup
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[41b]"></a>lv_img_decoder_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_img_decoder.o(.text.lv_img_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[6a8]"></a>lv_img_decoder_get_info</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lv_img_decoder.o(.text.lv_img_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_decoder_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[419]"></a>lv_img_decoder_open</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, lv_img_decoder.o(.text.lv_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_img_decoder_open &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[641]"></a>lv_img_decoder_read_line</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_img_decoder.o(.text.lv_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_img_decoder_read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[41f]"></a>lv_img_decoder_set_close_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(.text.lv_img_decoder_set_close_cb))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[41c]"></a>lv_img_decoder_set_info_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(.text.lv_img_decoder_set_info_cb))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[41d]"></a>lv_img_decoder_set_open_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(.text.lv_img_decoder_set_open_cb))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[41e]"></a>lv_img_decoder_set_read_line_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(.text.lv_img_decoder_set_read_line_cb))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[5f2]"></a>lv_img_set_src</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, lv_img.o(.text.lv_img_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_img_set_src &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_canvas_set_buffer
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_canvas_constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[6a4]"></a>lv_img_src_get_type</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[932]"></a>lv_indev_drv_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_hal_indev.o(.text.lv_indev_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_drv_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[933]"></a>lv_indev_drv_register</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_hal_indev.o(.text.lv_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_indev_drv_register &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[42e]"></a>lv_indev_get_act</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_2
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_press_handler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_throw_predict_y
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_throw_predict_x
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressed_cell
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_click_reset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[abe]"></a>lv_indev_get_gesture_dir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_gesture_dir))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_2
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
</UL>

<P><STRONG><a name="[7e1]"></a>lv_indev_get_next</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_hal_indev.o(.text.lv_indev_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[75c]"></a>lv_indev_get_obj_act</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_obj_act))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[7f2]"></a>lv_indev_get_point</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_point))
<BR><BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_press_handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressed_cell
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[9ae]"></a>lv_indev_get_scroll_dir</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[543]"></a>lv_indev_get_scroll_obj</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_scroll_obj))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[546]"></a>lv_indev_get_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_press_handler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressed_cell
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[a43]"></a>lv_indev_get_vect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_vect))
<BR><BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[152]"></a>lv_indev_read_timer_cb</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, lv_indev.o(.text.lv_indev_read_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = lv_indev_read_timer_cb &rArr; indev_encoder_proc &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_reset_query_handler
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_indev.o(.text.lv_indev_drv_register)
</UL>
<P><STRONG><a name="[935]"></a>lv_indev_reset</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lv_indev.o(.text.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_indev_reset &rArr; lv_indev_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[89d]"></a>lv_indev_reset_long_press</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_indev.o(.text.lv_indev_reset_long_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_indev_reset_long_press &rArr; lv_tick_get &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[b08]"></a>lv_indev_scroll_throw_predict</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lv_indev_scroll.o(.text.lv_indev_scroll_throw_predict))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_scroll_throw_predict
</UL>
<BR>[Called By]<UL><LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
</UL>

<P><STRONG><a name="[841]"></a>lv_indev_search_obj</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lv_indev.o(.text.lv_indev_search_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + In Cycle
<LI>Call Chain = lv_indev_search_obj &rArr;  lv_indev_search_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[688]"></a>lv_indev_wait_release</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_wait_release))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_click_reset
</UL>

<P><STRONG><a name="[937]"></a>lv_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_init &rArr; lv_extra_init &rArr; lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_thread_entry
</UL>

<P><STRONG><a name="[623]"></a>lv_keyboard_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_keyboard.o(.text.lv_keyboard_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_keyboard_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
</UL>

<P><STRONG><a name="[153]"></a>lv_keyboard_def_event_cb</STRONG> (Thumb, 532 bytes, Stack size 16 bytes, lv_keyboard.o(.text.lv_keyboard_def_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = lv_keyboard_def_event_cb &rArr; lv_textarea_del_char &rArr; insert_handler &rArr; lv_textarea_add_text &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_btn_text
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_one_line
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_keyboard.o(.text.lv_keyboard_constructor)
</UL>
<P><STRONG><a name="[944]"></a>lv_keyboard_set_textarea</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_keyboard.o(.text.lv_keyboard_set_textarea))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lv_keyboard_set_textarea &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
</UL>

<P><STRONG><a name="[404]"></a>lv_label_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
</UL>

<P><STRONG><a name="[94c]"></a>lv_label_get_letter_on</STRONG> (Thumb, 546 bytes, Stack size 104 bytes, lv_label.o(.text.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
</UL>

<P><STRONG><a name="[950]"></a>lv_label_get_letter_pos</STRONG> (Thumb, 456 bytes, Stack size 88 bytes, lv_label.o(.text.lv_label_get_letter_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_label_get_letter_pos &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
</UL>

<P><STRONG><a name="[6b8]"></a>lv_label_get_text</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text))
<BR><BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_label
</UL>

<P><STRONG><a name="[722]"></a>lv_label_get_text_selection_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text_selection_end))
<BR><BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[721]"></a>lv_label_get_text_selection_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text_selection_start))
<BR><BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[951]"></a>lv_label_ins_text</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_ins_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_label_ins_text &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[952]"></a>lv_label_is_char_under_pos</STRONG> (Thumb, 498 bytes, Stack size 88 bytes, lv_label.o(.text.lv_label_is_char_under_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_label_is_char_under_pos &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
</UL>

<P><STRONG><a name="[945]"></a>lv_label_set_long_mode</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_text
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[40f]"></a>lv_label_set_text</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_text
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_update
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;humi_slider_cb
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
</UL>

<P><STRONG><a name="[412]"></a>lv_label_set_text_fmt</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lv_label.o(.text.lv_label_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[960]"></a>lv_label_set_text_sel_end</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_set_text_sel_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_label_set_text_sel_end &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[961]"></a>lv_label_set_text_sel_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_set_text_sel_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_label_set_text_sel_start &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[90e]"></a>lv_label_set_text_static</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_text_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[918]"></a>lv_layout_register</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_layout_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_layout_register &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
</UL>

<P><STRONG><a name="[609]"></a>lv_line_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_line.o(.text.lv_line_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_line_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
</UL>

<P><STRONG><a name="[60a]"></a>lv_line_set_points</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_line.o(.text.lv_line_set_points))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_line_set_points &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
</UL>

<P><STRONG><a name="[5f9]"></a>lv_list_add_btn</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lv_list.o(.text.lv_list_add_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_list_add_btn &rArr; lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
</UL>

<P><STRONG><a name="[5f7]"></a>lv_list_add_text</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_list.o(.text.lv_list_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_list_add_text &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
</UL>

<P><STRONG><a name="[5f5]"></a>lv_list_create</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_list.o(.text.lv_list_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_list_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
</UL>

<P><STRONG><a name="[690]"></a>lv_map</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_math.o(.text.lv_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_overshoot
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_in_out
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
</UL>

<P><STRONG><a name="[440]"></a>lv_mem_alloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_set_text
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_btn_areas_and_controls
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read_cached
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop_internal
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_set_cache_size
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_item
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
</UL>

<P><STRONG><a name="[400]"></a>lv_mem_buf_free_all</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_mem_buf_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_mem_buf_free_all &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[577]"></a>lv_mem_buf_get</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lv_mem.o(.text.lv_mem_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[58e]"></a>lv_mem_buf_release</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_mem_buf_release))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_free
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[413]"></a>lv_mem_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_destructor
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_destructor
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_btn_areas_and_controls
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_destructor
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_destructor
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_destructor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_cleanup
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_destructor
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_destructor
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_destructor
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_destroy
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_set_cache_size
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>

<P><STRONG><a name="[938]"></a>lv_mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[7ec]"></a>lv_mem_realloc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_set_text
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_constructor
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop_internal
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
</UL>

<P><STRONG><a name="[5de]"></a>lv_memcpy</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read_cached
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_cb
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_buffer_copy
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_item
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
</UL>

<P><STRONG><a name="[69e]"></a>lv_memset</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_memset))
<BR><BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[3fe]"></a>lv_memset_00</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_memset_00))
<BR><BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_scale_lines
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_scale
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_needle_line
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_needle_img
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_arc
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_init_ctx
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_btn_areas_and_controls
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_simple
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_adjust
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_set_cache_size
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_item
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[5dc]"></a>lv_memset_ff</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_memset_ff))
<BR><BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_no_aa
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_cb
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[965]"></a>lv_menu_back_btn_is_root</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_menu.o(.text.lv_menu_back_btn_is_root))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
</UL>

<P><STRONG><a name="[967]"></a>lv_menu_clear_history</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_clear_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_menu_clear_history &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
</UL>

<P><STRONG><a name="[96b]"></a>lv_menu_get_cur_main_page</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_menu.o(.text.lv_menu_get_cur_main_page))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
</UL>

<P><STRONG><a name="[96c]"></a>lv_menu_get_cur_sidebar_page</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_menu.o(.text.lv_menu_get_cur_sidebar_page))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
</UL>

<P><STRONG><a name="[966]"></a>lv_menu_set_page</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, lv_menu.o(.text.lv_menu_set_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_menu_set_page &rArr; lv_menu_refr_main_header_mode &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_clear_history
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
</UL>

<P><STRONG><a name="[613]"></a>lv_meter_add_arc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lv_meter.o(.text.lv_meter_add_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_meter_add_arc &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[96d]"></a>lv_meter_add_needle_img</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lv_meter.o(.text.lv_meter_add_needle_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_meter_add_needle_img &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
</UL>

<P><STRONG><a name="[617]"></a>lv_meter_add_needle_line</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lv_meter.o(.text.lv_meter_add_needle_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_meter_add_needle_line &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[60e]"></a>lv_meter_add_scale</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_add_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_meter_add_scale &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[616]"></a>lv_meter_add_scale_lines</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lv_meter.o(.text.lv_meter_add_scale_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_meter_add_scale_lines &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[60d]"></a>lv_meter_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_meter_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[615]"></a>lv_meter_set_indicator_end_value</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_meter.o(.text.lv_meter_set_indicator_end_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_meter_set_indicator_end_value &rArr; inv_arc &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[614]"></a>lv_meter_set_indicator_start_value</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_meter.o(.text.lv_meter_set_indicator_start_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_meter_set_indicator_start_value &rArr; inv_arc &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[618]"></a>lv_meter_set_indicator_value</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_meter.o(.text.lv_meter_set_indicator_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_meter_set_indicator_value &rArr; inv_arc &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_update
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[611]"></a>lv_meter_set_scale_major_ticks</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_set_scale_major_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_meter_set_scale_major_ticks &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[612]"></a>lv_meter_set_scale_range</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_set_scale_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_meter_set_scale_range &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[60f]"></a>lv_meter_set_scale_ticks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_set_scale_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_meter_set_scale_ticks &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[970]"></a>lv_msgbox_close</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_msgbox.o(.text.lv_msgbox_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_msgbox_close &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_close_click_event_cb
</UL>

<P><STRONG><a name="[971]"></a>lv_msgbox_create</STRONG> (Thumb, 580 bytes, Stack size 32 bytes, lv_msgbox.o(.text.lv_msgbox_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = lv_msgbox_create &rArr; lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_max_width
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layer_top
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_box_alarm_up
</UL>

<P><STRONG><a name="[5f4]"></a>lv_obj_add_event_cb</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lv_event.o(.text.lv_obj_add_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
</UL>

<P><STRONG><a name="[5f3]"></a>lv_obj_add_flag</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lv_obj.o(.text.lv_obj_add_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_add_flag &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_set_textarea
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_constructor
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_constructor
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_constructor
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
</UL>

<P><STRONG><a name="[644]"></a>lv_obj_add_state</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lv_obj_add_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_update
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_btn_cb
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[5ed]"></a>lv_obj_add_style</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, lv_obj_style.o(.text.lv_obj_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[410]"></a>lv_obj_align</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_center
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
</UL>

<P><STRONG><a name="[5f6]"></a>lv_obj_align_to</STRONG> (Thumb, 768 bytes, Stack size 56 bytes, lv_obj_pos.o(.text.lv_obj_align_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;humi_slider_cb
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[445]"></a>lv_obj_allocate_spec_attr</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_allocate_spec_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[97a]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[88b]"></a>lv_obj_calculate_ext_draw_size</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_calculate_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[912]"></a>lv_obj_calculate_style_text_align</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_obj_style.o(.text.lv_obj_calculate_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_calculate_style_text_align &rArr; lv_obj_get_style_text_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_align
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bidi_calculate_align
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[b6b]"></a>lv_obj_check_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_check_type))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[889]"></a>lv_obj_class_create_obj</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, lv_obj_class.o(.text.lv_obj_class_create_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_class_create_obj &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_instance_size
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_create
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_create
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_create
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_text
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_create
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_create
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_canvas_create
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_create
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
</UL>

<P><STRONG><a name="[88a]"></a>lv_obj_class_init_obj</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_obj_class.o(.text.lv_obj_class_init_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_create
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_create
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_create
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_text
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_create
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_create
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_canvas_create
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_create
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
</UL>

<P><STRONG><a name="[4e7]"></a>lv_obj_clean</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_obj_tree.o(.text.lv_obj_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lv_obj_clean &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_close_cb
</UL>

<P><STRONG><a name="[87b]"></a>lv_obj_clear_flag</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lv_obj.o(.text.lv_obj_clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_constructor
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_constructor
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_constructor
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_section_constructor
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_cont_constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
</UL>

<P><STRONG><a name="[643]"></a>lv_obj_clear_state</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_clear_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_set_textarea
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_update
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_btn_cb
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[5e6]"></a>lv_obj_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[4dc]"></a>lv_obj_del</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.lv_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_click_cb
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_read_cb
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_destructor
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_close
</UL>

<P><STRONG><a name="[68f]"></a>lv_obj_draw_dsc_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_draw_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_draw_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
</UL>

<P><STRONG><a name="[98a]"></a>lv_obj_enable_style_refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_enable_style_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[6e6]"></a>lv_obj_event_base</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_event.o(.text.lv_obj_event_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_event_base
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[603]"></a>lv_obj_fade_in</STRONG> (Thumb, 90 bytes, Stack size 88 bytes, lv_obj_style.o(.text.lv_obj_fade_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lv_obj_fade_in &rArr; lv_anim_start &rArr; lv_anim_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_ready_cb
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
</UL>

<P><STRONG><a name="[4db]"></a>lv_obj_get_child</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_child))
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_btn_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_click_cb
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_read_cb
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_tab_btns
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_content
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
</UL>

<P><STRONG><a name="[4e6]"></a>lv_obj_get_child_cnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_child_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_close_cb
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_btn_cb
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[92e]"></a>lv_obj_get_click_area</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_click_area
</UL>
<BR>[Calls]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[71e]"></a>lv_obj_get_content_coords</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc
</UL>

<P><STRONG><a name="[573]"></a>lv_obj_get_content_height</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_get_content_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_get_content_height &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
</UL>

<P><STRONG><a name="[570]"></a>lv_obj_get_content_width</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_get_content_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_get_content_width &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_index_from_x
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
</UL>

<P><STRONG><a name="[6e4]"></a>lv_obj_get_coords</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_coords
</UL>
<BR>[Calls]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_get_area
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
</UL>

<P><STRONG><a name="[850]"></a>lv_obj_get_disp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_obj_get_disp &rArr; lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
</UL>

<P><STRONG><a name="[547]"></a>lv_obj_get_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[11d]"></a>lv_obj_get_height</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_height
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slider_horizontal
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.find_track_end)
</UL>
<P><STRONG><a name="[9a6]"></a>lv_obj_get_index</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_obj_tree.o(.text.lv_obj_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_index
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[9a7]"></a>lv_obj_get_local_style_prop</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_get_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_obj_get_local_style_prop &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>

<P><STRONG><a name="[54a]"></a>lv_obj_get_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_btn_cb
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_label
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_close
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_close_click_event_cb
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
</UL>

<P><STRONG><a name="[909]"></a>lv_obj_get_screen</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_obj_tree.o(.text.lv_obj_get_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
</UL>

<P><STRONG><a name="[429]"></a>lv_obj_get_scroll_bottom</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
</UL>

<P><STRONG><a name="[42a]"></a>lv_obj_get_scroll_dir</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[5d8]"></a>lv_obj_get_scroll_end</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_obj_get_scroll_end &rArr; lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
</UL>

<P><STRONG><a name="[423]"></a>lv_obj_get_scroll_left</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
</UL>

<P><STRONG><a name="[422]"></a>lv_obj_get_scroll_right</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_scroll_right &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[430]"></a>lv_obj_get_scroll_snap_x</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_snap_x))
<BR><BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[431]"></a>lv_obj_get_scroll_snap_y</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_snap_y))
<BR><BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[428]"></a>lv_obj_get_scroll_top</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_top))
<BR><BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
</UL>

<P><STRONG><a name="[738]"></a>lv_obj_get_scroll_x</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_x))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressed_cell
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[737]"></a>lv_obj_get_scroll_y</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_y))
<BR><BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressed_cell
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[74e]"></a>lv_obj_get_scrollbar_area</STRONG> (Thumb, 1896 bytes, Stack size 88 bytes, lv_obj_scroll.o(.text.lv_obj_get_scrollbar_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_right &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_mode
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_dir
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_opa
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
</UL>

<P><STRONG><a name="[9a2]"></a>lv_obj_get_scrollbar_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scrollbar_mode))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[580]"></a>lv_obj_get_self_height</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_self_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_self_height &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>

<P><STRONG><a name="[589]"></a>lv_obj_get_self_width</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_self_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
</UL>

<P><STRONG><a name="[5b8]"></a>lv_obj_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_alram_cb
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[44c]"></a>lv_obj_get_style_prop</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, lv_obj_style.o(.text.lv_obj_get_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_has_flag
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_core
</UL>
<BR>[Called By]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_time
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_time
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_pivot_y
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_pivot_x
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_rounded
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_y
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_x
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_y
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_x
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_pivot_y
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_pivot_x
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_width
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_height
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_width
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_height
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_color
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_speed
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_time
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_opa
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_y
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_x
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_width
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_height
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_width
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_height
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_track_place
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_main_place
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_flow
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_cross_place
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_y
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_x
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_row_dsc_array
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_row_align
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_column_dsc_array
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_column_align
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_y_align
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_x_align
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_row_span
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_row_pos
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_column_span
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_column_pos
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_opa
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_align
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_color_filtered
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_color_filtered
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_width
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_rounded
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_opa
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_dash_width
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_dash_gap
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_color_filtered
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_img_recolor_opa
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_img_recolor_filtered
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_img_opa
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_opa
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_color_filtered
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_main_stop
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_tiled
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_src
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_recolor_opa
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_recolor_filtered
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_opa
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_grad_stop
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_grad_dir
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_grad_color_filtered
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_grad
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_dither_mode
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_color_filtered
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_rounded
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_opa
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_img_src
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_color_filtered
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_rounded
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_width
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_opa
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_width
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_height
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_height
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_img_opa
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_time
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_align
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_color_filter_opa
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_color_filter_dsc
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_color
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_opa
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_color
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_color
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
</UL>

<P><STRONG><a name="[863]"></a>lv_obj_get_transformed_area</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, lv_obj_pos.o(.text.lv_obj_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_get_area
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[11e]"></a>lv_obj_get_width</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_width
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slider_horizontal
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.find_track_end)
</UL>
<P><STRONG><a name="[a11]"></a>lv_obj_get_x</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_get_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_get_x &rArr; lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
</UL>

<P><STRONG><a name="[910]"></a>lv_obj_get_y</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_get_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_get_y &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
</UL>

<P><STRONG><a name="[911]"></a>lv_obj_get_y2</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_y2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_y2 &rArr; lv_obj_get_y &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[42f]"></a>lv_obj_has_flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_flag))
<BR><BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_is_open
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_is_bubbled
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_close
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[578]"></a>lv_obj_has_flag_any</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_flag_any))
<BR><BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
</UL>

<P><STRONG><a name="[83e]"></a>lv_obj_has_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_state))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_cb
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
</UL>

<P><STRONG><a name="[936]"></a>lv_obj_hit_test</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lv_obj_pos.o(.text.lv_obj_hit_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_obj_hit_test &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click_area
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>

<P><STRONG><a name="[87e]"></a>lv_obj_init_draw_arc_dsc</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_arc_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_init_draw_arc_dsc &rArr; lv_obj_get_style_arc_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_rounded
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_opa
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_img_src
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_color_filtered
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
</UL>

<P><STRONG><a name="[6ea]"></a>lv_obj_init_draw_img_dsc</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_img_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_init_draw_img_dsc &rArr; lv_obj_get_style_img_recolor_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_img_recolor_opa
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_img_recolor_filtered
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_img_opa
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6b7]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_opa
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_align
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_label
</UL>

<P><STRONG><a name="[6cb]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; lv_obj_get_style_line_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_width
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_rounded
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_opa
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_dash_width
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_dash_gap
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_color_filtered
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
</UL>

<P><STRONG><a name="[6b4]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_color_filtered
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_color_filtered
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_opa
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_color_filtered
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_main_stop
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_tiled
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_src
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_recolor_opa
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_recolor_filtered
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_img_opa
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_grad_stop
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_grad_dir
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_grad_color_filtered
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_grad
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_dither_mode
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_color_filtered
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[447]"></a>lv_obj_invalidate</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_scale_ticks
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_scale_range
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_scale_major_ticks
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_value
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_start_value
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_end_value
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_scale_lines
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_needle_line
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_needle_img
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_arc
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_set_text
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_start_angle
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_end_angle
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_rotation
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_y_anim
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_x_anim
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_anim_ready
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_anim_exec_cb
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_press_handler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_set_hsv
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_color_mode
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[632]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim_cb
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_knob
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[836]"></a>lv_obj_is_editable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj_class.o(.text.lv_obj_is_editable))
<BR><BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[98e]"></a>lv_obj_is_group_def</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj_class.o(.text.lv_obj_is_group_def))
<BR><BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
</UL>

<P><STRONG><a name="[581]"></a>lv_obj_is_layout_positioned</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_is_layout_positioned))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_is_layout_positioned &rArr; lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
</UL>

<P><STRONG><a name="[84b]"></a>lv_obj_is_visible</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[975]"></a>lv_obj_mark_layout_as_dirty</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_mark_layout_as_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_obj_mark_layout_as_dirty &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[446]"></a>lv_obj_move_children_by</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_move_children_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = lv_obj_move_children_by &rArr;  lv_obj_move_children_by (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>

<P><STRONG><a name="[a14]"></a>lv_obj_move_to</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.lv_obj_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[90d]"></a>lv_obj_move_to_index</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.lv_obj_move_to_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_obj_move_to_index &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
</UL>

<P><STRONG><a name="[994]"></a>lv_obj_readjust_scroll</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_readjust_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
</UL>

<P><STRONG><a name="[a15]"></a>lv_obj_redraw</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, lv_refr.o(.text.lv_obj_redraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = lv_obj_redraw &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[865]"></a>lv_obj_refr_pos</STRONG> (Thumb, 602 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.lv_obj_refr_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_obj_refr_pos &rArr; lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_y
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_x
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_y
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_x
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[7bb]"></a>lv_obj_refr_size</STRONG> (Thumb, 648 bytes, Stack size 64 bytes, lv_obj_pos.o(.text.lv_obj_refr_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lv_obj_refr_size &rArr; calc_content_width &rArr; lv_obj_scroll_to_x &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_clamp_width
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_clamp_height
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_width
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_height
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_width
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_height
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
</UL>

<P><STRONG><a name="[895]"></a>lv_obj_refresh_ext_draw_size</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_refresh_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[8ad]"></a>lv_obj_refresh_self_size</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_refresh_self_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_refresh_self_size &rArr; lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_set_text
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[978]"></a>lv_obj_refresh_style</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, lv_obj_style.o(.text.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_part
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_has_flag
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_layer_type
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[791]"></a>lv_obj_remove_local_style_prop</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_remove_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_obj_remove_local_style_prop &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fade_in_anim_ready
</UL>

<P><STRONG><a name="[a1b]"></a>lv_obj_remove_style</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, lv_obj_style.o(.text.lv_obj_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_state
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_part
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
</UL>

<P><STRONG><a name="[a1e]"></a>lv_obj_report_style_change</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_report_style_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[436]"></a>lv_obj_scroll_by</STRONG> (Thumb, 330 bytes, Stack size 96 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_ready_cb
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_path_cb
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[a26]"></a>lv_obj_scroll_by_bounded</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_by_bounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + In Cycle
<LI>Call Chain = lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
</UL>

<P><STRONG><a name="[990]"></a>lv_obj_scroll_to</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_obj_scroll_to &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[9a3]"></a>lv_obj_scroll_to_view_recursive</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_view_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_obj_scroll_to_view_recursive &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[586]"></a>lv_obj_scroll_to_x</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_obj_scroll_to_x &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
</UL>
<BR>[Called By]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[57c]"></a>lv_obj_scroll_to_y</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
</UL>
<BR>[Called By]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[993]"></a>lv_obj_scrollbar_invalidate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_scrollbar_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
</UL>

<P><STRONG><a name="[87c]"></a>lv_obj_set_ext_click_area</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_ext_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_ext_click_area &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[969]"></a>lv_obj_set_flex_align</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_flex.o(.text.lv_obj_set_flex_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_obj_set_flex_align &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_track_place
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_main_place
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_cross_place
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_cont_constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
</UL>

<P><STRONG><a name="[8a6]"></a>lv_obj_set_flex_flow</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_flex_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_obj_set_flex_flow &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_section_constructor
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_cont_constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[8a7]"></a>lv_obj_set_flex_grow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_obj_set_flex_grow &rArr; lv_obj_set_style_flex_grow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[5f8]"></a>lv_obj_set_height</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[968]"></a>lv_obj_set_layout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_set_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_obj_set_layout &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
</UL>

<P><STRONG><a name="[a2f]"></a>lv_obj_set_local_style_prop</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_obj_style.o(.text.lv_obj_set_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_track_place
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_main_place
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_grow
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_flow
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_cross_place
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_min_width
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_max_width
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_base_dir
</UL>

<P><STRONG><a name="[90c]"></a>lv_obj_set_parent</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.lv_obj_set_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_obj_set_parent &rArr; lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
</UL>

<P><STRONG><a name="[620]"></a>lv_obj_set_pos</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
</UL>

<P><STRONG><a name="[a31]"></a>lv_obj_set_scroll_dir</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scroll_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_scroll_dir &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
</UL>

<P><STRONG><a name="[a32]"></a>lv_obj_set_scroll_snap_x</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scroll_snap_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_scroll_snap_x &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
</UL>

<P><STRONG><a name="[a33]"></a>lv_obj_set_scroll_snap_y</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scroll_snap_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_scroll_snap_y &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
</UL>

<P><STRONG><a name="[5ef]"></a>lv_obj_set_scrollbar_mode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scrollbar_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_obj_set_scrollbar_mode &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[5ee]"></a>lv_obj_set_size</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_btn
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
</UL>

<P><STRONG><a name="[979]"></a>lv_obj_set_style_align</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[93a]"></a>lv_obj_set_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_base_dir &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
</UL>

<P><STRONG><a name="[407]"></a>lv_obj_set_style_bg_color</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[a35]"></a>lv_obj_set_style_bg_img_src</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_bg_img_src &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[405]"></a>lv_obj_set_style_bg_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_bg_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[a29]"></a>lv_obj_set_style_flex_cross_place</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_style_flex_cross_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_flex_cross_place &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[a2c]"></a>lv_obj_set_style_flex_flow</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_style_flex_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_flex_flow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
</UL>

<P><STRONG><a name="[a2d]"></a>lv_obj_set_style_flex_grow</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_style_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_flex_grow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
</UL>

<P><STRONG><a name="[a28]"></a>lv_obj_set_style_flex_main_place</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_style_flex_main_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_flex_main_place &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[a2a]"></a>lv_obj_set_style_flex_track_place</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_style_flex_track_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_flex_track_place &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[a2e]"></a>lv_obj_set_style_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>

<P><STRONG><a name="[a2b]"></a>lv_obj_set_style_layout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[974]"></a>lv_obj_set_style_max_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_max_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_max_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
</UL>

<P><STRONG><a name="[a36]"></a>lv_obj_set_style_min_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_min_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_min_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
</UL>

<P><STRONG><a name="[790]"></a>lv_obj_set_style_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fade_anim_cb
</UL>

<P><STRONG><a name="[40b]"></a>lv_obj_set_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_pad_bottom &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[40c]"></a>lv_obj_set_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_pad_left &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[40d]"></a>lv_obj_set_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_pad_right &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[40a]"></a>lv_obj_set_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_pad_top &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[40e]"></a>lv_obj_set_style_text_align</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_text_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[409]"></a>lv_obj_set_style_text_color</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_text_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[5f0]"></a>lv_obj_set_style_text_font</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_text_font &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
</UL>

<P><STRONG><a name="[a37]"></a>lv_obj_set_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
</UL>

<P><STRONG><a name="[a38]"></a>lv_obj_set_style_x</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>

<P><STRONG><a name="[a39]"></a>lv_obj_set_style_y</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>

<P><STRONG><a name="[621]"></a>lv_obj_set_width</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_box_alarm_up
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add_text
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[a30]"></a>lv_obj_set_x</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[4df]"></a>lv_obj_set_y</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_x_cb
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_y_anim
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[7f5]"></a>lv_obj_style_get_selector_part</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_style_get_selector_part))
<BR><BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_core
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[45c]"></a>lv_obj_style_get_selector_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_style_get_selector_state))
<BR><BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_core
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[844]"></a>lv_obj_transform_point</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_transform_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[3f7]"></a>lv_obj_update_layout</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_update_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
</UL>

<P><STRONG><a name="[808]"></a>lv_palette_darken</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_color.o(.text.lv_palette_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_palette_darken &rArr; lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[807]"></a>lv_palette_lighten</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_color.o(.text.lv_palette_lighten))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_palette_lighten &rArr; lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[606]"></a>lv_palette_main</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_color.o(.text.lv_palette_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_palette_main &rArr; lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
</UL>

<P><STRONG><a name="[417]"></a>lv_point_transform</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, lv_area.o(.text.lv_point_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_point_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
</UL>

<P><STRONG><a name="[a3c]"></a>lv_port_disp_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_port_disp.o(.text.lv_port_disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = lv_port_disp_init &rArr; DEMO_InitLcd &rArr; DEMO_InitLcdBackLight &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_thread_entry
</UL>

<P><STRONG><a name="[a3d]"></a>lv_port_indev_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_port_indev.o(.text.lv_port_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = lv_port_indev_init &rArr; DEMO_InitTouch &rArr; GT911_Init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_thread_entry
</UL>

<P><STRONG><a name="[a51]"></a>lv_pow</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lv_math.o(.text.lv_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
</UL>

<P><STRONG><a name="[a41]"></a>lv_roller_set_options</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, lv_roller.o(.text.lv_roller_set_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lv_roller_set_options &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
</UL>

<P><STRONG><a name="[a45]"></a>lv_roller_set_selected</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lv_roller.o(.text.lv_roller_set_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lv_roller_set_selected &rArr; refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>
<BR>[Called By]<UL><LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[5fe]"></a>lv_slider_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_slider_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
</UL>

<P><STRONG><a name="[a50]"></a>lv_spinbox_decrement</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lv_spinbox.o(.text.lv_spinbox_decrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = lv_spinbox_decrement &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
</UL>

<P><STRONG><a name="[a52]"></a>lv_spinbox_increment</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lv_spinbox.o(.text.lv_spinbox_increment))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = lv_spinbox_increment &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
</UL>

<P><STRONG><a name="[a54]"></a>lv_spinbox_step_next</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_spinbox.o(.text.lv_spinbox_step_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = lv_spinbox_step_next &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
</UL>

<P><STRONG><a name="[a53]"></a>lv_spinbox_step_prev</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_spinbox.o(.text.lv_spinbox_step_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = lv_spinbox_step_prev &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
</UL>

<P><STRONG><a name="[45d]"></a>lv_style_get_prop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_style.o(.text.lv_style_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop_inlined
</UL>
<BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_core
</UL>

<P><STRONG><a name="[5e7]"></a>lv_style_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_style.o(.text.lv_style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_style_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
</UL>

<P><STRONG><a name="[b6d]"></a>lv_style_is_empty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[9ef]"></a>lv_style_prop_get_default</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lv_style.o(.text.lv_style_prop_get_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_white
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop_inlined
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop_inlined
</UL>

<P><STRONG><a name="[919]"></a>lv_style_register_prop</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_register_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_style_register_prop &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
</UL>

<P><STRONG><a name="[a1a]"></a>lv_style_remove_prop</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_style_remove_prop &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[a1c]"></a>lv_style_reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_style.o(.text.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_style_reset &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
</UL>

<P><STRONG><a name="[a5e]"></a>lv_style_set_anim_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_anim_time &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a5f]"></a>lv_style_set_arc_color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_arc_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_arc_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a60]"></a>lv_style_set_arc_rounded</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_arc_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_arc_rounded &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a61]"></a>lv_style_set_arc_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_arc_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[5ea]"></a>lv_style_set_bg_color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_bg_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a62]"></a>lv_style_set_bg_grad_color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_bg_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_bg_grad_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a63]"></a>lv_style_set_bg_img_src</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_bg_img_src &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a64]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_bg_opa &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a65]"></a>lv_style_set_border_color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_border_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a66]"></a>lv_style_set_border_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_border_opa &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a67]"></a>lv_style_set_border_post</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_border_post &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a68]"></a>lv_style_set_border_side</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_border_side &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[5eb]"></a>lv_style_set_border_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_border_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a69]"></a>lv_style_set_clip_corner</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_clip_corner &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a6a]"></a>lv_style_set_color_filter_dsc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_color_filter_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_color_filter_dsc &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a6b]"></a>lv_style_set_color_filter_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_color_filter_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_color_filter_opa &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a6c]"></a>lv_style_set_height</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_height &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
</UL>

<P><STRONG><a name="[607]"></a>lv_style_set_line_color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_line_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[608]"></a>lv_style_set_line_rounded</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_line_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_line_rounded &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
</UL>

<P><STRONG><a name="[605]"></a>lv_style_set_line_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_line_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a6d]"></a>lv_style_set_max_height</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_max_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_max_height &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a6e]"></a>lv_style_set_max_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_max_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_max_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a6f]"></a>lv_style_set_outline_color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_outline_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_outline_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a70]"></a>lv_style_set_outline_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_outline_opa &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a71]"></a>lv_style_set_outline_pad</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_outline_pad &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[5ec]"></a>lv_style_set_outline_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_outline_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a76]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_pad_bottom &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_ver
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
</UL>

<P><STRONG><a name="[a77]"></a>lv_style_set_pad_column</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_pad_column &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_gap
</UL>

<P><STRONG><a name="[a73]"></a>lv_style_set_pad_left</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_pad_left &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_hor
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
</UL>

<P><STRONG><a name="[a74]"></a>lv_style_set_pad_right</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_pad_right &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_hor
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
</UL>

<P><STRONG><a name="[a79]"></a>lv_style_set_pad_row</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_pad_row &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_gap
</UL>

<P><STRONG><a name="[a75]"></a>lv_style_set_pad_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_pad_top &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_ver
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
</UL>

<P><STRONG><a name="[44e]"></a>lv_style_set_prop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_style.o(.text.lv_style_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_rounded
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_spread
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_opa
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_ofs_y
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_width
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_height
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[5e8]"></a>lv_style_set_radius</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_radius &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a7d]"></a>lv_style_set_shadow_color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_shadow_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a7e]"></a>lv_style_set_shadow_ofs_y</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_shadow_ofs_y &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a7f]"></a>lv_style_set_shadow_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_shadow_opa &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a80]"></a>lv_style_set_shadow_spread</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_shadow_spread &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a81]"></a>lv_style_set_shadow_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_shadow_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a84]"></a>lv_style_set_text_align</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_text_align &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a85]"></a>lv_style_set_text_color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_text_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a86]"></a>lv_style_set_text_font</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_text_font &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a87]"></a>lv_style_set_text_line_space</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_text_line_space &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a88]"></a>lv_style_set_transform_height</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_transform_height &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a89]"></a>lv_style_set_transform_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_transform_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a8a]"></a>lv_style_set_transition</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a83]"></a>lv_style_set_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_style_gen.o(.text.lv_style_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
</UL>

<P><STRONG><a name="[a8b]"></a>lv_style_transition_dsc_init</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, lv_style.o(.text.lv_style_transition_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_style_transition_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[61b]"></a>lv_switch_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_switch_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_switch_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[60c]"></a>lv_tabview_add_tab</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, lv_tabview.o(.text.lv_tabview_add_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lv_tabview_add_tab &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_tab_btns
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_content
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[60b]"></a>lv_tabview_create</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_tabview.o(.text.lv_tabview_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_tabview_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
</UL>

<P><STRONG><a name="[a93]"></a>lv_tabview_get_content</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_tabview.o(.text.lv_tabview_get_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tabview_get_content
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>

<P><STRONG><a name="[5d7]"></a>lv_tabview_get_tab_act</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_tabview.o(.text.lv_tabview_get_tab_act))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
</UL>

<P><STRONG><a name="[a94]"></a>lv_tabview_get_tab_btns</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_tabview.o(.text.lv_tabview_get_tab_btns))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tabview_get_tab_btns
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>

<P><STRONG><a name="[54c]"></a>lv_tabview_set_act</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lv_tabview.o(.text.lv_tabview_set_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_tab_btns
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_content
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
</UL>

<P><STRONG><a name="[93d]"></a>lv_textarea_add_char</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lv_textarea.o(.text.lv_textarea_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + In Cycle
<LI>Call Chain = lv_textarea_add_char &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_is_accepted
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[847]"></a>lv_textarea_add_text</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, lv_textarea.o(.text.lv_textarea_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + In Cycle
<LI>Call Chain = lv_textarea_add_text &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_max_length
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_accepted_chars
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[a98]"></a>lv_textarea_clear_selection</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_textarea.o(.text.lv_textarea_clear_selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_textarea_clear_selection &rArr; lv_label_set_text_sel_start &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[624]"></a>lv_textarea_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_textarea_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
</UL>

<P><STRONG><a name="[a9b]"></a>lv_textarea_cursor_down</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_cursor_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lv_textarea_cursor_down &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[93f]"></a>lv_textarea_cursor_left</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_cursor_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_textarea_cursor_left &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[940]"></a>lv_textarea_cursor_right</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_cursor_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_textarea_cursor_right &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[a9d]"></a>lv_textarea_cursor_up</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_cursor_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lv_textarea_cursor_up &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[941]"></a>lv_textarea_del_char</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_del_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = lv_textarea_del_char &rArr; insert_handler &rArr; lv_textarea_add_text &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_cut
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char_forward
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[a9e]"></a>lv_textarea_del_char_forward</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_textarea.o(.text.lv_textarea_del_char_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = lv_textarea_del_char_forward &rArr; lv_textarea_del_char &rArr; insert_handler &rArr; lv_textarea_add_text &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[a99]"></a>lv_textarea_get_accepted_chars</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_accepted_chars))
<BR><BR>[Called By]<UL><LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
</UL>

<P><STRONG><a name="[942]"></a>lv_textarea_get_cursor_pos</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_cursor_pos))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char_forward
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[a9a]"></a>lv_textarea_get_max_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_max_length))
<BR><BR>[Called By]<UL><LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
</UL>

<P><STRONG><a name="[93e]"></a>lv_textarea_get_one_line</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_one_line))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[aa0]"></a>lv_textarea_get_password_bullet</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_get_password_bullet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_textarea_get_password_bullet &rArr; lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[59d]"></a>lv_textarea_get_text</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_get_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_textarea_get_text
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_btn_cb
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_is_accepted
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[a4e]"></a>lv_textarea_set_cursor_click_pos</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_set_cursor_click_pos))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[943]"></a>lv_textarea_set_cursor_pos</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_set_cursor_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char_forward
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[625]"></a>lv_textarea_set_one_line</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_textarea.o(.text.lv_textarea_set_one_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lv_textarea_set_one_line &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_min_width
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[629]"></a>lv_textarea_set_password_mode</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_textarea.o(.text.lv_textarea_set_password_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lv_textarea_set_password_mode &rArr; pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
</UL>

<P><STRONG><a name="[627]"></a>lv_textarea_set_placeholder_text</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_textarea.o(.text.lv_textarea_set_placeholder_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_textarea_set_placeholder_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
</UL>

<P><STRONG><a name="[a55]"></a>lv_textarea_set_text</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, lv_textarea.o(.text.lv_textarea_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_max_length
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_accepted_chars
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>

<P><STRONG><a name="[98b]"></a>lv_theme_apply</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_theme.o(.text.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[8d9]"></a>lv_theme_default_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_theme_default.o(.text.lv_theme_default_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_theme_default_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_is_inited
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[8da]"></a>lv_theme_default_init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, lv_theme_default.o(.text.lv_theme_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_theme_default_init &rArr; lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_is_inited
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[8d8]"></a>lv_theme_default_is_inited</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_theme_default_is_inited))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_get
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[747]"></a>lv_theme_get_color_primary</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_theme.o(.text.lv_theme_get_color_primary))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_theme_get_color_primary &rArr; lv_theme_get_from_obj &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_constructor
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
</UL>

<P><STRONG><a name="[aa1]"></a>lv_theme_get_from_obj</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_theme.o(.text.lv_theme_get_from_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_theme_get_from_obj &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
</UL>

<P><STRONG><a name="[3ff]"></a>lv_tick_elaps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_hal_tick.o(.text.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_tick_elaps &rArr; lv_tick_get &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_time_remaining
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_click_reset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[3f5]"></a>lv_tick_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_hal_tick.o(.text.lv_tick_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_tick_get &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_exec
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_click_reset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[3ed]"></a>lv_timer_create</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_timer.o(.text.lv_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>

<P><STRONG><a name="[aa4]"></a>lv_timer_del</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_timer.o(.text.lv_timer_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_timer_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_exec
</UL>

<P><STRONG><a name="[461]"></a>lv_timer_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
</UL>

<P><STRONG><a name="[411]"></a>lv_timer_get_idle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_get_idle))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[a97]"></a>lv_timer_handler</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, lv_timer.o(.text.lv_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_timer_handler &rArr; lv_timer_exec &rArr; lv_timer_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_time_remaining
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>

<P><STRONG><a name="[4da]"></a>lv_timer_pause</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_pause))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>

<P><STRONG><a name="[8dc]"></a>lv_timer_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_timer.o(.text.lv_timer_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_timer_ready &rArr; lv_tick_get &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[43b]"></a>lv_timer_resume</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_resume))
<BR><BR>[Called By]<UL><LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>

<P><STRONG><a name="[6d2]"></a>lv_trigo_sin</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, lv_math.o(.text.lv_trigo_sin))
<BR><BR>[Called By]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_angle_init
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rounded_area
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_3
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_2
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_1
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_quarter_0
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_cos
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_cos
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
</UL>

<P><STRONG><a name="[6a5]"></a>lv_txt_get_size</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, lv_txt.o(.text.lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_height
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[8e3]"></a>lv_txt_get_width</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, lv_txt.o(.text.lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_txt_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[aa9]"></a>lvgl_sn_interface_show</STRONG> (Thumb, 884 bytes, Stack size 48 bytes, lvgl_sn_interface.o(.text.lvgl_sn_interface_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = lvgl_sn_interface_show &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_scale_ticks
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_scale_range
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_scale_major_ticks
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_end_value
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_create
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_scale
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_add_needle_img
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_canvas_set_buffer
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_canvas_create
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_center
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_thread_entry
</UL>

<P><STRONG><a name="[4d2]"></a>mail_alarm_up</STRONG> (Thumb, 268 bytes, Stack size 120 bytes, send_mail.o(.text.mail_alarm_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = mail_alarm_up &rArr; send_mail &rArr; connectHost &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_cb
</UL>

<P><STRONG><a name="[aad]"></a>$Super$$main</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; umqtt_ex_start &rArr; umqtt_start &rArr; umqtt_connect &rArr; umqtt_handle_readpacket &rArr; umqtt_decode &rArr; umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_start
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_init
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_enable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[172]"></a>main_thread_entry</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, components.o(.text.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; umqtt_ex_start &rArr; umqtt_start &rArr; umqtt_connect &rArr; umqtt_handle_readpacket &rArr; umqtt_decode &rArr; umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text.rt_application_init)
</UL>
<P><STRONG><a name="[307]"></a>malloc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, syscall_mem.o(.text.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = malloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_base64Encode
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[5c3]"></a>mkdir</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dfs_posix.o(.text.mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mkdir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_flush_with_buf
</UL>

<P><STRONG><a name="[636]"></a>mktime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctime.o(.text.mktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mktime &rArr; timegm &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_get
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[23f]"></a>mnt_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(.text.mnt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mnt_init &rArr; dfs_mount &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_create
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rti_fn.5)
</UL>
<P><STRONG><a name="[4d1]"></a>mqtt_alarm_up</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, umqtt_sample.o(.text.mqtt_alarm_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = mqtt_alarm_up &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_cb
</UL>

<P><STRONG><a name="[18a]"></a>mqtt_thread1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, umqtt.o(.text.mqtt_thread1))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = mqtt_thread1 &rArr; umqtt_reconnect_callback &rArr; umqtt_connect &rArr; umqtt_handle_readpacket &rArr; umqtt_decode &rArr; umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_reconnect_callback
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_keepalive_callback
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubrec_cycle_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umqtt.o(.text.umqtt_create)
</UL>
<P><STRONG><a name="[4d3]"></a>msg_box_alarm_up</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lvgl_sn_interface.o(.text.msg_box_alarm_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = msg_box_alarm_up &rArr; lv_msgbox_create &rArr; lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_center
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_cb
</UL>

<P><STRONG><a name="[ab8]"></a>msh_auto_complete</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, msh.o(.text.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[ab9]"></a>msh_auto_complete_path</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, msh.o(.text.msh_auto_complete_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[7ae]"></a>msh_exec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, msh.o(.text.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = msh_exec &rArr; msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[abc]"></a>msh_exec_script</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, msh_file.o(.text.msh_exec_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + In Cycle
<LI>Call Chain = msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[255]"></a>msh_help</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, msh.o(.text.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[47f]"></a>msh_isint</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, msh_parse.o(.text.msh_isint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msh_isint &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
</UL>

<P><STRONG><a name="[aca]"></a>netdev_cmd_ping</STRONG> (Thumb, 420 bytes, Stack size 72 bytes, netdev.o(.text.netdev_cmd_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = netdev_cmd_ping &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ping
</UL>

<P><STRONG><a name="[274]"></a>netdev_dns</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, netdev.o(.text.netdev_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = netdev_dns &rArr; netdev_set_dns &rArr; netdev_set_dns_server &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[4c6]"></a>netdev_family_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netdev.o(.text.netdev_family_get))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>

<P><STRONG><a name="[4c3]"></a>netdev_get_by_family</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, netdev.o(.text.netdev_get_by_family))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netdev_get_by_family
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_check_network
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
</UL>

<P><STRONG><a name="[acd]"></a>netdev_get_by_ipaddr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, netdev.o(.text.netdev_get_by_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_get_by_ipaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
</UL>

<P><STRONG><a name="[773]"></a>netdev_get_by_name</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, netdev.o(.text.netdev_get_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netdev_get_by_name
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_add
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[ac6]"></a>netdev_get_first_by_flags</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, netdev.o(.text.netdev_get_first_by_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_gethostbyname
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_getaddrinfo
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[272]"></a>netdev_ifconfig</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, netdev.o(.text.netdev_ifconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = netdev_ifconfig &rArr; netdev_set_if &rArr; netdev_set_netmask &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[5d5]"></a>netdev_inet_pton</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, netdev_ipaddr.o(.text.netdev_inet_pton))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = netdev_inet_pton &rArr; netdev_ip4addr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectHost
</UL>

<P><STRONG><a name="[51e]"></a>netdev_ip4addr_aton</STRONG> (Thumb, 564 bytes, Stack size 36 bytes, netdev_ipaddr.o(.text.netdev_ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netdev_ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_inet_pton
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_ping
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[776]"></a>netdev_ip4addr_ntoa</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, netdev_ipaddr.o(.text.netdev_ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = netdev_ip4addr_ntoa &rArr; netdev_ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dns_server
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
</UL>

<P><STRONG><a name="[ad0]"></a>netdev_ip4addr_ntoa_r</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, netdev_ipaddr.o(.text.netdev_ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netdev_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
</UL>

<P><STRONG><a name="[76b]"></a>netdev_low_level_set_dhcp_status</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, netdev.o(.text.netdev_low_level_set_dhcp_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netdev_low_level_set_dhcp_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dhcp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
</UL>

<P><STRONG><a name="[76a]"></a>netdev_low_level_set_dns_server</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netdev.o(.text.netdev_low_level_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netdev_low_level_set_dns_server
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dns_server
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
</UL>

<P><STRONG><a name="[767]"></a>netdev_low_level_set_gw</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, netdev.o(.text.netdev_low_level_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = netdev_low_level_set_gw &rArr; sal_check_netdev_internet_up &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
</UL>

<P><STRONG><a name="[5aa]"></a>netdev_low_level_set_internet_status</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, netdev.o(.text.netdev_low_level_set_internet_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netdev_low_level_set_internet_status
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
</UL>

<P><STRONG><a name="[769]"></a>netdev_low_level_set_ipaddr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, netdev.o(.text.netdev_low_level_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = netdev_low_level_set_ipaddr &rArr; sal_check_netdev_internet_up &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
</UL>

<P><STRONG><a name="[770]"></a>netdev_low_level_set_link_status</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, netdev.o(.text.netdev_low_level_set_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = netdev_low_level_set_link_status &rArr; sal_check_netdev_internet_up &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
</UL>

<P><STRONG><a name="[768]"></a>netdev_low_level_set_netmask</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, netdev.o(.text.netdev_low_level_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = netdev_low_level_set_netmask &rArr; sal_check_netdev_internet_up &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
</UL>

<P><STRONG><a name="[76f]"></a>netdev_low_level_set_status</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, netdev.o(.text.netdev_low_level_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netdev_low_level_set_status &rArr; netdev_auto_change_default &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_up
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_down
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
</UL>

<P><STRONG><a name="[275]"></a>netdev_netstat</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, netdev.o(.text.netdev_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = netdev_netstat &rArr; netdev_cmd_netstat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[273]"></a>netdev_ping</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netdev.o(.text.netdev_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = netdev_ping &rArr; netdev_cmd_ping &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[775]"></a>netdev_register</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, netdev.o(.text.netdev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = netdev_register &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_add
</UL>

<P><STRONG><a name="[ac7]"></a>netdev_set_default</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, netdev.o(.text.netdev_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netdev_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[ad4]"></a>netdev_set_dns_server</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, netdev.o(.text.netdev_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = netdev_set_dns_server &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[ad5]"></a>netdev_set_gw</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, netdev.o(.text.netdev_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = netdev_set_gw &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[ad6]"></a>netdev_set_ipaddr</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netdev.o(.text.netdev_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = netdev_set_ipaddr &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[ad7]"></a>netdev_set_netmask</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, netdev.o(.text.netdev_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = netdev_set_netmask &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[ad9]"></a>ntp_get_time</STRONG> (Thumb, 552 bytes, Stack size 136 bytes, ntp.o(.text.ntp_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</UL>

<P><STRONG><a name="[5c8]"></a>ntp_sync_to_rtc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ntp.o(.text.ntp_sync_to_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ntp_sync_to_rtc &rArr; ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_work_func
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ntp_sync
</UL>

<P><STRONG><a name="[48f]"></a>open</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dfs_posix.o(.text.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_rotate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_flush_with_buf
</UL>

<P><STRONG><a name="[5a1]"></a>opendir</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dfs_posix.o(.text.opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = opendir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[5ff]"></a>para_update</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, lvgl_sn_interface.o(.text.para_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = para_update &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_set_text
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_value
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_value
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_btn_cb
</UL>

<P><STRONG><a name="[ae4]"></a>poll</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, poll.o(.text.poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_table_init
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>
<BR>[Called By]<UL><LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[5ca]"></a>read</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfs_posix.o(.text.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = read &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
</UL>

<P><STRONG><a name="[681]"></a>readdir</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dfs_posix.o(.text.readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = readdir &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[244]"></a>reboot</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.reboot))
<BR><BR>[Calls]<UL><LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[5d6]"></a>recv</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, net_sockets.o(.text.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectHost
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_recv
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_wait_server_ack
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_send_cmd_wait_server_ack
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_pasv_mode
</UL>

<P><STRONG><a name="[adb]"></a>recvfrom</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, net_sockets.o(.text.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = recvfrom &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
</UL>

<P><STRONG><a name="[5c7]"></a>rename</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dfs_posix.o(.text.rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[abb]"></a>rewinddir</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_posix.o(.text.rewinddir))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rewinddir &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[b09]"></a>rt_application_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, components.o(.text.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[4bd]"></a>rt_calloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, kservice.o(.text.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_put
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_start_delay_work
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_add
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_device_class_register
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_qos2_msg
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[b0a]"></a>rt_completion_done</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, completion.o(.text.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[b0c]"></a>rt_completion_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, completion.o(.text.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_completion_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[48b]"></a>rt_completion_wait</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, completion.o(.text.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_completion_wait &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>

<P><STRONG><a name="[b1c]"></a>rt_components_board_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, components.o(.text.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[ab0]"></a>rt_components_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, components.o(.text.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[491]"></a>rt_console_get_device</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kservice.o(.text.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
</UL>

<P><STRONG><a name="[b0f]"></a>rt_console_set_device</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kservice.o(.text.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[50f]"></a>rt_device_close</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, device.o(.text.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
</UL>

<P><STRONG><a name="[651]"></a>rt_device_control</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, device.o(.text.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timestamp
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp
</UL>

<P><STRONG><a name="[506]"></a>rt_device_find</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, device.o(.text.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timestamp
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>

<P><STRONG><a name="[507]"></a>rt_device_open</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, device.o(.text.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[b15]"></a>rt_device_pin_register</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, pin.o(.text.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[500]"></a>rt_device_read</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, device.o(.text.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar_rx_ind
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar_rx_ind
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[b16]"></a>rt_device_register</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, device.o(.text.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_init
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>

<P><STRONG><a name="[4f9]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(.text.rt_device_set_rx_indicate))
<BR><BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[492]"></a>rt_device_write</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, device.o(.text.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_utils_send
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
</UL>

<P><STRONG><a name="[4a6]"></a>rt_enter_critical</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scheduler.o(.text.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_work_completion
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
</UL>

<P><STRONG><a name="[51b]"></a>rt_event_create</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ipc.o(.text.rt_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
</UL>

<P><STRONG><a name="[77b]"></a>rt_event_recv</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, ipc.o(.text.rt_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_event_recv &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_event_recv
</UL>

<P><STRONG><a name="[77d]"></a>rt_event_send</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ipc.o(.text.rt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_event_send
</UL>

<P><STRONG><a name="[4a8]"></a>rt_exit_critical</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, scheduler.o(.text.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_work_completion
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
</UL>

<P><STRONG><a name="[8]"></a>rt_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, kservice.o(.text.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_free
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_freeaddrinfo
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_node_delete
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_all_delete
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_delete
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_destroy
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qos2_publish_delete
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_qos2_msg
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file_data
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data.global_hooks)
</UL>
<P><STRONG><a name="[b19]"></a>rt_hw_board_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, board.o(.text.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = rt_hw_board_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_uart_pins_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_pins_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_i2c_pins_init
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitSemcPins
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[b1f]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(.text.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
</UL>

<P><STRONG><a name="[2b0]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, cpuport.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[239]"></a>rt_hw_lcd_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_lcd.o(.text.rt_hw_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_hw_lcd_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[230]"></a>rt_hw_pin_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_gpio.o(.text.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[b1d]"></a>rt_hw_serial_isr</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, serial.o(.text.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = rt_hw_serial_isr &rArr; _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[b1e]"></a>rt_hw_serial_register</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, serial.o(.text.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[498]"></a>rt_hw_stack_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cpuport.o(.text.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[231]"></a>rt_hw_uart_init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, drv_uart.o(.text.rt_hw_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_hw_uart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[23b]"></a>rt_i2c_core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_core.o(.text.rt_i2c_core_init))
<BR>[Address Reference Count : 1]<UL><LI> i2c_core.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[384]"></a>rt_interrupt_enter</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_16_31_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_0_15_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_16_31_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_0_15_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_16_31_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_0_15_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIF_IRQHandler
</UL>

<P><STRONG><a name="[684]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[386]"></a>rt_interrupt_leave</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_16_31_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_0_15_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_16_31_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_0_15_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_16_31_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_0_15_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIF_IRQHandler
</UL>

<P><STRONG><a name="[338]"></a>rt_kprintf</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, kservice.o(.text.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_data_parse
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnt_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_entry
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_LPI2C_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_umount
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwd
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigTouchIntPin
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wget
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_flush_with_buf
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ping
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_netstat
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>

<P><STRONG><a name="[b20]"></a>rt_kputs</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kservice.o(.text.rt_kputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_kputs &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[7]"></a>rt_malloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kservice.o(.text.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_alloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnt_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file_data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data.global_hooks)
</UL>
<P><STRONG><a name="[5a9]"></a>rt_memcmp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, kservice.o(.text.rt_memcmp))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[471]"></a>rt_memcpy</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, kservice.o(.text.rt_memcpy))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_control
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_realloc
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_read
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_output_with_buf
</UL>

<P><STRONG><a name="[46b]"></a>rt_memheap_alloc</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, memheap.o(.text.rt_memheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_alloc
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
</UL>

<P><STRONG><a name="[46e]"></a>rt_memheap_free</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, memheap.o(.text.rt_memheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_free
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_unlink
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
</UL>

<P><STRONG><a name="[669]"></a>rt_memheap_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, memheap.o(.text.rt_memheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_create
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[470]"></a>rt_memheap_realloc</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, memheap.o(.text.rt_memheap_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_next_ptr
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
</UL>

<P><STRONG><a name="[7af]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, kservice.o(.text.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[369]"></a>rt_memset</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, kservice.o(.text.rt_memset))
<BR><BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_cb
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_create
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rtc_control
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubrec_cycle_callback
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_wait_server_ack
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file_data
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_send_cmd_wait_server_ack
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_pasv_mode
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdszero
</UL>

<P><STRONG><a name="[b22]"></a>rt_mq_create</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ipc.o(.text.rt_mq_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
</UL>

<P><STRONG><a name="[b23]"></a>rt_mq_delete</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ipc.o(.text.rt_mq_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_mq_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_delete
</UL>

<P><STRONG><a name="[b24]"></a>rt_mq_recv</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, ipc.o(.text.rt_mq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_mq_recv &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
</UL>

<P><STRONG><a name="[b25]"></a>rt_mq_send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ipc.o(.text.rt_mq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
</UL>

<P><STRONG><a name="[b26]"></a>rt_mq_send_wait</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, ipc.o(.text.rt_mq_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_mq_send_wait &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>

<P><STRONG><a name="[4c7]"></a>rt_mutex_create</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ipc.o(.text.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[50e]"></a>rt_mutex_delete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ipc.o(.text.rt_mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_delete
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[3e0]"></a>rt_mutex_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipc.o(.text.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
</UL>

<P><STRONG><a name="[3e2]"></a>rt_mutex_release</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, ipc.o(.text.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_send
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connect_status
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubrec_cycle_callback
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_one_pubrec_msg
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_pubrec_msg
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
</UL>

<P><STRONG><a name="[3de]"></a>rt_mutex_take</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, ipc.o(.text.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_send
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connect_status
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubrec_cycle_callback
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_one_pubrec_msg
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_pubrec_msg
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>

<P><STRONG><a name="[b18]"></a>rt_object_allocate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, object.o(.text.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[b13]"></a>rt_object_delete</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, object.o(.text.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
</UL>

<P><STRONG><a name="[66a]"></a>rt_object_detach</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, object.o(.text.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_create
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[b14]"></a>rt_object_find</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, object.o(.text.rt_object_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[46c]"></a>rt_object_get_information</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, object.o(.text.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_alloc
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[b17]"></a>rt_object_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, object.o(.text.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
</UL>

<P><STRONG><a name="[b12]"></a>rt_object_is_systemobject</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[47e]"></a>rt_pin_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pin.o(.text.rt_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
</UL>

<P><STRONG><a name="[480]"></a>rt_pin_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pin.o(.text.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_init
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[481]"></a>rt_pin_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pin.o(.text.rt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
</UL>

<P><STRONG><a name="[482]"></a>rt_pin_write</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pin.o(.text.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_control
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9]"></a>rt_realloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text.rt_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_realloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_set_info
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data.global_hooks)
</UL>
<P><STRONG><a name="[4fd]"></a>rt_ringbuffer_create</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ringbuffer.o(.text.rt_ringbuffer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_ringbuffer_create &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
</UL>

<P><STRONG><a name="[b2a]"></a>rt_ringbuffer_data_len</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ringbuffer.o(.text.rt_ringbuffer_data_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>

<P><STRONG><a name="[4fb]"></a>rt_ringbuffer_destroy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ringbuffer.o(.text.rt_ringbuffer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_ringbuffer_destroy &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
</UL>

<P><STRONG><a name="[5bc]"></a>rt_ringbuffer_getchar</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ringbuffer.o(.text.rt_ringbuffer_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ringbuffer_getchar &rArr; rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar
</UL>

<P><STRONG><a name="[b29]"></a>rt_ringbuffer_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ringbuffer.o(.text.rt_ringbuffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
</UL>

<P><STRONG><a name="[5bd]"></a>rt_ringbuffer_put_force</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ringbuffer.o(.text.rt_ringbuffer_put_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ringbuffer_put_force &rArr; rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar_rx_ind
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar_rx_ind
</UL>

<P><STRONG><a name="[3da]"></a>rt_schedule</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, scheduler.o(.text.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[49b]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[494]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[503]"></a>rt_sem_control</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text.rt_sem_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_sem_control &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
</UL>

<P><STRONG><a name="[36a]"></a>rt_sem_create</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ipc.o(.text.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
</UL>

<P><STRONG><a name="[4ca]"></a>rt_sem_delete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ipc.o(.text.rt_sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
</UL>

<P><STRONG><a name="[4fa]"></a>rt_sem_detach</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ipc.o(.text.rt_sem_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_sem_detach &rArr; _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
</UL>

<P><STRONG><a name="[4fc]"></a>rt_sem_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ipc.o(.text.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
</UL>

<P><STRONG><a name="[394]"></a>rt_sem_release</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_rx_ind
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closed_notice_cb
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar_rx_ind
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar_rx_ind
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_work_completion
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIF_IRQHandler
</UL>

<P><STRONG><a name="[502]"></a>rt_sem_take</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fb_flush
</UL>

<P><STRONG><a name="[4a7]"></a>rt_sem_trytake</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ipc.o(.text.rt_sem_trytake))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_work_completion
</UL>

<P><STRONG><a name="[4b0]"></a>rt_set_errno</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, kservice.o(.text.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_write
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[b33]"></a>rt_show_version</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(.text.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[4c9]"></a>rt_snprintf</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, kservice.o(.text.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_ipstr
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;humi_slider_cb
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_rotate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_flush_with_buf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
</UL>

<P><STRONG><a name="[4d0]"></a>rt_sprintf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kservice.o(.text.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_data_parse
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_cb
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_btn_cb
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[476]"></a>rt_strcmp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, kservice.o(.text.rt_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_lookup
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
</UL>

<P><STRONG><a name="[bb0]"></a>rt_strcpy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, kservice.o(.text.rt_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[65f]"></a>rt_strdup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text.rt_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[47c]"></a>rt_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kservice.o(.text.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_control
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_domain_resolve
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_get
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_rotate
</UL>

<P><STRONG><a name="[518]"></a>rt_strncmp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, kservice.o(.text.rt_strncmp))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_control
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[4be]"></a>rt_strncpy</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, kservice.o(.text.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_init
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_domain_resolve
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_getdents
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_qos2_msg
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>

<P><STRONG><a name="[5be]"></a>rt_strstr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, kservice.o(.text.rt_strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[b1b]"></a>rt_system_heap_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, kservice.o(.text.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_system_heap_init &rArr; rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock_init
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[b35]"></a>rt_system_scheduler_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[b37]"></a>rt_system_scheduler_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[b39]"></a>rt_system_timer_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[b4c]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[3d1]"></a>rt_thread_control</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>

<P><STRONG><a name="[4d5]"></a>rt_thread_create</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, thread.o(.text.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_start
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[b11]"></a>rt_thread_defunct_dequeue</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, idle.o(.text.rt_thread_defunct_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_thread_defunct_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[495]"></a>rt_thread_defunct_enqueue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, idle.o(.text.rt_thread_defunct_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_thread_defunct_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[511]"></a>rt_thread_delay</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closesocket
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_init
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>

<P><STRONG><a name="[5bb]"></a>rt_thread_delete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_stop
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_delete
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_control
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_reconnect_callback
</UL>

<P><STRONG><a name="[b3a]"></a>rt_thread_detach</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[b3e]"></a>rt_thread_idle_init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, idle.o(.text.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[aab]"></a>rt_thread_init</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, thread.o(.text.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_thread_init
</UL>

<P><STRONG><a name="[4cf]"></a>rt_thread_mdelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_cb
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_reset
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_domain_resolve
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_thread1
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_thread
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_thread_entry
</UL>

<P><STRONG><a name="[3d8]"></a>rt_thread_resume</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>

<P><STRONG><a name="[3d0]"></a>rt_thread_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread.o(.text.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_table_init
</UL>

<P><STRONG><a name="[b3d]"></a>rt_thread_sleep</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[4d6]"></a>rt_thread_startup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_start
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_thread_init
</UL>

<P><STRONG><a name="[3e7]"></a>rt_thread_suspend</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[501]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closesocket
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_work_func
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_auto_sync_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dns_server
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dhcp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_close
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readpacket
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[4b9]"></a>rt_tick_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_cb
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rtc_control
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_reconnect_callback
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readpacket
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_keepalive_callback
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubrec_cycle_callback
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_pubrec_msg
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>

<P><STRONG><a name="[aa3]"></a>rt_tick_get_millisecond</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_get_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>

<P><STRONG><a name="[3cd]"></a>rt_tick_increase</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_tick_increase &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b3f]"></a>rt_timer_check</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, timer.o(.text.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[4a2]"></a>rt_timer_control</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_timer_control
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[b42]"></a>rt_timer_create</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, timer.o(.text.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
</UL>

<P><STRONG><a name="[b43]"></a>rt_timer_delete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_timer_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_delete
</UL>

<P><STRONG><a name="[3d5]"></a>rt_timer_detach</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[499]"></a>rt_timer_init</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[4a3]"></a>rt_timer_start</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_start &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[4a1]"></a>rt_timer_stop</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_stop
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_delete
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_thread
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_reconnect_callback
</UL>

<P><STRONG><a name="[469]"></a>rt_vsnprintf</STRONG> (Thumb, 862 bytes, Stack size 64 bytes, kservice.o(.text.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[b34]"></a>rt_vsprintf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kservice.o(.text.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[778]"></a>rt_work_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, workqueue.o(.text.rt_work_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_work_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_auto_sync_init
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_start_delay_work
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[779]"></a>rt_work_submit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, workqueue.o(.text.rt_work_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_work_func
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_auto_sync_init
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_start_delay_work
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[b47]"></a>rt_workqueue_create</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, workqueue.o(.text.rt_workqueue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_sys_workqueue_init
</UL>

<P><STRONG><a name="[b46]"></a>rt_workqueue_submit_work</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, workqueue.o(.text.rt_workqueue_submit_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
</UL>

<P><STRONG><a name="[484]"></a>rt_wqueue_add</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, waitqueue.o(.text.rt_wqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_wqueue_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
</UL>

<P><STRONG><a name="[ae9]"></a>rt_wqueue_remove</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, waitqueue.o(.text.rt_wqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_wqueue_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
</UL>

<P><STRONG><a name="[51c]"></a>rt_wqueue_wakeup</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, waitqueue.o(.text.rt_wqueue_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_wqueue_wakeup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
</UL>

<P><STRONG><a name="[323]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(.text.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4ab]"></a>sal_accept</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, sal_socket.o(.text.sal_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sal_accept &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[774]"></a>sal_at_netdev_set_pf_info</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, af_inet_at.o(.text.sal_at_netdev_set_pf_info))
<BR><BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_add
</UL>

<P><STRONG><a name="[541]"></a>sal_bind</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sal_socket.o(.text.sal_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sal_bind &rArr; netdev_get_by_ipaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sockaddr_to_ipaddr
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[ad1]"></a>sal_check_netdev_internet_up</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sal_socket.o(.text.sal_check_netdev_internet_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sal_check_netdev_internet_up &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
</UL>

<P><STRONG><a name="[4b1]"></a>sal_closesocket</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sal_socket.o(.text.sal_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_close
</UL>

<P><STRONG><a name="[5d2]"></a>sal_connect</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sal_socket.o(.text.sal_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sal_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[7c1]"></a>sal_freeaddrinfo</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sal_socket.o(.text.sal_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sal_freeaddrinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
</UL>

<P><STRONG><a name="[524]"></a>sal_get_socket</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sal_socket.o(.text.sal_get_socket))
<BR><BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_setsockopt
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_connect
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_poll
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_poll
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>

<P><STRONG><a name="[802]"></a>sal_getaddrinfo</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, sal_socket.o(.text.sal_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sal_getaddrinfo &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
</UL>

<P><STRONG><a name="[804]"></a>sal_gethostbyname</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sal_socket.o(.text.sal_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sal_gethostbyname &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[23e]"></a>sal_init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sal_socket.o(.text.sal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sal_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_socket.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[664]"></a>sal_ioctlsocket</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sal_socket.o(.text.sal_ioctlsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sal_ioctlsocket
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_ioctl
</UL>

<P><STRONG><a name="[665]"></a>sal_poll</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sal_socket.o(.text.sal_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sal_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
</UL>

<P><STRONG><a name="[666]"></a>sal_recvfrom</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sal_socket.o(.text.sal_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sal_recvfrom
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_read
</UL>

<P><STRONG><a name="[667]"></a>sal_sendto</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sal_socket.o(.text.sal_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sal_sendto
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_write
</UL>

<P><STRONG><a name="[b52]"></a>sal_setsockopt</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sal_socket.o(.text.sal_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sal_setsockopt
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[b53]"></a>sal_socket</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, sal_socket.o(.text.sal_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[b57]"></a>select</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, select.o(.text.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = select &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdszero
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_wait_server_ack
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file_data
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_send_cmd_wait_server_ack
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_pasv_mode
</UL>

<P><STRONG><a name="[876]"></a>send</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, net_sockets.o(.text.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = send &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendmail
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_send
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file_data
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_send_cmd_wait_server_ack
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_pasv_mode
</UL>

<P><STRONG><a name="[aac]"></a>send_mail</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, send_mail.o(.text.send_mail))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = send_mail &rArr; connectHost &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utl_base64_encode
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendmail
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectHost
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_alarm_up
</UL>

<P><STRONG><a name="[b59]"></a>sendmail</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, send_mail.o(.text.sendmail))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = sendmail &rArr; getResponse &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
</UL>

<P><STRONG><a name="[b5a]"></a>sendto</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, net_sockets.o(.text.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sendto &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send_command
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto_ntp_server
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
</UL>

<P><STRONG><a name="[637]"></a>set_timestamp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtc.o(.text.set_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = set_timestamp &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[b5f]"></a>setsockopt</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net_sockets.o(.text.setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = setsockopt &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_setsockopt
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[5d4]"></a>socket</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, net_sockets.o(.text.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectHost
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpclient
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpserv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserv
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_connect
</UL>

<P><STRONG><a name="[4b3]"></a>stat</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_posix.o(.text.stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = stat &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access
</UL>

<P><STRONG><a name="[245]"></a>tcpclient</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, main.o(.text.tcpclient))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcpclient &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[7d9]"></a>time</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ctime.o(.text.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = time &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[659]"></a>timegm</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, ctime.o(.text.timegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timegm &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_rtc_init
</UL>

<P><STRONG><a name="[167]"></a>timer_cb</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, lvgl_sn_interface.o(.text.timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = timer_cb &rArr; dev_status_update &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_end_value
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_update
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.lvgl_sn_interface_show)
</UL>
<P><STRONG><a name="[805]"></a>tz_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctime.o(.text.tz_get))
<BR><BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL>

<P><STRONG><a name="[b6e]"></a>udp_data_process</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, udp_server.o(.text.udp_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = udp_data_process &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
</UL>

<P><STRONG><a name="[b69]"></a>udp_send_command</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, udp_server.o(.text.udp_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = udp_send_command &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_cb
</UL>

<P><STRONG><a name="[247]"></a>udpclient</STRONG> (Thumb, 288 bytes, Stack size 184 bytes, main.o(.text.udpclient))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = udpclient &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[24a]"></a>udptest</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, udp_server.o(.text.udptest))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = udptest &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp_server.o(FSymTab)
</UL>
<P><STRONG><a name="[185]"></a>udptest_entry</STRONG> (Thumb, 544 bytes, Stack size 4232 bytes, udp_server.o(.text.udptest_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = udptest_entry &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_process
<LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dev_index
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp_server.o(.text.udptest)
</UL>
<P><STRONG><a name="[b70]"></a>ulog_backend_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ulog.o(.text.ulog_backend_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ulog_backend_register &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_init
</UL>

<P><STRONG><a name="[236]"></a>ulog_console_backend_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, console_be.o(.text.ulog_console_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ulog_console_backend_init &rArr; ulog_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[186]"></a>ulog_console_backend_output</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, console_be.o(.text.ulog_console_backend_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ulog_console_backend_output &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(.text.ulog_console_backend_init)
</UL>
<P><STRONG><a name="[aaf]"></a>ulog_file_backend_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_be.o(.text.ulog_file_backend_enable))
<BR><BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[aae]"></a>ulog_file_backend_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, file_be.o(.text.ulog_file_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ulog_file_backend_init &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b73]"></a>ulog_formater</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, ulog.o(.text.ulog_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[232]"></a>ulog_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ulog.o(.text.ulog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ulog_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ulog.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[3b6]"></a>ulog_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ulog.o(.text.ulog_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_set_info
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_end_sign
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_socket
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setsockopt
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sendto
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getsockopt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_connect
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_put
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alram_timer_cb
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_control
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_callback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_topic_recv_callback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_unsubscribe
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_subscribe
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_stop
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_publish
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_alarm_up
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_btn_cb
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_change_path
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_upload
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest_entry
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send_command
<LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_process
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_start
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udptest
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_busy_s_func
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_busy_p_func
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_wifi_info_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_up
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_down
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dns_server
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dhcp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_addr_info
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_ping
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_add
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_device_class_register
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_control
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_func
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_close_func
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_send
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_connect
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_close
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_domain_resolve
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_write
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connack_decode
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_connect
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_decode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_thread
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readpacket
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_disconnect
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qos2_publish_delete
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubrec_cycle_callback
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_qos2_msg
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_pubrec_msg
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_wait_server_ack
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file_data
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_send_cmd_wait_server_ack
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_pasv_mode
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_thread_init
</UL>

<P><STRONG><a name="[777]"></a>ulog_raw</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ulog.o(.text.ulog_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ulog_raw &rArr; output_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_netstat
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[b74]"></a>ulog_strcpy</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ulog.o(.text.ulog_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[b76]"></a>ulog_voutput</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ulog.o(.text.ulog_voutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>

<P><STRONG><a name="[b7f]"></a>umqtt_control</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, umqtt.o(.text.umqtt_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = umqtt_control &rArr; umqtt_disconnect &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_disconnect
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_start
</UL>

<P><STRONG><a name="[b81]"></a>umqtt_create</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, umqtt.o(.text.umqtt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = umqtt_create &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_delete
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_check_def_info
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_start
</UL>

<P><STRONG><a name="[b85]"></a>umqtt_decode</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, umqtt_pkgs_decode.o(.text.umqtt_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = umqtt_decode &rArr; umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsuback_decode
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_suback_decode
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readChar
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish_decode
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_puback_decode
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connack_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
</UL>

<P><STRONG><a name="[b84]"></a>umqtt_delete</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, umqtt.o(.text.umqtt_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = umqtt_delete &rArr; rt_timer_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_stop
</UL>

<P><STRONG><a name="[af5]"></a>umqtt_encode</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, umqtt_pkgs_encode.o(.text.umqtt_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = umqtt_encode &rArr; umqtt_unsubscribe_encode &rArr; MQTTSerialize_unsubscribe &rArr; MQTTSerialize_unsubscribeLength &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe_encode
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe_encode
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pubrel_encode
<LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish_encode
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pubcomp_encode
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_puback_encode
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pingreq_encode
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_disconnect_encode
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_keepalive_callback
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_disconnect
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubrec_cycle_callback
</UL>

<P><STRONG><a name="[24b]"></a>umqtt_ex_start</STRONG> (Thumb, 284 bytes, Stack size 96 bytes, umqtt_sample.o(.text.umqtt_ex_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = umqtt_ex_start &rArr; umqtt_start &rArr; umqtt_connect &rArr; umqtt_handle_readpacket &rArr; umqtt_decode &rArr; umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_control
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umqtt_sample.o(FSymTab)
</UL>
<P><STRONG><a name="[ab4]"></a>umqtt_publish</STRONG> (Thumb, 600 bytes, Stack size 112 bytes, umqtt.o(.text.umqtt_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = umqtt_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_send
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packetID
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_topic_recv_callback
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_publish
</UL>

<P><STRONG><a name="[b93]"></a>umqtt_start</STRONG> (Thumb, 504 bytes, Stack size 112 bytes, umqtt.o(.text.umqtt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = umqtt_start &rArr; umqtt_connect &rArr; umqtt_handle_readpacket &rArr; umqtt_decode &rArr; umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_send
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connect_status
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packetID
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_start
</UL>

<P><STRONG><a name="[b95]"></a>umqtt_stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, umqtt.o(.text.umqtt_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = umqtt_stop &rArr; umqtt_disconnect &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_disconnect
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_stop
</UL>

<P><STRONG><a name="[b94]"></a>umqtt_subscribe</STRONG> (Thumb, 560 bytes, Stack size 112 bytes, umqtt.o(.text.umqtt_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = umqtt_subscribe &rArr; set_uplink_recon_tick &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_send
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packetID
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_subscribe
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_start
</UL>

<P><STRONG><a name="[b7c]"></a>umqtt_trans_connect</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, umqtt_transport.o(.text.umqtt_trans_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = umqtt_trans_connect &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_resolve_uri
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
</UL>

<P><STRONG><a name="[b7b]"></a>umqtt_trans_disconnect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, umqtt_transport.o(.text.umqtt_trans_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = umqtt_trans_disconnect &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_stop
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_thread
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_reconnect_callback
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
</UL>

<P><STRONG><a name="[b97]"></a>umqtt_trans_recv</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, umqtt_transport.o(.text.umqtt_trans_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = umqtt_trans_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readpacket
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
</UL>

<P><STRONG><a name="[af6]"></a>umqtt_trans_send</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, umqtt_transport.o(.text.umqtt_trans_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = umqtt_trans_send &rArr; send &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_keepalive_callback
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_disconnect
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubrec_cycle_callback
</UL>

<P><STRONG><a name="[b96]"></a>umqtt_unsubscribe</STRONG> (Thumb, 460 bytes, Stack size 104 bytes, umqtt.o(.text.umqtt_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = umqtt_unsubscribe &rArr; set_uplink_recon_tick &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_send
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packetID
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_unsubscribe
</UL>

<P><STRONG><a name="[5c6]"></a>unlink</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dfs_posix.o(.text.unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_rotate
</UL>

<P><STRONG><a name="[b58]"></a>utl_base64_encode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, utl_base64.o(.text.utl_base64_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = utl_base64_encode &rArr; _base64Encode &rArr; malloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_base64Encode
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
</UL>

<P><STRONG><a name="[259]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[250]"></a>weather</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, httpclient_sample.o(.text.weather))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = weather &rArr; weather_data_parse &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_content_length_get
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_data_parse
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpclient_sample.o(FSymTab)
</UL>
<P><STRONG><a name="[ba2]"></a>weather_data_parse</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, httpclient_sample.o(.text.weather_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = weather_data_parse &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
</UL>

<P><STRONG><a name="[ba3]"></a>webclient_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, webclient.o(.text.webclient_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = webclient_close &rArr; webclient_clean &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[ba0]"></a>webclient_content_length_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, webclient.o(.text.webclient_content_length_get))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
</UL>

<P><STRONG><a name="[b9f]"></a>webclient_get</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, webclient.o(.text.webclient_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + In Cycle
<LI>Call Chain = webclient_get &rArr;  webclient_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[baa]"></a>webclient_get_file</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, webclient_file.o(.text.webclient_get_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = webclient_get_file &rArr; webclient_get &rArr;  webclient_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wget
</UL>

<P><STRONG><a name="[ba8]"></a>webclient_handle_response</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, webclient.o(.text.webclient_handle_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = webclient_handle_response &rArr; webclient_read_line &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[bac]"></a>webclient_header_fields_add</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, webclient.o(.text.webclient_header_fields_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = webclient_header_fields_add &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[ba9]"></a>webclient_header_fields_get</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, webclient.o(.text.webclient_header_fields_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = webclient_header_fields_get &rArr; webclient_strstri &rArr; webclient_strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strstri
</UL>
<BR>[Called By]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
</UL>

<P><STRONG><a name="[ba1]"></a>webclient_read</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, webclient.o(.text.webclient_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[b9e]"></a>webclient_session_create</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, webclient.o(.text.webclient_session_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = webclient_session_create &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[bb2]"></a>webclient_write</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, webclient.o(.text.webclient_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = webclient_write &rArr; webclient_send &rArr; send &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[276]"></a>wget</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, webclient_file.o(.text.wget))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wget &rArr; webclient_get_file &rArr; webclient_get &rArr;  webclient_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webclient_file.o(FSymTab)
</UL>
<P><STRONG><a name="[493]"></a>write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfs_posix.o(.text.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = write &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_flush_with_buf
</UL>

<P><STRONG><a name="[7c7]"></a>zFTP_change_path</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, zftp.o(.text.zFTP_change_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = zFTP_change_path &rArr; zFTP_send_cmd_wait_server_ack &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_send_cmd_wait_server_ack
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_upload
</UL>

<P><STRONG><a name="[7c5]"></a>zFTP_login</STRONG> (Thumb, 528 bytes, Stack size 128 bytes, zftp.o(.text.zFTP_login))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = zFTP_login &rArr; zFTP_send_cmd_wait_server_ack &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_wait_server_ack
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_send_cmd_wait_server_ack
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_upload
</UL>

<P><STRONG><a name="[7c6]"></a>zFTP_set_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, zftp.o(.text.zFTP_set_callback))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_upload
</UL>

<P><STRONG><a name="[7c8]"></a>zFTP_upload_file</STRONG> (Thumb, 356 bytes, Stack size 128 bytes, zftp.o(.text.zFTP_upload_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = zFTP_upload_file &rArr; zFTP_pasv_mode &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_wait_server_ack
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file_data
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_send_cmd_wait_server_ack
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_pasv_mode
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_upload
</UL>

<P><STRONG><a name="[2d9]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bb9]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[bb8]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[bbc]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[bba]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[bbb]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[2da]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e9]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2db]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e8]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[bbd]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2de]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[bbe]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[5d0]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_double
</UL>

<P><STRONG><a name="[ae0]"></a>__hardfp_strtod</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[bc2]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[bc1]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[2ed]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[313]"></a>__support_ldexp</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __support_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[2c2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[ef]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[bbf]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[e9]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[2a2]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[bc4]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[29d]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[c04]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[c05]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2e7]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[27f]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[283]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[bc5]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[bc0]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[2f0]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[2ec]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2eb]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[bc6]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[afb]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[246]"></a>tcpserv</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, main.o(.text.tcpserv))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcpserv &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[248]"></a>udpserv</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, main.o(.text.udpserv))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = udpserv &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[249]"></a>cmd_ntp_sync</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ntp.o(.text.cmd_ntp_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = cmd_ntp_sync &rArr; ntp_sync_to_rtc &rArr; ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntp.o(FSymTab)
</UL>
<P><STRONG><a name="[23a]"></a>ntp_auto_sync_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ntp.o(.text.ntp_auto_sync_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ntp_auto_sync_init &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntp.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[ad8]"></a>ntp_check_network</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ntp.o(.text.ntp_check_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ntp_check_network &rArr; netdev_get_by_family
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_work_func
</UL>

<P><STRONG><a name="[170]"></a>ntp_sync_work_func</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ntp.o(.text.ntp_sync_work_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = ntp_sync_work_func &rArr; ntp_sync_to_rtc &rArr; ntp_get_time &rArr; socket &rArr; sal_socket &rArr; socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_sync_to_rtc
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_check_network
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntp.o(.text.ntp_auto_sync_init)
</UL>
<P><STRONG><a name="[ada]"></a>sendto_ntp_server</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ntp.o(.text.sendto_ntp_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = sendto_ntp_server &rArr; sendto &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_get_time
</UL>

<P><STRONG><a name="[12f]"></a>anim_read_cb</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lvgl_sn_interface.o(.text.anim_read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = anim_read_cb &rArr; create_desk &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.lv_anim_set_ready_cb)
</UL>
<P><STRONG><a name="[127]"></a>anim_x_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lvgl_sn_interface.o(.text.anim_x_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = anim_x_cb &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.lv_anim_set_exec_cb)
</UL>
<P><STRONG><a name="[111]"></a>app_click_cb</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lvgl_sn_interface.o(.text.app_click_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 11104 + Unknown Stack Size
<LI>Call Chain = app_click_cb &rArr; create_net_up &rArr; lv_tabview_add_tab &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.create_desk)
</UL>
<P><STRONG><a name="[10e]"></a>ck_alram_cb</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lvgl_sn_interface.o(.text.ck_alram_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ck_alram_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_get_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.create_alarm)
</UL>
<P><STRONG><a name="[10d]"></a>dev_btn_cb</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lvgl_sn_interface.o(.text.dev_btn_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = dev_btn_cb &rArr; para_update &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.create_alarm)
</UL>
<P><STRONG><a name="[110]"></a>humi_slider_cb</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lvgl_sn_interface.o(.text.humi_slider_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = humi_slider_cb &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_value
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.create_alarm)
</UL>
<P><STRONG><a name="[112]"></a>list_btn_cb</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lvgl_sn_interface.o(.text.list_btn_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = list_btn_cb &rArr; dev_status_update &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_update
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.create_device_status)
</UL>
<P><STRONG><a name="[ac2]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
</UL>

<P><STRONG><a name="[ac4]"></a>lv_anim_set_path_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_anim_set_path_cb))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
</UL>

<P><STRONG><a name="[ac3]"></a>lv_anim_set_ready_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_anim_set_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
</UL>

<P><STRONG><a name="[ac1]"></a>lv_anim_set_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
</UL>

<P><STRONG><a name="[ac0]"></a>lv_anim_set_values</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
</UL>

<P><STRONG><a name="[abf]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_event_cb_1
</UL>

<P><STRONG><a name="[b5d]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
</UL>

<P><STRONG><a name="[b5c]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
</UL>

<P><STRONG><a name="[610]"></a>lv_color_black</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lvgl_sn_interface.o(.text.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
</UL>

<P><STRONG><a name="[aaa]"></a>lv_color_hex</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_color_hex))
<BR><BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
</UL>

<P><STRONG><a name="[5e9]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_white
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>

<P><STRONG><a name="[8cc]"></a>lv_color_white</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lvgl_sn_interface.o(.text.lv_color_white))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_humi_cb
</UL>

<P><STRONG><a name="[604]"></a>lv_obj_center</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lvgl_sn_interface.o(.text.lv_obj_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_obj_center &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_box_alarm_up
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
</UL>

<P><STRONG><a name="[626]"></a>lv_pct</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lvgl_sn_interface.o(.text.lv_pct))
<BR><BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
</UL>

<P><STRONG><a name="[5e5]"></a>lv_scr_act</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lvgl_sn_interface.o(.text.lv_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_scr_act &rArr; lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_device_status
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_desk
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_alarm
</UL>

<P><STRONG><a name="[817]"></a>lv_slider_get_value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lvgl_sn_interface.o(.text.lv_slider_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_slider_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;humi_slider_cb
</UL>

<P><STRONG><a name="[a4d]"></a>lv_slider_set_value</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lvgl_sn_interface.o(.text.lv_slider_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_slider_set_value &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_update
</UL>

<P><STRONG><a name="[168]"></a>my_event_cb_1</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, lvgl_sn_interface.o(.text.my_event_cb_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = my_event_cb_1 &rArr; lv_anim_start &rArr; lv_anim_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_gesture_dir
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_ready_cb
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_path_cb
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.lvgl_sn_interface_show)
</UL>
<P><STRONG><a name="[169]"></a>my_event_cb_2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lvgl_sn_interface.o(.text.my_event_cb_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = my_event_cb_2 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_gesture_dir
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.lvgl_sn_interface_show)
</UL>
<P><STRONG><a name="[113]"></a>set_humi_cb</STRONG> (Thumb, 222 bytes, Stack size 80 bytes, lvgl_sn_interface.o(.text.set_humi_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = set_humi_cb &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_white
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.create_device_status)
</UL>
<P><STRONG><a name="[114]"></a>sw_cb</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lvgl_sn_interface.o(.text.sw_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sw_cb &rArr; udp_send_command &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.create_device_status)
</UL>
<P><STRONG><a name="[115]"></a>ta_event_cb</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lvgl_sn_interface.o(.text.ta_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ta_event_cb &rArr; lv_keyboard_set_textarea &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_set_textarea
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.create_net_up)
</UL>
<P><STRONG><a name="[10f]"></a>temp_dd_cb</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lvgl_sn_interface.o(.text.temp_dd_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = temp_dd_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.create_alarm)
</UL>
<P><STRONG><a name="[116]"></a>up_btn_cb</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, lvgl_sn_interface.o(.text.up_btn_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = up_btn_cb &rArr; ftp_upload &rArr; zFTP_upload_file &rArr; zFTP_pasv_mode &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected_str
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_upload
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_sn_interface.o(.text.create_net_up)
</UL>
<P><STRONG><a name="[3d3]"></a>_base64Encode</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, utl_base64.o(.text._base64Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _base64Encode &rArr; malloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utl_base64_encode
</UL>

<P><STRONG><a name="[b65]"></a>str_to_int</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, umqtt_sample.o(.text.str_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = str_to_int &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_ex_publish
</UL>

<P><STRONG><a name="[24d]"></a>umqtt_ex_publish</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, umqtt_sample.o(.text.umqtt_ex_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = umqtt_ex_publish &rArr; umqtt_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_int
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umqtt_sample.o(FSymTab)
</UL>
<P><STRONG><a name="[24c]"></a>umqtt_ex_stop</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, umqtt_sample.o(.text.umqtt_ex_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = umqtt_ex_stop &rArr; umqtt_stop &rArr; umqtt_disconnect &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_stop
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_delete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umqtt_sample.o(FSymTab)
</UL>
<P><STRONG><a name="[24e]"></a>umqtt_ex_subscribe</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, umqtt_sample.o(.text.umqtt_ex_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = umqtt_ex_subscribe &rArr; umqtt_subscribe &rArr; set_uplink_recon_tick &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umqtt_sample.o(FSymTab)
</UL>
<P><STRONG><a name="[24f]"></a>umqtt_ex_unsubscribe</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, umqtt_sample.o(.text.umqtt_ex_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = umqtt_ex_unsubscribe &rArr; umqtt_unsubscribe &rArr; set_uplink_recon_tick &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umqtt_sample.o(FSymTab)
</UL>
<P><STRONG><a name="[18d]"></a>umqtt_topic_recv_callback</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, umqtt_sample.o(.text.umqtt_topic_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = umqtt_topic_recv_callback &rArr; build_status_json_str &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_status_json_str
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> umqtt_sample.o(.text.umqtt_ex_start)
<LI> umqtt_sample.o(.text.umqtt_ex_subscribe)
</UL>
<P><STRONG><a name="[18c]"></a>user_callback</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, umqtt_sample.o(.text.user_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = user_callback &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umqtt_sample.o(.text.umqtt_ex_start)
</UL>
<P><STRONG><a name="[ff]"></a>alram_timer_cb</STRONG> (Thumb, 356 bytes, Stack size 136 bytes, alarm_timer.o(.text.alram_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = alram_timer_cb &rArr; mqtt_alarm_up &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_alarm_up
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_alarm_up
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_box_alarm_up
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarm_timer.o(.text.alram_timer_start)
</UL>
<P><STRONG><a name="[4bf]"></a>alloc_empty_socket</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, at_socket.o(.text.alloc_empty_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alloc_empty_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_insert
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
</UL>

<P><STRONG><a name="[4c2]"></a>alloc_socket</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, at_socket.o(.text.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = alloc_socket &rArr; alloc_socket_by_device &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_family_get
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_socket
</UL>

<P><STRONG><a name="[4c5]"></a>alloc_socket_by_device</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, at_socket.o(.text.alloc_socket_by_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = alloc_socket_by_device &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_empty_socket
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_bind
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>

<P><STRONG><a name="[104]"></a>at_closed_notice_cb</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at_socket.o(.text.at_closed_notice_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = at_closed_notice_cb &rArr; at_do_event_changes &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket.o(.text.at_socket)
</UL>
<P><STRONG><a name="[510]"></a>at_do_event_changes</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, at_socket.o(.text.at_do_event_changes))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = at_do_event_changes &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sendto
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_connect
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closed_notice_cb
</UL>

<P><STRONG><a name="[52b]"></a>at_do_event_clean</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at_socket.o(.text.at_do_event_clean))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
</UL>

<P><STRONG><a name="[103]"></a>at_recv_notice_cb</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, at_socket.o(.text.at_recv_notice_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = at_recv_notice_cb &rArr; at_recvpkt_put &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_put
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_do_event_changes
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket.o(.text.at_socket)
</UL>
<P><STRONG><a name="[52c]"></a>at_recvpkt_all_delete</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, at_socket.o(.text.at_recvpkt_all_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = at_recvpkt_all_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[529]"></a>at_recvpkt_get</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, at_socket.o(.text.at_recvpkt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = at_recvpkt_get &rArr; at_recvpkt_node_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_node_delete
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
</UL>

<P><STRONG><a name="[52f]"></a>at_recvpkt_node_delete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_socket.o(.text.at_recvpkt_node_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = at_recvpkt_node_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_remove
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
</UL>

<P><STRONG><a name="[526]"></a>at_recvpkt_put</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, at_socket.o(.text.at_recvpkt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = at_recvpkt_put &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_notice_cb
</UL>

<P><STRONG><a name="[512]"></a>free_socket</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, at_socket.o(.text.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = free_socket &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_remove
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_all_delete
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_shutdown
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_closesocket
</UL>

<P><STRONG><a name="[513]"></a>ipaddr_to_ipstr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, at_socket.o(.text.ipaddr_to_ipstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ipaddr_to_ipstr &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sendto
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_connect
</UL>

<P><STRONG><a name="[856]"></a>ipstr_atol</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, at_socket.o(.text.ipstr_atol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipstr_atol &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_to_u32
</UL>

<P><STRONG><a name="[51d]"></a>ipstr_to_u32</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, at_socket.o(.text.ipstr_to_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipstr_to_u32 &rArr; ipstr_atol &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipstr_atol
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_gethostbyname
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getaddrinfo
</UL>

<P><STRONG><a name="[b49]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at_socket.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
</UL>

<P><STRONG><a name="[531]"></a>rt_slist_append</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_socket.o(.text.rt_slist_append))
<BR><BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_put
</UL>

<P><STRONG><a name="[52d]"></a>rt_slist_first</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_socket.o(.text.rt_slist_first))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_all_delete
</UL>

<P><STRONG><a name="[4c0]"></a>rt_slist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at_socket.o(.text.rt_slist_init))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_empty_socket
</UL>

<P><STRONG><a name="[4c1]"></a>rt_slist_insert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at_socket.o(.text.rt_slist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_empty_socket
</UL>

<P><STRONG><a name="[52a]"></a>rt_slist_isempty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_socket.o(.text.rt_slist_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_node_delete
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_all_delete
</UL>

<P><STRONG><a name="[52e]"></a>rt_slist_next</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_socket.o(.text.rt_slist_next))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_get
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_all_delete
</UL>

<P><STRONG><a name="[530]"></a>rt_slist_remove</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_socket.o(.text.rt_slist_remove))
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_remove
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvpkt_node_delete
</UL>

<P><STRONG><a name="[4c8]"></a>rt_wqueue_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at_socket.o(.text.rt_wqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_wqueue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket_by_device
</UL>

<P><STRONG><a name="[4f7]"></a>socketaddr_to_ipaddr_port</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_socket.o(.text.socketaddr_to_ipaddr_port))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sendto
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_connect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_bind
</UL>

<P><STRONG><a name="[4ff]"></a>at_client_getchar</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, at_client.o(.text.at_client_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = at_client_getchar &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
</UL>

<P><STRONG><a name="[505]"></a>at_client_para_init</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, at_client.o(.text.at_client_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = at_client_para_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
</UL>

<P><STRONG><a name="[101]"></a>at_client_rx_ind</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at_client.o(.text.at_client_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = at_client_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_client.o(.text.at_client_init)
</UL>
<P><STRONG><a name="[527]"></a>at_recv_readline</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, at_client.o(.text.at_recv_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = at_recv_readline &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[102]"></a>client_parser</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, at_client.o(.text.client_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = client_parser &rArr; at_recv_readline &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_client.o(.text.at_client_para_init)
</UL>
<P><STRONG><a name="[528]"></a>get_urc_obj</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, at_client.o(.text.get_urc_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_urc_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
</UL>

<P><STRONG><a name="[251]"></a>at</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, at_cli.o(.text.at))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = at &rArr; client_cli_parser &rArr; at_obj_exec_cmd &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get_first
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cli_deinit
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cli.o(FSymTab)
</UL>
<P><STRONG><a name="[10b]"></a>at_client_entry</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_cli.o(.text.at_client_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = at_client_entry &rArr; client_getchar &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_getchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cli.o(.text.client_cli_parser)
</UL>
<P><STRONG><a name="[4f5]"></a>client_cli_parser</STRONG> (Thumb, 408 bytes, Stack size 128 bytes, at_cli.o(.text.client_cli_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = client_cli_parser &rArr; at_obj_exec_cmd &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_destroy
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_getchar
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at
</UL>

<P><STRONG><a name="[4fe]"></a>client_getchar</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_cli.o(.text.client_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = client_getchar &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_entry
</UL>

<P><STRONG><a name="[10a]"></a>client_getchar_rx_ind</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, at_cli.o(.text.client_getchar_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = client_getchar_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cli.o(.text.client_cli_parser)
</UL>
<P><STRONG><a name="[5ba]"></a>console_getchar</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_cli.o(.text.console_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = console_getchar &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_cli_parser
</UL>

<P><STRONG><a name="[100]"></a>console_getchar_rx_ind</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, at_cli.o(.text.console_getchar_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = console_getchar_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cli.o(.text.at_cli_init)
</UL>
<P><STRONG><a name="[1c9]"></a>esp32_domain_resolve</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, at_socket_esp32.o(.text.esp32_domain_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = esp32_domain_resolve &rArr; at_resp_parse_line_args_by_kw &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_first_initialized
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp32.o(.rodata.esp32_socket_ops)
</UL>
<P><STRONG><a name="[1c7]"></a>esp32_socket_close</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at_socket_esp32.o(.text.esp32_socket_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = esp32_socket_close &rArr; at_obj_exec_cmd &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp32.o(.rodata.esp32_socket_ops)
</UL>
<P><STRONG><a name="[1c6]"></a>esp32_socket_connect</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, at_socket_esp32.o(.text.esp32_socket_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = esp32_socket_connect &rArr; esp32_socket_close &rArr; at_obj_exec_cmd &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp32.o(.rodata.esp32_socket_ops)
</UL>
<P><STRONG><a name="[77a]"></a>esp32_socket_event_recv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_socket_esp32.o(.text.esp32_socket_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = esp32_socket_event_recv &rArr; rt_event_recv &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_send
</UL>

<P><STRONG><a name="[77c]"></a>esp32_socket_event_send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, at_socket_esp32.o(.text.esp32_socket_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = esp32_socket_event_send &rArr; rt_event_send &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_send_func
</UL>

<P><STRONG><a name="[1c8]"></a>esp32_socket_send</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, at_socket_esp32.o(.text.esp32_socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = esp32_socket_send &rArr; at_obj_exec_cmd &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_end_sign
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_send
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_event_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp32.o(.rodata.esp32_socket_ops)
</UL>
<P><STRONG><a name="[1ca]"></a>esp32_socket_set_event_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_socket_esp32.o(.text.esp32_socket_set_event_cb))
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp32.o(.rodata.esp32_socket_ops)
</UL>
<P><STRONG><a name="[229]"></a>urc_close_func</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at_socket_esp32.o(.text.urc_close_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = urc_close_func &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp32.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[22a]"></a>urc_recv_func</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, at_socket_esp32.o(.text.urc_recv_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = urc_recv_func &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_recv
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp32.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[228]"></a>urc_send_bfsz_func</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at_socket_esp32.o(.text.urc_send_bfsz_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = urc_send_bfsz_func &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp32.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[227]"></a>urc_send_func</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, at_socket_esp32.o(.text.urc_send_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = urc_send_func &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_socket_esp32.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[514]"></a>at_device_class_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at_device.o(.text.at_device_class_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at_device_class_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
</UL>

<P><STRONG><a name="[517]"></a>rt_slist_append</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_device.o(.text.rt_slist_append))
<BR><BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
</UL>

<P><STRONG><a name="[516]"></a>rt_slist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at_device.o(.text.rt_slist_init))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
</UL>

<P><STRONG><a name="[241]"></a>esp32_device_register</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_sample_esp32.o(.text.esp32_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = esp32_device_register &rArr; at_device_register &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_sample_esp32.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[1be]"></a>esp32_control</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, at_device_esp32.o(.text.esp32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = esp32_control &rArr; esp32_reset &rArr; esp32_net_init &rArr; esp32_init_thread_entry &rArr; at_client_obj_wait_connect &rArr; at_create_resp &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_wifi_info_set
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.esp32_device_ops)
</UL>
<P><STRONG><a name="[1bd]"></a>esp32_deinit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, at_device_esp32.o(.text.esp32_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = esp32_deinit &rArr; esp32_netdev_set_down &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.esp32_device_ops)
</UL>
<P><STRONG><a name="[237]"></a>esp32_device_class_register</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, at_device_esp32.o(.text.esp32_device_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = esp32_device_class_register &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_class_register
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_class_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[119]"></a>esp32_get_netdev_info</STRONG> (Thumb, 780 bytes, Stack size 264 bytes, at_device_esp32.o(.text.esp32_get_netdev_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = esp32_get_netdev_info &rArr; at_resp_parse_line_args_by_kw &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dns_server
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dhcp_status
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_dns_server
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.text.esp32_netdev_start_delay_work)
</UL>
<P><STRONG><a name="[1bc]"></a>esp32_init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, at_device_esp32.o(.text.esp32_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = esp32_init &rArr; esp32_netdev_set_up &rArr; esp32_net_init &rArr; esp32_init_thread_entry &rArr; at_client_obj_wait_connect &rArr; at_create_resp &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_up
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_add
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_socket_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.esp32_device_ops)
</UL>
<P><STRONG><a name="[76e]"></a>esp32_init_thread_entry</STRONG> (Thumb, 600 bytes, Stack size 56 bytes, at_device_esp32.o(.text.esp32_init_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = esp32_init_thread_entry &rArr; at_client_obj_wait_connect &rArr; at_create_resp &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_set_info
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_start_delay_work
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_net_init
</UL>

<P><STRONG><a name="[772]"></a>esp32_net_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, at_device_esp32.o(.text.esp32_net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = esp32_net_init &rArr; esp32_init_thread_entry &rArr; at_client_obj_wait_connect &rArr; at_create_resp &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_reset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_set_up
</UL>

<P><STRONG><a name="[76d]"></a>esp32_netdev_add</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, at_device_esp32.o(.text.esp32_netdev_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = esp32_netdev_add &rArr; netdev_register &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_at_netdev_set_pf_info
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init
</UL>

<P><STRONG><a name="[1c4]"></a>esp32_netdev_ping</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, at_device_esp32.o(.text.esp32_netdev_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = esp32_netdev_ping &rArr; at_resp_parse_line_args_by_kw &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.esp32_netdev_ops)
</UL>
<P><STRONG><a name="[1c1]"></a>esp32_netdev_set_addr_info</STRONG> (Thumb, 368 bytes, Stack size 96 bytes, at_device_esp32.o(.text.esp32_netdev_set_addr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = esp32_netdev_set_addr_info &rArr; at_obj_exec_cmd &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.esp32_netdev_ops)
</UL>
<P><STRONG><a name="[1c3]"></a>esp32_netdev_set_dhcp</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, at_device_esp32.o(.text.esp32_netdev_set_dhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = esp32_netdev_set_dhcp &rArr; at_obj_exec_cmd &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dhcp_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.esp32_netdev_ops)
</UL>
<P><STRONG><a name="[1c2]"></a>esp32_netdev_set_dns_server</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, at_device_esp32.o(.text.esp32_netdev_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = esp32_netdev_set_dns_server &rArr; at_obj_exec_cmd &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dns_server
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_get_netdev_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.esp32_netdev_ops)
</UL>
<P><STRONG><a name="[1c0]"></a>esp32_netdev_set_down</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, at_device_esp32.o(.text.esp32_netdev_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = esp32_netdev_set_down &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.esp32_netdev_ops)
</UL>
<P><STRONG><a name="[1bf]"></a>esp32_netdev_set_up</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, at_device_esp32.o(.text.esp32_netdev_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = esp32_netdev_set_up &rArr; esp32_net_init &rArr; esp32_init_thread_entry &rArr; at_client_obj_wait_connect &rArr; at_create_resp &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_net_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.esp32_netdev_ops)
</UL>
<P><STRONG><a name="[771]"></a>esp32_netdev_start_delay_work</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_device_esp32.o(.text.esp32_netdev_start_delay_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = esp32_netdev_start_delay_work &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_func
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_init_thread_entry
</UL>

<P><STRONG><a name="[765]"></a>esp32_reset</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, at_device_esp32.o(.text.esp32_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = esp32_reset &rArr; esp32_net_init &rArr; esp32_init_thread_entry &rArr; at_client_obj_wait_connect &rArr; at_create_resp &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_net_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_control
</UL>

<P><STRONG><a name="[764]"></a>esp32_wifi_info_set</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, at_device_esp32.o(.text.esp32_wifi_info_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = esp32_wifi_info_set &rArr; at_obj_exec_cmd &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_control
</UL>

<P><STRONG><a name="[22b]"></a>urc_busy_p_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_device_esp32.o(.text.urc_busy_p_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = urc_busy_p_func &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[22c]"></a>urc_busy_s_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_device_esp32.o(.text.urc_busy_s_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = urc_busy_s_func &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[22d]"></a>urc_func</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, at_device_esp32.o(.text.urc_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = urc_func &rArr; netdev_low_level_set_link_status &rArr; sal_check_netdev_internet_up &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_get_by_name
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_netdev_start_delay_work
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_device_esp32.o(.rodata.urc_table)
</UL>
<P><STRONG><a name="[aef]"></a>__ARM_isinf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(.text.__ARM_isinf))
<BR><BR>[Called By]<UL><LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[aee]"></a>__ARM_isnan</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cjson.o(.text.__ARM_isnan))
<BR><BR>[Called By]<UL><LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[4b4]"></a>add_item_to_array</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cjson.o(.text.add_item_to_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_item_to_array
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[4b6]"></a>add_item_to_object</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cjson.o(.text.add_item_to_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = add_item_to_object &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddArrayToObject
</UL>

<P><STRONG><a name="[565]"></a>buffer_skip_whitespace</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, cjson.o(.text.buffer_skip_whitespace))
<BR><BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[55e]"></a>cJSON_New_Item</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateBool
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
</UL>

<P><STRONG><a name="[4b7]"></a>cJSON_strdup</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
</UL>

<P><STRONG><a name="[597]"></a>case_insensitive_strcmp</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cjson.o(.text.case_insensitive_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = case_insensitive_strcmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[5cf]"></a>compare_double</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cjson.o(.text.compare_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_double &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[763]"></a>ensure</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, cjson.o(.text.ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ensure
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
</UL>

<P><STRONG><a name="[560]"></a>get_object_item</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cjson.o(.text.get_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_object_item &rArr; case_insensitive_strcmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[ade]"></a>parse_array</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, cjson.o(.text.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[b9d]"></a>parse_hex4</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, cjson.o(.text.parse_hex4))
<BR><BR>[Called By]<UL><LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>

<P><STRONG><a name="[adf]"></a>parse_number</STRONG> (Thumb, 248 bytes, Stack size 96 bytes, cjson.o(.text.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[ae1]"></a>parse_object</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, cjson.o(.text.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[ae2]"></a>parse_string</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, cjson.o(.text.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = parse_string &rArr; utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[566]"></a>parse_value</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, cjson.o(.text.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[567]"></a>print</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, cjson.o(.text.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
</UL>

<P><STRONG><a name="[aec]"></a>print_array</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, cjson.o(.text.print_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = print_array &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[aed]"></a>print_number</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, cjson.o(.text.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_double
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[af2]"></a>print_object</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, cjson.o(.text.print_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[af4]"></a>print_string</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cjson.o(.text.print_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = print_string &rArr; print_string_ptr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[af3]"></a>print_string_ptr</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, cjson.o(.text.print_string_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = print_string_ptr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[aea]"></a>print_value</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, cjson.o(.text.print_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[564]"></a>skip_utf8_bom</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cjson.o(.text.skip_utf8_bom))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skip_utf8_bom &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
</UL>

<P><STRONG><a name="[4b5]"></a>suffix_object</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text.suffix_object))
<BR><BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>

<P><STRONG><a name="[aeb]"></a>update_offset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cjson.o(.text.update_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_offset &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[ae3]"></a>utf16_literal_to_utf8</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, cjson.o(.text.utf16_literal_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[806]"></a>__isleap</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ctime.o(.text.__isleap))
<BR><BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[800]"></a>get_timeval</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ctime.o(.text.get_timeval))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL>

<P><STRONG><a name="[4f0]"></a>num2str</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ctime.o(.text.num2str))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>

<P><STRONG><a name="[558]"></a>bus_fault_track</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, cpuport.o(.text.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[80e]"></a>hard_fault_track</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, cpuport.o(.text.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[80f]"></a>mem_manage_fault_track</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cpuport.o(.text.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[810]"></a>usage_fault_track</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cpuport.o(.text.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[b0d]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, completion.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>

<P><STRONG><a name="[b0e]"></a>rt_list_insert_before</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, completion.o(.text.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[b0b]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, completion.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[b2b]"></a>rt_ringbuffer_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ringbuffer.o(.text.rt_ringbuffer_status))
<BR><BR>[Called By]<UL><LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[b48]"></a>rt_list_insert_before</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, waitqueue.o(.text.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
</UL>

<P><STRONG><a name="[b4b]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, waitqueue.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</UL>

<P><STRONG><a name="[b4a]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, waitqueue.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
</UL>

<P><STRONG><a name="[fc]"></a>_delayed_work_timeout_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, workqueue.o(.text._delayed_work_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _delayed_work_timeout_handler &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(.text._workqueue_submit_work)
</UL>
<P><STRONG><a name="[4a0]"></a>_workqueue_submit_work</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, workqueue.o(.text._workqueue_submit_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
</UL>

<P><STRONG><a name="[180]"></a>_workqueue_thread_entry</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, workqueue.o(.text._workqueue_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _workqueue_thread_entry &rArr; _workqueue_work_completion &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_work_completion
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(.text.rt_workqueue_create)
</UL>
<P><STRONG><a name="[4a5]"></a>_workqueue_work_completion</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, workqueue.o(.text._workqueue_work_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _workqueue_work_completion &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[b45]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, workqueue.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
</UL>

<P><STRONG><a name="[3d7]"></a>rt_list_insert_after</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, workqueue.o(.text.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
</UL>

<P><STRONG><a name="[4a4]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, workqueue.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[3d6]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, workqueue.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
</UL>

<P><STRONG><a name="[234]"></a>rt_work_sys_workqueue_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, workqueue.o(.text.rt_work_sys_workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_work_sys_workqueue_init &rArr; rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[252]"></a>_pin_cmd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, pin.o(.text._pin_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _pin_cmd &rArr; _pin_cmd_write &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[47b]"></a>_pin_cmd_conv</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pin.o(.text._pin_cmd_conv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _pin_cmd_conv &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
</UL>

<P><STRONG><a name="[478]"></a>_pin_cmd_get</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pin.o(.text._pin_cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _pin_cmd_get &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[479]"></a>_pin_cmd_mode</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, pin.o(.text._pin_cmd_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _pin_cmd_mode &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[475]"></a>_pin_cmd_print_usage</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pin.o(.text._pin_cmd_print_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[47a]"></a>_pin_cmd_read</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pin.o(.text._pin_cmd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _pin_cmd_read &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[477]"></a>_pin_cmd_write</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, pin.o(.text._pin_cmd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _pin_cmd_write &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[175]"></a>_pin_control</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pin.o(.text._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _pin_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[173]"></a>_pin_read</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pin.o(.text._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[174]"></a>_pin_write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pin.o(.text._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[253]"></a>date</STRONG> (Thumb, 396 bytes, Stack size 72 bytes, rtc.o(.text.date))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = date &rArr; ctime &rArr; asctime &rArr; asctime_r &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timestamp
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[238]"></a>rt_soft_rtc_init</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, soft_rtc.o(.text.rt_soft_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = rt_soft_rtc_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft_rtc.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[17e]"></a>soft_rtc_control</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, soft_rtc.o(.text.soft_rtc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = soft_rtc_control
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft_rtc.o(.text.rt_soft_rtc_init)
</UL>
<P><STRONG><a name="[488]"></a>_serial_check_buffer_size</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, serial.o(.text._serial_check_buffer_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[489]"></a>_serial_int_rx</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, serial.o(.text._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _serial_int_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[48a]"></a>_serial_int_tx</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, serial.o(.text._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[b31]"></a>_serial_poll_rx</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, serial.o(.text._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _serial_poll_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[b32]"></a>_serial_poll_tx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, serial.o(.text._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _serial_poll_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[17a]"></a>rt_serial_close</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, serial.o(.text.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[17d]"></a>rt_serial_control</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, serial.o(.text.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_serial_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[178]"></a>rt_serial_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, serial.o(.text.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_serial_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[179]"></a>rt_serial_open</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, serial.o(.text.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_serial_open &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[17b]"></a>rt_serial_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, serial.o(.text.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_serial_read &rArr; _serial_int_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[17c]"></a>rt_serial_write</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, serial.o(.text.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_serial_write &rArr; _serial_int_tx &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[345]"></a>CLOCK_ControlGate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, clock_config.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[32c]"></a>CLOCK_DisableClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock_config.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[32b]"></a>CLOCK_SetDiv</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, clock_config.o(.text.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[32a]"></a>CLOCK_SetMux</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, clock_config.o(.text.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetMux
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[32f]"></a>CLOCK_SetPllBypass</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, clock_config.o(.text.CLOCK_SetPllBypass))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[325]"></a>CLOCK_SetRtcXtalFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_config.o(.text.CLOCK_SetRtcXtalFreq))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[326]"></a>CLOCK_SetXtalFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock_config.o(.text.CLOCK_SetXtalFreq))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[334]"></a>IOMUXC_EnableMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clock_config.o(.text.IOMUXC_EnableMode))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[333]"></a>IOMUXC_MQSConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clock_config.o(.text.IOMUXC_MQSConfig))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[332]"></a>IOMUXC_SetSaiMClkClockSource</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, clock_config.o(.text.IOMUXC_SetSaiMClkClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[346]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock_config.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[347]"></a>CLOCK_ControlGate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pin_mux.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[33b]"></a>CLOCK_EnableClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pin_mux.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitSemcPins
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[33d]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pin_mux.o(.text.IOMUXC_SetPinConfig))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitSemcPins
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[33c]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pin_mux.o(.text.IOMUXC_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitSemcPins
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[348]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pin_mux.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[336]"></a>ARM_MPU_Disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, board.o(.text.ARM_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[337]"></a>ARM_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, board.o(.text.ARM_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[81f]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(.text.IOMUXC_SetPinConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_uart_pins_init
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_pins_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_i2c_pins_init
</UL>

<P><STRONG><a name="[81e]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board.o(.text.IOMUXC_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_uart_pins_init
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_pins_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_i2c_pins_init
</UL>

<P><STRONG><a name="[3cb]"></a>SysTick_Config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, board.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[3cc]"></a>__NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[b1a]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, board.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[81d]"></a>imxrt_i2c_pins_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, board.o(.text.imxrt_i2c_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = imxrt_i2c_pins_init
</UL>
<BR>[Calls]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[823]"></a>imxrt_lcd_pins_init</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, board.o(.text.imxrt_lcd_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = imxrt_lcd_pins_init
</UL>
<BR>[Calls]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[349]"></a>CLOCK_ControlGate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_gpio.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[353]"></a>CLOCK_EnableClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_gpio.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_mode
</UL>

<P><STRONG><a name="[380]"></a>EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_gpio.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_irq_enable
</UL>

<P><STRONG><a name="[82b]"></a>GPIO_PinReadPadStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_gpio.o(.text.GPIO_PinReadPadStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_read
</UL>

<P><STRONG><a name="[821]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_gpio.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>

<P><STRONG><a name="[828]"></a>GPIO_PortDisableInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_gpio.o(.text.GPIO_PortDisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_irq_enable
</UL>

<P><STRONG><a name="[824]"></a>GPIO_PortEnableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_gpio.o(.text.GPIO_PortEnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_irq_enable
</UL>

<P><STRONG><a name="[820]"></a>GPIO_PortGetInterruptFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_gpio.o(.text.GPIO_PortGetInterruptFlags))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>

<P><STRONG><a name="[82a]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_gpio.o(.text.IOMUXC_SetPinConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_mode
</UL>

<P><STRONG><a name="[829]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_gpio.o(.text.IOMUXC_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_mode
</UL>

<P><STRONG><a name="[826]"></a>NVIC_EncodePriority</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_gpio.o(.text.NVIC_EncodePriority))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_irq_enable
</UL>

<P><STRONG><a name="[34a]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_gpio.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[381]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_gpio.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[825]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_gpio.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_irq_enable
</UL>

<P><STRONG><a name="[827]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_gpio.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_irq_enable
</UL>

<P><STRONG><a name="[385]"></a>imxrt_isr</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, drv_gpio.o(.text.imxrt_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortGetInterruptFlags
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_16_31_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_0_15_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_16_31_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_0_15_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_16_31_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>imxrt_pin_attach_irq</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, drv_gpio.o(.text.imxrt_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = imxrt_pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata.imxrt_pin_ops)
</UL>
<P><STRONG><a name="[1cf]"></a>imxrt_pin_detach_irq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, drv_gpio.o(.text.imxrt_pin_detach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = imxrt_pin_detach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata.imxrt_pin_ops)
</UL>
<P><STRONG><a name="[1d1]"></a>imxrt_pin_get</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_gpio.o(.text.imxrt_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = imxrt_pin_get
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata.imxrt_pin_ops)
</UL>
<P><STRONG><a name="[1d0]"></a>imxrt_pin_irq_enable</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, drv_gpio.o(.text.imxrt_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = imxrt_pin_irq_enable &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortEnableInterrupts
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortDisableInterrupts
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata.imxrt_pin_ops)
</UL>
<P><STRONG><a name="[1cb]"></a>imxrt_pin_mode</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, drv_gpio.o(.text.imxrt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = imxrt_pin_mode &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata.imxrt_pin_ops)
</UL>
<P><STRONG><a name="[1cd]"></a>imxrt_pin_read</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_gpio.o(.text.imxrt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = imxrt_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinReadPadStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata.imxrt_pin_ops)
</UL>
<P><STRONG><a name="[1cc]"></a>imxrt_pin_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, drv_gpio.o(.text.imxrt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = imxrt_pin_write &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata.imxrt_pin_ops)
</UL>
<P><STRONG><a name="[822]"></a>ELCDIF_RgbModeStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_lcd.o(.text.ELCDIF_RgbModeStart))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_lcd_init
</UL>

<P><STRONG><a name="[176]"></a>imxrt_lcd_control</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, drv_lcd.o(.text.imxrt_lcd_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = imxrt_lcd_control &rArr; rt_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.text.rt_hw_lcd_init)
</UL>
<P><STRONG><a name="[177]"></a>imxrt_lcd_init</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, drv_lcd.o(.text.imxrt_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = imxrt_lcd_init &rArr; ELCDIF_RgbModeInit &rArr; ELCDIF_GetInstance &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.text.rt_hw_lcd_init)
</UL>
<P><STRONG><a name="[390]"></a>CLOCK_GetDiv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_uart.o(.text.CLOCK_GetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSrcFreq
</UL>

<P><STRONG><a name="[38e]"></a>CLOCK_GetMux</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_uart.o(.text.CLOCK_GetMux))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSrcFreq
</UL>

<P><STRONG><a name="[38f]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_uart.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSrcFreq
</UL>

<P><STRONG><a name="[37c]"></a>DisableIRQ</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart.o(.text.DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_control
</UL>

<P><STRONG><a name="[382]"></a>EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_control
</UL>

<P><STRONG><a name="[81c]"></a>LPUART_ReadByte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_uart.o(.text.LPUART_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_getc
</UL>

<P><STRONG><a name="[82c]"></a>LPUART_WriteByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_uart.o(.text.LPUART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_putc
</UL>

<P><STRONG><a name="[81a]"></a>NVIC_EncodePriority</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_uart.o(.text.NVIC_EncodePriority))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_control
</UL>

<P><STRONG><a name="[37d]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_uart.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIRQ
</UL>

<P><STRONG><a name="[383]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_uart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[819]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_uart.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_control
</UL>

<P><STRONG><a name="[81b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_uart.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_control
</UL>

<P><STRONG><a name="[1d2]"></a>imxrt_configure</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, drv_uart.o(.text.imxrt_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = imxrt_configure &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSrcFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.imxrt_uart_ops)
</UL>
<P><STRONG><a name="[1d3]"></a>imxrt_control</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, drv_uart.o(.text.imxrt_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = imxrt_control &rArr; EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.imxrt_uart_ops)
</UL>
<P><STRONG><a name="[1d5]"></a>imxrt_getc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_uart.o(.text.imxrt_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = imxrt_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.imxrt_uart_ops)
</UL>
<P><STRONG><a name="[1d4]"></a>imxrt_putc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_uart.o(.text.imxrt_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = imxrt_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.imxrt_uart_ops)
</UL>
<P><STRONG><a name="[3a9]"></a>uart_isr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_uart.o(.text.uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = uart_isr &rArr; rt_hw_serial_isr &rArr; _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[648]"></a>elm_result_to_dfs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfs_elm.o(.text.elm_result_to_dfs))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[64e]"></a>get_disk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfs_elm.o(.text.get_disk))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[5a4]"></a>check_fs</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, ff.o(.text.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[784]"></a>clmt_clust</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ff.o(.text.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[676]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[5cc]"></a>cmp_lfn</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, ff.o(.text.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[600]"></a>create_chain</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[61c]"></a>create_name</STRONG> (Thumb, 668 bytes, Stack size 64 bytes, ff.o(.text.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; tchar2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[62a]"></a>create_partition</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, ff.o(.text.create_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_partition &rArr; disk_ioctl &rArr; rt_device_control
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[671]"></a>dir_alloc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff.o(.text.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[674]"></a>dir_clear</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, ff.o(.text.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[679]"></a>dir_find</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[673]"></a>dir_next</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[67b]"></a>dir_read</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[67d]"></a>dir_register</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, ff.o(.text.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[680]"></a>dir_remove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ff.o(.text.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dir_remove &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[672]"></a>dir_sdi</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[7a5]"></a>find_volume</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[785]"></a>follow_path</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[67f]"></a>gen_numname</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, ff.o(.text.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gen_numname &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[601]"></a>get_fat</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[78f]"></a>get_fileinfo</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, ff.o(.text.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fileinfo &rArr; put_utf
</UL>
<BR>[Calls]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[78a]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ff.o(.text.get_ldnumber))
<BR><BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[78e]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(.text.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[5a8]"></a>ld_dword</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff.o(.text.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[5a6]"></a>ld_word</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff.o(.text.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[874]"></a>lock_fs</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ff.o(.text.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[783]"></a>mount_volume</STRONG> (Thumb, 612 bytes, Stack size 32 bytes, ff.o(.text.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[5a5]"></a>move_window</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[67c]"></a>pick_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(.text.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[602]"></a>put_fat</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[67e]"></a>put_lfn</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ff.o(.text.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[7db]"></a>put_utf</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(.text.put_utf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = put_utf
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[788]"></a>remove_chain</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ff.o(.text.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[787]"></a>st_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(.text.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[62c]"></a>st_dword</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff.o(.text.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[62d]"></a>st_word</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff.o(.text.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[67a]"></a>sum_sfn</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ff.o(.text.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[789]"></a>sync_fs</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ff.o(.text.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[675]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(.text.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[61d]"></a>tchar2uni</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(.text.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tchar2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[782]"></a>unlock_fs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ff.o(.text.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[781]"></a>validate</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ff.o(.text.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[792]"></a>fd_alloc</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, dfs.o(.text.fd_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[3db]"></a>_get_path_lastname</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfs_file.o(.text._get_path_lastname))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[5e1]"></a>copydir</STRONG> (Thumb, 292 bytes, Stack size 400 bytes, dfs_file.o(.text.copydir))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[5e2]"></a>copyfile</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, dfs_file.o(.text.copyfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[66b]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_ramfs.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_create
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
</UL>

<P><STRONG><a name="[66f]"></a>rt_list_insert_after</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dfs_ramfs.o(.text.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_open
</UL>

<P><STRONG><a name="[670]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dfs_ramfs.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_ramfs_unlink
</UL>

<P><STRONG><a name="[11f]"></a>finsh_rx_ind</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(.text.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_set_device)
</UL>
<P><STRONG><a name="[7b0]"></a>shell_auto_complete</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, shell.o(.text.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[7b1]"></a>shell_handle_history</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, shell.o(.text.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = shell_handle_history &rArr; finsh_get_prompt &rArr; getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[7ad]"></a>shell_push_history</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, shell.o(.text.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shell_push_history &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[472]"></a>_msh_exec_cmd</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, msh.o(.text._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[473]"></a>msh_get_cmd</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, msh.o(.text.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[474]"></a>msh_split</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, msh.o(.text.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[aba]"></a>str_common</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, msh.o(.text.str_common))
<BR><BR>[Called By]<UL><LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[258]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[86b]"></a>list_find_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cmd.o(.text.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
</UL>

<P><STRONG><a name="[86d]"></a>list_get_next</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cmd.o(.text.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
</UL>

<P><STRONG><a name="[86c]"></a>object_split</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cmd.o(.text.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
</UL>

<P><STRONG><a name="[86e]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmd.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[86f]"></a>rt_list_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmd.o(.text.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[870]"></a>show_wait_queue</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cmd.o(.text.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[267]"></a>cmd_cat</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, msh_file.o(.text.cmd_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = cmd_cat &rArr; cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[269]"></a>cmd_cd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, msh_file.o(.text.cmd_cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = cmd_cd &rArr; chdir &rArr; opendir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[265]"></a>cmd_cp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, msh_file.o(.text.cmd_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = cmd_cp &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[26f]"></a>cmd_df</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, msh_file.o(.text.cmd_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = cmd_df &rArr; df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[270]"></a>cmd_echo</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, msh_file.o(.text.cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = cmd_echo &rArr; open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[264]"></a>cmd_ls</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, msh_file.o(.text.cmd_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = cmd_ls &rArr; ls &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[26b]"></a>cmd_mkdir</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, msh_file.o(.text.cmd_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = cmd_mkdir &rArr; mkdir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[26c]"></a>cmd_mkfs</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, msh_file.o(.text.cmd_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = cmd_mkfs &rArr; dfs_mkfs &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[26d]"></a>cmd_mount</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, msh_file.o(.text.cmd_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = cmd_mount &rArr; dfs_mount &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[266]"></a>cmd_mv</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, msh_file.o(.text.cmd_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = cmd_mv &rArr; open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[26a]"></a>cmd_pwd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, msh_file.o(.text.cmd_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cmd_pwd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[268]"></a>cmd_rm</STRONG> (Thumb, 284 bytes, Stack size 104 bytes, msh_file.o(.text.cmd_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = cmd_rm &rArr; directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[271]"></a>cmd_tail</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, msh_file.o(.text.cmd_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = cmd_tail &rArr; open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[26e]"></a>cmd_umount</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, msh_file.o(.text.cmd_umount))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = cmd_umount &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[5c9]"></a>directory_delete_for_msh</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, msh_file.o(.text.directory_delete_for_msh))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + In Cycle
<LI>Call Chain = directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
</UL>

<P><STRONG><a name="[abd]"></a>msh_readline</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, msh_file.o(.text.msh_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = msh_readline &rArr; read &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[233]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[22f]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[243]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[22e]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[b10]"></a>rt_defunct_execute</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, idle.o(.text.rt_defunct_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[b3c]"></a>rt_list_insert_after</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, idle.o(.text.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
</UL>

<P><STRONG><a name="[b3b]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
</UL>

<P><STRONG><a name="[17f]"></a>rt_thread_idle_entry</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, idle.o(.text.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_thread_idle_entry &rArr; rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[3e3]"></a>_ipc_list_resume</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ipc.o(.text._ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
</UL>

<P><STRONG><a name="[3e4]"></a>_ipc_list_resume_all</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ipc.o(.text._ipc_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
</UL>

<P><STRONG><a name="[3e6]"></a>_ipc_list_suspend</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ipc.o(.text._ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
</UL>

<P><STRONG><a name="[3e9]"></a>_ipc_object_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ipc.o(.text._ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[3ea]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[3e8]"></a>rt_list_insert_before</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ipc.o(.text.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>

<P><STRONG><a name="[3e5]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ipc.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[3dd]"></a>_heap_lock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kservice.o(.text._heap_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[3df]"></a>_heap_lock_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kservice.o(.text._heap_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _heap_lock_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[3e1]"></a>_heap_unlock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kservice.o(.text._heap_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[af1]"></a>divide</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, kservice.o(.text.divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = divide
</UL>
<BR>[Called By]<UL><LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[af0]"></a>print_number</STRONG> (Thumb, 428 bytes, Stack size 80 bytes, kservice.o(.text.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[b44]"></a>skip_atoi</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, kservice.o(.text.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[b21]"></a>_remove_next_ptr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, memheap.o(.text._remove_next_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
</UL>

<P><STRONG><a name="[b27]"></a>rt_list_insert_after</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, object.o(.text.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[b28]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, object.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[485]"></a>_scheduler_get_highest_priority_thread</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scheduler.o(.text._scheduler_get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scheduler_get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[487]"></a>_scheduler_stack_check</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(.text._scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[b36]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[b2e]"></a>rt_list_insert_before</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler.o(.text.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[b30]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[b2f]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scheduler.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[fa]"></a>_thread_exit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, thread.o(.text._thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _thread_exit &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._thread_init)
</UL>
<P><STRONG><a name="[496]"></a>_thread_init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, thread.o(.text._thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[fb]"></a>_thread_timeout</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text._thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _thread_timeout &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._thread_init)
</UL>
<P><STRONG><a name="[497]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[49a]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, thread.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[49c]"></a>_timer_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(.text._timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[49e]"></a>_timer_remove</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(.text._timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
</UL>

<P><STRONG><a name="[49d]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>

<P><STRONG><a name="[b41]"></a>rt_list_insert_after</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[b40]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[49f]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>

<P><STRONG><a name="[367]"></a>L1CACHE_CleanInvalidateDCacheByRange</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_cache.o(.text.L1CACHE_CleanInvalidateDCacheByRange))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanInvalidateByRange
</UL>

<P><STRONG><a name="[35e]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[359]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>

<P><STRONG><a name="[363]"></a>CLOCK_GetPllBypassRefClk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetPllBypassRefClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[362]"></a>CLOCK_GetPllUsb1SWFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetPllUsb1SWFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetPllUsb1SWFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[365]"></a>CLOCK_IsPllBypassed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_IsPllBypassed))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[364]"></a>CLOCK_IsPllEnabled</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_IsPllEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[3ca]"></a>DelayLoop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_common_arm.o(.text.DelayLoop))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[34b]"></a>CLOCK_ControlGate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_elcdif.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[354]"></a>CLOCK_EnableClock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_elcdif.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
</UL>

<P><STRONG><a name="[37e]"></a>ELCDIF_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fsl_elcdif.o(.text.ELCDIF_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ELCDIF_GetInstance &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
</UL>

<P><STRONG><a name="[34c]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_elcdif.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[34d]"></a>CLOCK_ControlGate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_gpio.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[355]"></a>CLOCK_EnableClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_gpio.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[387]"></a>GPIO_GetInstance</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = GPIO_GetInstance &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[388]"></a>GPIO_SetPinInterruptConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_gpio.o(.text.GPIO_SetPinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPinInterruptConfig &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[34e]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_gpio.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[38c]"></a>GT911_GetFirmwareCheckSum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_gt911.o(.text.GT911_GetFirmwareCheckSum))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_VerifyFirmware
</UL>

<P><STRONG><a name="[38a]"></a>GT911_ReadRawTouchData</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, fsl_gt911.o(.text.GT911_ReadRawTouchData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GT911_ReadRawTouchData
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_GetSingleTouch
</UL>

<P><STRONG><a name="[38b]"></a>GT911_VerifyFirmware</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_gt911.o(.text.GT911_VerifyFirmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GT911_VerifyFirmware
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_GetFirmwareCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
</UL>

<P><STRONG><a name="[34f]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[356]"></a>CLOCK_EnableClock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[395]"></a>LPI2C_CommonIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LPI2C_CommonIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[399]"></a>LPI2C_GetCyclesForWidth</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C_GetCyclesForWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = LPI2C_GetCyclesForWidth &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[39c]"></a>LPI2C_MasterClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
</UL>

<P><STRONG><a name="[3a0]"></a>LPI2C_MasterEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterEnable))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSetBaudRate
</UL>

<P><STRONG><a name="[3a5]"></a>LPI2C_MasterGetFifoCounts</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterGetFifoCounts))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
</UL>

<P><STRONG><a name="[397]"></a>LPI2C_MasterGetStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterGetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReceive
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CheckForBusyBus
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
</UL>

<P><STRONG><a name="[39d]"></a>LPI2C_MasterReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterReset))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[39e]"></a>LPI2C_MasterSetWatermarks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterSetWatermarks))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[3a2]"></a>LPI2C_MasterWaitForTxReady</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fsl_lpi2c.o(.text.LPI2C_MasterWaitForTxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetFifoCounts
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSend
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReceive
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[3a6]"></a>LPI2C_SlaveCheckAndClearError</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveCheckAndClearError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPI2C_SlaveCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
</UL>

<P><STRONG><a name="[3a7]"></a>LPI2C_SlaveClearStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveCheckAndClearError
</UL>

<P><STRONG><a name="[3a8]"></a>LPI2C_SlaveGetStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveGetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
</UL>

<P><STRONG><a name="[350]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[351]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SDK_AtomicLocalClearAndSet4Byte
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[357]"></a>CLOCK_EnableClock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[3af]"></a>LPUART_SoftwareReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[352]"></a>_SDK_AtomicLocalClearAndSet4Byte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_lpuart.o(.text._SDK_AtomicLocalClearAndSet4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[57b]"></a>calc_content_height</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.calc_content_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = calc_content_height &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_y
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[585]"></a>calc_content_width</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.calc_content_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = calc_content_width &rArr; lv_obj_scroll_to_x &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_y
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_x
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[864]"></a>layout_update_core</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.layout_update_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + In Cycle
<LI>Call Chain = layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[97b]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click_area
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[584]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
</UL>

<P><STRONG><a name="[58c]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
</UL>

<P><STRONG><a name="[582]"></a>lv_obj_get_style_align</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
</UL>

<P><STRONG><a name="[58a]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
</UL>

<P><STRONG><a name="[57d]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
</UL>

<P><STRONG><a name="[9d1]"></a>lv_obj_get_style_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[866]"></a>lv_obj_get_style_layout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[9dc]"></a>lv_obj_get_style_max_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_max_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_max_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[9de]"></a>lv_obj_get_style_max_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_max_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_max_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[9df]"></a>lv_obj_get_style_min_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_min_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_min_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[9e1]"></a>lv_obj_get_style_min_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_min_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_min_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[57f]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
</UL>

<P><STRONG><a name="[588]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
</UL>

<P><STRONG><a name="[587]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
</UL>

<P><STRONG><a name="[57e]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
</UL>

<P><STRONG><a name="[a02]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_angle &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
</UL>

<P><STRONG><a name="[a05]"></a>lv_obj_get_style_transform_pivot_x</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_transform_pivot_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_pivot_x &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
</UL>

<P><STRONG><a name="[a07]"></a>lv_obj_get_style_transform_pivot_y</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_transform_pivot_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_pivot_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
</UL>

<P><STRONG><a name="[a0a]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
</UL>

<P><STRONG><a name="[a0d]"></a>lv_obj_get_style_translate_x</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_translate_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_translate_x &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[a0e]"></a>lv_obj_get_style_translate_y</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_translate_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_translate_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[a0f]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[58b]"></a>lv_obj_get_style_x</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_x &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
</UL>

<P><STRONG><a name="[583]"></a>lv_obj_get_style_y</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_width
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_content_height
</UL>

<P><STRONG><a name="[a3b]"></a>transform_point</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lv_obj_pos.o(.text.transform_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = transform_point &rArr; lv_obj_get_style_transform_zoom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_pivot_y
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_pivot_x
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
</UL>

<P><STRONG><a name="[15f]"></a>arc_anim_end_angle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_spinner.o(.text.arc_anim_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = arc_anim_end_angle &rArr; lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.text.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[160]"></a>arc_anim_start_angle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_spinner.o(.text.arc_anim_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = arc_anim_start_angle &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.text.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[a57]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_spinner.o(.text.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[a5b]"></a>lv_anim_set_path_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_spinner.o(.text.lv_anim_set_path_cb))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[a58]"></a>lv_anim_set_repeat_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_spinner.o(.text.lv_anim_set_repeat_count))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[a59]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_spinner.o(.text.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[a5a]"></a>lv_anim_set_values</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_spinner.o(.text.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[a56]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_spinner.o(.text.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[212]"></a>lv_spinner_constructor</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, lv_spinner.o(.text.lv_spinner_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lv_spinner_constructor &rArr; lv_arc_set_bg_angles &rArr; lv_arc_set_bg_start_angle &rArr; value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_rotation
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_repeat_count
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_path_cb
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.rodata.lv_spinner_class)
</UL>
<P><STRONG><a name="[183]"></a>dark_color_filter_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_theme_default.o(.text.dark_color_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dark_color_filter_cb &rArr; lv_color_darken &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[184]"></a>grey_filter_cb</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_theme_default.o(.text.grey_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = grey_filter_cb &rArr; lv_palette_lighten &rArr; lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[b68]"></a>lv_color_filter_dsc_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_color_filter_dsc_init))
<BR><BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[b66]"></a>lv_color_hex</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_color_hex))
<BR><BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[809]"></a>lv_color_mix</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_theme_default.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[8d4]"></a>lv_disp_dpx</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_disp_dpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_disp_dpx &rArr; lv_disp_get_dpi
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a72]"></a>lv_style_set_pad_all</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_pad_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_style_set_pad_all &rArr; lv_style_set_pad_top &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a78]"></a>lv_style_set_pad_gap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_pad_gap))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_style_set_pad_gap &rArr; lv_style_set_pad_row &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a7a]"></a>lv_style_set_pad_hor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_pad_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_style_set_pad_hor &rArr; lv_style_set_pad_right &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a7b]"></a>lv_style_set_pad_ver</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_pad_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_style_set_pad_ver &rArr; lv_style_set_pad_top &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a82]"></a>lv_style_set_size</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_style_set_size &rArr; lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_height
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[aa2]"></a>style_init</STRONG> (Thumb, 5500 bytes, Stack size 48 bytes, lv_theme_default.o(.text.style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = style_init &rArr; lv_style_set_size &rArr; lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_spread
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_opa
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_ofs_y
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_width
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_ver
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_hor
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_gap
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_dpx
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_filter_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[b67]"></a>style_init_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_theme_default.o(.text.style_init_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = style_init_reset &rArr; lv_style_reset &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[165]"></a>theme_apply</STRONG> (Thumb, 4286 bytes, Stack size 24 bytes, lv_theme_default.o(.text.theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = theme_apply &rArr; lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_check_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[7e6]"></a>get_angle</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lv_arc.o(.text.get_angle))
<BR><BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>

<P><STRONG><a name="[7d1]"></a>get_center</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lv_arc.o(.text.get_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_center &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[7e4]"></a>get_knob_area</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, lv_arc.o(.text.get_knob_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_knob_area &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
</UL>

<P><STRONG><a name="[84a]"></a>inv_arc_area</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, lv_arc.o(.text.inv_arc_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_rounded
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_start_angle
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_end_angle
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>

<P><STRONG><a name="[84d]"></a>inv_knob_area</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, lv_arc.o(.text.inv_knob_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = inv_knob_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>

<P><STRONG><a name="[1d6]"></a>lv_arc_constructor</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_arc_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_arc_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.rodata.lv_arc_class)
</UL>
<P><STRONG><a name="[87d]"></a>lv_arc_draw</STRONG> (Thumb, 436 bytes, Stack size 208 bytes, lv_arc.o(.text.lv_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_arc_draw &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[1d7]"></a>lv_arc_event</STRONG> (Thumb, 1088 bytes, Stack size 56 bytes, lv_arc.o(.text.lv_arc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_arc_event &rArr; lv_arc_set_value &rArr; value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_atan2
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_value
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_get_value
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.rodata.lv_arc_class)
</UL>
<P><STRONG><a name="[84c]"></a>lv_obj_get_style_arc_rounded</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_arc_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_arc_rounded &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[7e5]"></a>lv_obj_get_style_arc_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_arc_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>

<P><STRONG><a name="[7d5]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[7d2]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[7d3]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[7d4]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_draw
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[886]"></a>value_update</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, lv_arc.o(.text.value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_angles
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_value
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_start_angle
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_end_angle
</UL>

<P><STRONG><a name="[8e6]"></a>hex_char_to_num</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lv_draw_label.o(.text.hex_char_to_num))
<BR><BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[8e1]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_label.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[8e0]"></a>lv_bidi_calculate_align</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_label.o(.text.lv_bidi_calculate_align))
<BR><BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[8bd]"></a>lv_color_black</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_draw_label.o(.text.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[8be]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_draw_label.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>

<P><STRONG><a name="[8e2]"></a>lv_font_get_line_height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_draw_label.o(.text.lv_font_get_line_height))
<BR><BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[8e5]"></a>lv_memcpy_small</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_draw_label.o(.text.lv_memcpy_small))
<BR><BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[5b3]"></a>circ_calc_aa4</STRONG> (Thumb, 832 bytes, Stack size 96 bytes, lv_draw_mask.o(.text.circ_calc_aa4))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_next
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_init
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_cont
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
</UL>

<P><STRONG><a name="[5b5]"></a>circ_cont</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.circ_cont))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
</UL>

<P><STRONG><a name="[5b4]"></a>circ_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.circ_init))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
</UL>

<P><STRONG><a name="[5b6]"></a>circ_next</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.circ_next))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
</UL>

<P><STRONG><a name="[8f0]"></a>get_next_line</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_draw_mask.o(.text.get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
</UL>

<P><STRONG><a name="[868]"></a>line_mask_flat</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, lv_draw_mask.o(.text.line_mask_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = line_mask_flat
</UL>
<BR>[Calls]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[86a]"></a>line_mask_steep</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.line_mask_steep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = line_mask_steep
</UL>
<BR>[Calls]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[8ed]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
</UL>

<P><STRONG><a name="[8ef]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
</UL>

<P><STRONG><a name="[8ee]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
</UL>

<P><STRONG><a name="[139]"></a>lv_draw_mask_angle</STRONG> (Thumb, 784 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_draw_mask_angle &rArr; lv_draw_mask_line &rArr; line_mask_steep
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_angle_init)
</UL>
<P><STRONG><a name="[13a]"></a>lv_draw_mask_line</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, lv_draw_mask.o(.text.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_draw_mask_line &rArr; line_mask_steep
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_line_points_init)
</UL>
<P><STRONG><a name="[13b]"></a>lv_draw_mask_radius</STRONG> (Thumb, 710 bytes, Stack size 72 bytes, lv_draw_mask.o(.text.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_draw_mask_radius &rArr; get_next_line
</UL>
<BR>[Calls]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_line
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_radius_init)
</UL>
<P><STRONG><a name="[869]"></a>mask_mix</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.mask_mix))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
</UL>

<P><STRONG><a name="[6ba]"></a>call_flush_cb</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_refr.o(.text.call_flush_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = call_flush_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>

<P><STRONG><a name="[3fd]"></a>draw_buf_flush</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lv_refr.o(.text.draw_buf_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = draw_buf_flush &rArr; draw_buf_rotate &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_flush_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[6bb]"></a>draw_buf_rotate</STRONG> (Thumb, 520 bytes, Stack size 72 bytes, lv_refr.o(.text.draw_buf_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = draw_buf_rotate &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate_90_sqr
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate_90
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate_180
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_flush_cb
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>

<P><STRONG><a name="[6c1]"></a>draw_buf_rotate4</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_refr.o(.text.draw_buf_rotate4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = draw_buf_rotate4
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate_90_sqr
</UL>

<P><STRONG><a name="[6be]"></a>draw_buf_rotate_180</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_refr.o(.text.draw_buf_rotate_180))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = draw_buf_rotate_180
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
</UL>

<P><STRONG><a name="[6c0]"></a>draw_buf_rotate_90</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, lv_refr.o(.text.draw_buf_rotate_90))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = draw_buf_rotate_90
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
</UL>

<P><STRONG><a name="[6bf]"></a>draw_buf_rotate_90_sqr</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, lv_refr.o(.text.draw_buf_rotate_90_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = draw_buf_rotate_90_sqr &rArr; draw_buf_rotate4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate4
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
</UL>

<P><STRONG><a name="[7ee]"></a>get_max_row</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lv_refr.o(.text.get_max_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_max_row
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area
</UL>

<P><STRONG><a name="[85f]"></a>layer_alpha_test</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lv_refr.o(.text.layer_alpha_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = layer_alpha_test &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_adjust
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[861]"></a>layer_get_area</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, lv_refr.o(.text.layer_get_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = layer_get_area &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[43a]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_refr.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>

<P><STRONG><a name="[6bd]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_refr.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_row
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate_180
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
</UL>

<P><STRONG><a name="[6bc]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_refr.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate_180
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
</UL>

<P><STRONG><a name="[406]"></a>lv_color_black</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[8bf]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_refr.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_white
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>

<P><STRONG><a name="[408]"></a>lv_color_white</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_color_white))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[403]"></a>lv_layer_sys</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_layer_sys &rArr; lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[9c8]"></a>lv_obj_get_style_blend_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_obj_get_style_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_blend_mode &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[9e2]"></a>lv_obj_get_style_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[a03]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_angle &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[a06]"></a>lv_obj_get_style_transform_pivot_x</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_obj_get_style_transform_pivot_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_pivot_x &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[a08]"></a>lv_obj_get_style_transform_pivot_y</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_obj_get_style_transform_pivot_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_pivot_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[a0b]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_refr.o(.text.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[a3e]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lv_refr.o(.text.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>

<P><STRONG><a name="[3f8]"></a>lv_refr_join_area</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, lv_refr.o(.text.lv_refr_join_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_refr_join_area &rArr; _lv_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[45f]"></a>perf_monitor_init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lv_refr.o(.text.perf_monitor_init))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
</UL>

<P><STRONG><a name="[afc]"></a>refr_area</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, lv_refr.o(.text.refr_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = refr_area &rArr; refr_area_part &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_row
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_invalid_areas
</UL>

<P><STRONG><a name="[afd]"></a>refr_area_part</STRONG> (Thumb, 424 bytes, Stack size 104 bytes, lv_refr.o(.text.refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = refr_area_part &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area
</UL>

<P><STRONG><a name="[3f9]"></a>refr_invalid_areas</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, lv_refr.o(.text.refr_invalid_areas))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = refr_invalid_areas &rArr; refr_area &rArr; refr_area_part &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[a16]"></a>refr_obj</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, lv_refr.o(.text.refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = refr_obj &rArr; layer_get_area &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_blend
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_pivot_y
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_pivot_x
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_get_area
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_alpha_test
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
</UL>

<P><STRONG><a name="[afe]"></a>refr_obj_and_children</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lv_refr.o(.text.refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = refr_obj_and_children &rArr; refr_obj &rArr; layer_get_area &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[6eb]"></a>draw_indic</STRONG> (Thumb, 1296 bytes, Stack size 296 bytes, lv_bar.o(.text.draw_indic))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = draw_indic &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[88f]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[891]"></a>lv_anim_set_ready_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_anim_set_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[893]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[890]"></a>lv_anim_set_values</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[88e]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[6f2]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[117]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.draw_indic)
</UL>
<P><STRONG><a name="[118]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.draw_indic)
</UL>
<P><STRONG><a name="[128]"></a>lv_bar_anim</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_bar_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_anim_set_exec_cb)
</UL>
<P><STRONG><a name="[130]"></a>lv_bar_anim_ready</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_bar_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_anim_set_ready_cb)
</UL>
<P><STRONG><a name="[1d8]"></a>lv_bar_constructor</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_bar_constructor &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_init_anim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[1d9]"></a>lv_bar_destructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_bar_destructor &rArr; lv_anim_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[1da]"></a>lv_bar_event</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = lv_bar_event &rArr; draw_indic &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[888]"></a>lv_bar_init_anim</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_init_anim))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
</UL>

<P><STRONG><a name="[88d]"></a>lv_bar_set_value_with_anim</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, lv_bar.o(.text.lv_bar_set_value_with_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_time
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_ready_cb
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
</UL>

<P><STRONG><a name="[892]"></a>lv_obj_get_style_anim_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_anim_time &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[6f3]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6f1]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6ee]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6ef]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6f0]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6f4]"></a>lv_obj_get_style_radius</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_radius &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6ed]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6ec]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[3f3]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>

<P><STRONG><a name="[3f2]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>

<P><STRONG><a name="[3f4]"></a>lv_point_within_circle</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_area.o(.text.lv_point_within_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>

<P><STRONG><a name="[538]"></a>auto_hide_characters</STRONG> (Thumb, 90 bytes, Stack size 88 bytes, lv_textarea.o(.text.auto_hide_characters))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = auto_hide_characters &rArr; pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_ready_cb
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_path_cb
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[59c]"></a>char_is_accepted</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lv_textarea.o(.text.char_is_accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = char_is_accepted &rArr; lv_textarea_get_text
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[182]"></a>cursor_blink_anim_cb</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_textarea.o(.text.cursor_blink_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = cursor_blink_anim_cb &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.text.start_cursor_blink)
</UL>
<P><STRONG><a name="[6c2]"></a>draw_cursor</STRONG> (Thumb, 296 bytes, Stack size 144 bytes, lv_textarea.o(.text.draw_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = draw_cursor &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[748]"></a>draw_placeholder</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, lv_textarea.o(.text.draw_placeholder))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = draw_placeholder &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[846]"></a>insert_handler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_textarea.o(.text.insert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = insert_handler &rArr; lv_textarea_add_text &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[aff]"></a>is_valid_but_non_printable_char</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_textarea.o(.text.is_valid_but_non_printable_char))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[164]"></a>label_event_cb</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_textarea.o(.text.label_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = label_event_cb &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.text.lv_textarea_constructor)
</UL>
<P><STRONG><a name="[53a]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
</UL>

<P><STRONG><a name="[53d]"></a>lv_anim_set_path_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_anim_set_path_cb))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
</UL>

<P><STRONG><a name="[b63]"></a>lv_anim_set_playback_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_anim_set_playback_time))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
</UL>

<P><STRONG><a name="[53e]"></a>lv_anim_set_ready_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_anim_set_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
</UL>

<P><STRONG><a name="[b64]"></a>lv_anim_set_repeat_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_anim_set_repeat_count))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
</UL>

<P><STRONG><a name="[53b]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
</UL>

<P><STRONG><a name="[53c]"></a>lv_anim_set_values</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
</UL>

<P><STRONG><a name="[539]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
</UL>

<P><STRONG><a name="[631]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim_cb
</UL>

<P><STRONG><a name="[a9c]"></a>lv_font_get_line_height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_font_get_line_height))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
</UL>

<P><STRONG><a name="[9b2]"></a>lv_obj_get_style_anim_time</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_anim_time &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
</UL>

<P><STRONG><a name="[6c4]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
</UL>

<P><STRONG><a name="[9e6]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[6c5]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
</UL>

<P><STRONG><a name="[9ea]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[6c6]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
</UL>

<P><STRONG><a name="[6c7]"></a>lv_obj_get_style_text_color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_color &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
</UL>

<P><STRONG><a name="[9f9]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_password_bullet
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
</UL>

<P><STRONG><a name="[9fe]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
</UL>

<P><STRONG><a name="[21c]"></a>lv_textarea_constructor</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_textarea_constructor &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[21d]"></a>lv_textarea_destructor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_textarea_destructor &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[21e]"></a>lv_textarea_event</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, lv_textarea.o(.text.lv_textarea_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = lv_textarea_event &rArr; lv_textarea_del_char_forward &rArr; lv_textarea_del_char &rArr; insert_handler &rArr; lv_textarea_add_text &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_placeholder
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_one_line
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char_forward
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[53f]"></a>pwd_char_hider</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lv_textarea.o(.text.pwd_char_hider))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_password_bullet
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider_anim_ready
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_hide_characters
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[105]"></a>pwd_char_hider_anim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_textarea.o(.text.pwd_char_hider_anim))
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.text.auto_hide_characters)
</UL>
<P><STRONG><a name="[131]"></a>pwd_char_hider_anim_ready</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_textarea.o(.text.pwd_char_hider_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = pwd_char_hider_anim_ready &rArr; pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.text.lv_anim_set_ready_cb)
</UL>
<P><STRONG><a name="[85d]"></a>refr_cursor_area</STRONG> (Thumb, 532 bytes, Stack size 72 bytes, lv_textarea.o(.text.refr_cursor_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = refr_cursor_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_but_non_printable_char
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[85e]"></a>start_cursor_blink</STRONG> (Thumb, 122 bytes, Stack size 88 bytes, lv_textarea.o(.text.start_cursor_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = start_cursor_blink &rArr; lv_anim_start &rArr; lv_anim_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_time
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_repeat_count
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_playback_time
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_path_cb
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[a9f]"></a>update_cursor_position_on_click</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, lv_textarea.o(.text.update_cursor_position_on_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = update_cursor_position_on_click &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[638]"></a>decode_and_draw</STRONG> (Thumb, 604 bytes, Stack size 80 bytes, lv_draw_img.o(.text.decode_and_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_read_line
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_decoded
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[63c]"></a>draw_cleanup</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_draw_img.o(.text.draw_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = draw_cleanup &rArr; lv_img_decoder_close &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[63d]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[63f]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[63e]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[8c0]"></a>lv_color_black</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_draw_img.o(.text.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
</UL>

<P><STRONG><a name="[8c1]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_white
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>

<P><STRONG><a name="[8cd]"></a>lv_color_white</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_draw_img.o(.text.lv_color_white))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
</UL>

<P><STRONG><a name="[63b]"></a>show_error</STRONG> (Thumb, 64 bytes, Stack size 112 bytes, lv_draw_img.o(.text.show_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_white
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_and_draw
</UL>

<P><STRONG><a name="[5ab]"></a>children_repos</STRONG> (Thumb, 1026 bytes, Stack size 96 bytes, lv_flex.o(.text.children_repos))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = children_repos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_content
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_y
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_x
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[79e]"></a>find_track_end</STRONG> (Thumb, 720 bytes, Stack size 64 bytes, lv_flex.o(.text.find_track_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = find_track_end &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_width
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_height
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_width
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_height
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_item
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[14b]"></a>flex_update</STRONG> (Thumb, 790 bytes, Stack size 120 bytes, lv_flex.o(.text.flex_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = flex_update &rArr; lv_obj_refr_size &rArr; calc_content_width &rArr; lv_obj_scroll_to_x &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_content
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_track_place
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_main_place
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_flow
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_cross_place
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.lv_flex_init)
</UL>
<P><STRONG><a name="[5ae]"></a>get_next_item</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lv_flex.o(.text.get_next_item))
<BR><BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[5b0]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[107]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[106]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[5ac]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[7b8]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[7b4]"></a>lv_obj_get_style_flex_cross_place</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_flex_cross_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_flex_cross_place &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[7b2]"></a>lv_obj_get_style_flex_flow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_flex_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_flex_flow &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[5af]"></a>lv_obj_get_style_flex_grow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_flex_grow &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[7b3]"></a>lv_obj_get_style_flex_main_place</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_flex_main_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_flex_main_place &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[7b5]"></a>lv_obj_get_style_flex_track_place</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_flex_track_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_flex_track_place &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[7a0]"></a>lv_obj_get_style_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[7a3]"></a>lv_obj_get_style_max_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_max_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_max_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[7a4]"></a>lv_obj_get_style_max_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_max_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_max_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[7a1]"></a>lv_obj_get_style_min_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_min_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_min_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[7a2]"></a>lv_obj_get_style_min_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_min_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_min_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[7b6]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[7ba]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[7b7]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[7b9]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[5b1]"></a>lv_obj_get_style_translate_x</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_translate_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_translate_x &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[5b2]"></a>lv_obj_get_style_translate_y</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_translate_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_translate_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[79f]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[5ad]"></a>place_content</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, lv_flex.o(.text.place_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = place_content
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[8c8]"></a>lv_color_brightness</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_led.o(.text.lv_color_brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_brightness
</UL>
<BR>[Calls]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_to32
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
</UL>

<P><STRONG><a name="[963]"></a>lv_color_mix</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_led.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
</UL>

<P><STRONG><a name="[8c9]"></a>lv_color_to32</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lv_led.o(.text.lv_color_to32))
<BR><BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_brightness
</UL>

<P><STRONG><a name="[1fb]"></a>lv_led_constructor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_led.o(.text.lv_led_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_led_constructor &rArr; lv_theme_get_color_primary &rArr; lv_theme_get_from_obj &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.rodata.lv_led_class)
</UL>
<P><STRONG><a name="[1fc]"></a>lv_led_event</STRONG> (Thumb, 424 bytes, Stack size 168 bytes, lv_led.o(.text.lv_led_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_led_event &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_brightness
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.rodata.lv_led_class)
</UL>
<P><STRONG><a name="[16b]"></a>month_event_cb</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lv_calendar_header_arrow.o(.text.month_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = month_event_cb &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[1e0]"></a>my_constructor</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lv_calendar_header_arrow.o(.text.my_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = my_constructor &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(.rodata.lv_calendar_header_arrow_class)
</UL>
<P><STRONG><a name="[16c]"></a>value_changed_event_cb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_calendar_header_arrow.o(.text.value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = value_changed_event_cb &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[a24]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
</UL>

<P><STRONG><a name="[a25]"></a>lv_anim_set_path_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_anim_set_path_cb))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
</UL>

<P><STRONG><a name="[a21]"></a>lv_anim_set_ready_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_anim_set_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
</UL>

<P><STRONG><a name="[a22]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
</UL>

<P><STRONG><a name="[a23]"></a>lv_anim_set_values</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
</UL>

<P><STRONG><a name="[a20]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
</UL>

<P><STRONG><a name="[b55]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[b56]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[9ab]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[9b0]"></a>lv_obj_get_style_bg_opa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[9b1]"></a>lv_obj_get_style_border_opa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[9aa]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[9a9]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[9ad]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[9ac]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[9a8]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[9af]"></a>lv_obj_get_style_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[132]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = scroll_anim_ready_cb &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_scroll.o(.text.lv_anim_set_ready_cb)
</UL>
<P><STRONG><a name="[a27]"></a>scroll_area_into_view</STRONG> (Thumb, 738 bytes, Stack size 64 bytes, lv_obj_scroll.o(.text.scroll_area_into_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = scroll_area_into_view &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
</UL>

<P><STRONG><a name="[15b]"></a>scroll_x_anim</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.scroll_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = scroll_x_anim &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to_x)
<LI> lv_obj_scroll.o(.text.scroll_area_into_view)
</UL>
<P><STRONG><a name="[15c]"></a>scroll_y_anim</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.scroll_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = scroll_y_anim &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to_y)
<LI> lv_obj_scroll.o(.text.scroll_area_into_view)
</UL>
<P><STRONG><a name="[210]"></a>lv_spinbox_constructor</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lv_spinbox.o(.text.lv_spinbox_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = lv_spinbox_constructor &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_click_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinbox.o(.rodata.lv_spinbox_class)
</UL>
<P><STRONG><a name="[211]"></a>lv_spinbox_event</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, lv_spinbox.o(.text.lv_spinbox_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lv_spinbox_event &rArr; lv_spinbox_step_prev &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_step_prev
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_step_next
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_increment
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_decrement
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_pow
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinbox.o(.rodata.lv_spinbox_class)
</UL>
<P><STRONG><a name="[a4f]"></a>lv_spinbox_updatevalue</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, lv_spinbox.o(.text.lv_spinbox_updatevalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_step_prev
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_step_next
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_increment
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_decrement
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[4cb]"></a>allocate_btn_areas_and_controls</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lv_btnmatrix.o(.text.allocate_btn_areas_and_controls))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = allocate_btn_areas_and_controls &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>

<P><STRONG><a name="[70f]"></a>button_get_checked</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.button_get_checked))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[89b]"></a>button_is_checkable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.button_is_checkable))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[89c]"></a>button_is_checked</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.button_is_checked))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[899]"></a>button_is_click_trig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.button_is_click_trig))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[70e]"></a>button_is_hidden</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.button_is_hidden))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[710]"></a>button_is_inactive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.button_is_inactive))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[812]"></a>button_is_popover</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.button_is_popover))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_popovers_in_top_row
</UL>

<P><STRONG><a name="[712]"></a>button_is_recolor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.button_is_recolor))
<BR><BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[89a]"></a>button_is_repeat_disabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.button_is_repeat_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[709]"></a>draw_main</STRONG> (Thumb, 916 bytes, Stack size 360 bytes, lv_btnmatrix.o(.text.draw_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = draw_main &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_recolor
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_inactive
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_hidden
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get_checked
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[7ca]"></a>get_button_from_point</STRONG> (Thumb, 390 bytes, Stack size 96 bytes, lv_btnmatrix.o(.text.get_button_from_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = get_button_from_point &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[8a3]"></a>get_button_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.get_button_width))
<BR><BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>

<P><STRONG><a name="[811]"></a>has_popovers_in_top_row</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lv_btnmatrix.o(.text.has_popovers_in_top_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = has_popovers_in_top_row &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_popover
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[84f]"></a>invalidate_button_area</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, lv_btnmatrix.o(.text.invalidate_button_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_selected_btn
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[711]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[713]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[714]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[1dc]"></a>lv_btnmatrix_constructor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_btnmatrix_constructor &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[1dd]"></a>lv_btnmatrix_destructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_btnmatrix_destructor &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[1de]"></a>lv_btnmatrix_event</STRONG> (Thumb, 1586 bytes, Stack size 48 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = lv_btnmatrix_event &rArr; draw_main &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_popovers_in_top_row
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_repeat_disabled
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_popover
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_inactive
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_hidden
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_click_trig
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_checked
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_checkable
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get_checked
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[8a2]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>

<P><STRONG><a name="[70b]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[7cc]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
</UL>

<P><STRONG><a name="[70c]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[70d]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[7cb]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
</UL>

<P><STRONG><a name="[70a]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[89e]"></a>make_one_button_checked</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.make_one_button_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = make_one_button_checked &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_has_btn_ctrl
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[715]"></a>draw_main</STRONG> (Thumb, 362 bytes, Stack size 168 bytes, lv_switch.o(.text.draw_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = draw_main &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
</UL>

<P><STRONG><a name="[a8e]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_switch.o(.text.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
</UL>

<P><STRONG><a name="[a90]"></a>lv_anim_set_ready_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_switch.o(.text.lv_anim_set_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
</UL>

<P><STRONG><a name="[a91]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_switch.o(.text.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
</UL>

<P><STRONG><a name="[a8f]"></a>lv_anim_set_values</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_switch.o(.text.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
</UL>

<P><STRONG><a name="[a8d]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_switch.o(.text.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
</UL>

<P><STRONG><a name="[71a]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_switch.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[71b]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_switch.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[9b3]"></a>lv_obj_get_style_anim_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_obj_get_style_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_anim_time &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
</UL>

<P><STRONG><a name="[71c]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[719]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[716]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[717]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[718]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[129]"></a>lv_switch_anim_exec_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_switch_anim_exec_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_switch_anim_exec_cb &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.text.lv_anim_set_exec_cb)
</UL>
<P><STRONG><a name="[133]"></a>lv_switch_anim_ready</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_switch_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_switch_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.text.lv_anim_set_ready_cb)
</UL>
<P><STRONG><a name="[213]"></a>lv_switch_constructor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_switch_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_switch_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.rodata.lv_switch_class)
</UL>
<P><STRONG><a name="[214]"></a>lv_switch_destructor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_switch_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_switch_destructor &rArr; lv_anim_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.rodata.lv_switch_class)
</UL>
<P><STRONG><a name="[215]"></a>lv_switch_event</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, lv_switch.o(.text.lv_switch_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_switch_event &rArr; lv_switch_trigger_anim &rArr; lv_anim_start &rArr; lv_anim_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_trigger_anim
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.rodata.lv_switch_class)
</UL>
<P><STRONG><a name="[a8c]"></a>lv_switch_trigger_anim</STRONG> (Thumb, 118 bytes, Stack size 96 bytes, lv_switch.o(.text.lv_switch_trigger_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_switch_trigger_anim &rArr; lv_anim_start &rArr; lv_anim_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_time
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_ready_cb
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
</UL>

<P><STRONG><a name="[703]"></a>draw_line_hor</STRONG> (Thumb, 424 bytes, Stack size 80 bytes, lv_draw_sw_line.o(.text.draw_line_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = draw_line_hor &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>

<P><STRONG><a name="[705]"></a>draw_line_skew</STRONG> (Thumb, 860 bytes, Stack size 280 bytes, lv_draw_sw_line.o(.text.draw_line_skew))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = draw_line_skew &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>

<P><STRONG><a name="[707]"></a>draw_line_ver</STRONG> (Thumb, 386 bytes, Stack size 80 bytes, lv_draw_sw_line.o(.text.draw_line_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = draw_line_ver &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>

<P><STRONG><a name="[704]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_line.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
</UL>

<P><STRONG><a name="[71d]"></a>draw_main</STRONG> (Thumb, 534 bytes, Stack size 96 bytes, lv_label.o(.text.draw_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = draw_main &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_color
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bidi_calculate_align
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[959]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[956]"></a>lv_anim_set_playback_delay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.lv_anim_set_playback_delay))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[95d]"></a>lv_anim_set_playback_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_anim_set_playback_time))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[955]"></a>lv_anim_set_repeat_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_label.o(.text.lv_anim_set_repeat_count))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[957]"></a>lv_anim_set_repeat_delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_anim_set_repeat_delay))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[95c]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[958]"></a>lv_anim_set_values</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_label.o(.text.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[954]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[726]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_label.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[725]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_label.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[720]"></a>lv_bidi_calculate_align</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_label.o(.text.lv_bidi_calculate_align))
<BR><BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[728]"></a>lv_font_get_line_height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.lv_font_get_line_height))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[1f8]"></a>lv_label_constructor</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_label_constructor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[1f9]"></a>lv_label_destructor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_label_destructor &rArr; lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[946]"></a>lv_label_dot_tmp_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_dot_tmp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
</UL>

<P><STRONG><a name="[1fa]"></a>lv_label_event</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, lv_label.o(.text.lv_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lv_label_event &rArr; draw_main &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[95f]"></a>lv_label_get_dot_tmp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_dot_tmp))
<BR><BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
</UL>

<P><STRONG><a name="[948]"></a>lv_label_refr_text</STRONG> (Thumb, 1308 bytes, Stack size 136 bytes, lv_label.o(.text.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_speed
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_repeat_delay
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_repeat_count
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_playback_time
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_playback_delay
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
</UL>

<P><STRONG><a name="[947]"></a>lv_label_revert_dots</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_revert_dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_label_revert_dots &rArr; lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_dot_tmp
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
</UL>

<P><STRONG><a name="[95e]"></a>lv_label_set_dot_tmp</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_set_dot_tmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_label_set_dot_tmp &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[95a]"></a>lv_obj_get_style_anim</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_anim &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[953]"></a>lv_obj_get_style_anim_speed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_anim_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_anim_speed &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[724]"></a>lv_obj_get_style_bg_color</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_color &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[94d]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[94e]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[723]"></a>lv_obj_get_style_text_color_filtered</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_text_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[949]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[94a]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[94b]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[71f]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[154]"></a>set_ofs_x_anim</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_label.o(.text.set_ofs_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = set_ofs_x_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(.text.lv_label_refr_text)
<LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[155]"></a>set_ofs_y_anim</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_label.o(.text.set_ofs_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = set_ofs_y_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(.text.lv_label_refr_text)
<LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[8c2]"></a>lv_color_black</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_color.o(.text.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>

<P><STRONG><a name="[8c3]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hsv_to_rgb
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>

<P><STRONG><a name="[8ca]"></a>lv_color_mix</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_color.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>

<P><STRONG><a name="[4eb]"></a>argb_and_rgb_aa</STRONG> (Thumb, 938 bytes, Stack size 128 bytes, lv_draw_sw_transform.o(.text.argb_and_rgb_aa))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = argb_and_rgb_aa &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[907]"></a>argb_no_aa</STRONG> (Thumb, 130 bytes, Stack size 44 bytes, lv_draw_sw_transform.o(.text.argb_no_aa))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = argb_no_aa
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[904]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_transform.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[903]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_transform.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[4ed]"></a>lv_color_mix</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_draw_sw_transform.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;argb_and_rgb_aa
</UL>

<P><STRONG><a name="[908]"></a>rgb565a8_no_aa</STRONG> (Thumb, 160 bytes, Stack size 52 bytes, lv_draw_sw_transform.o(.text.rgb565a8_no_aa))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rgb565a8_no_aa
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[906]"></a>rgb_no_aa</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, lv_draw_sw_transform.o(.text.rgb_no_aa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rgb_no_aa
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[905]"></a>transform_point_upscaled</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lv_draw_sw_transform.o(.text.transform_point_upscaled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = transform_point_upscaled
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
</UL>

<P><STRONG><a name="[1e2]"></a>lv_canvas_constructor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_canvas.o(.text.lv_canvas_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_canvas_constructor &rArr; lv_img_set_src &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_canvas.o(.rodata.lv_canvas_class)
</UL>
<P><STRONG><a name="[1e3]"></a>lv_canvas_destructor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_canvas.o(.text.lv_canvas_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_canvas_destructor
</UL>
<BR>[Calls]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_canvas.o(.rodata.lv_canvas_class)
</UL>
<P><STRONG><a name="[7dc]"></a>get_glyph_dsc_id</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, lv_font_fmt_txt.o(.text.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[7e3]"></a>get_kern_value</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, lv_font_fmt_txt.o(.text.get_kern_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_kern_value &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
</UL>

<P><STRONG><a name="[125]"></a>kern_pair_16_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.get_kern_value)
</UL>
<P><STRONG><a name="[124]"></a>kern_pair_8_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.get_kern_value)
</UL>
<P><STRONG><a name="[123]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[749]"></a>draw_quarter_0</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, lv_draw_sw_arc.o(.text.draw_quarter_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = draw_quarter_0 &rArr; lv_draw_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[74a]"></a>draw_quarter_1</STRONG> (Thumb, 506 bytes, Stack size 32 bytes, lv_draw_sw_arc.o(.text.draw_quarter_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = draw_quarter_1 &rArr; lv_draw_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[74b]"></a>draw_quarter_2</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, lv_draw_sw_arc.o(.text.draw_quarter_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = draw_quarter_2 &rArr; lv_draw_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[74c]"></a>draw_quarter_3</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, lv_draw_sw_arc.o(.text.draw_quarter_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = draw_quarter_3 &rArr; lv_draw_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[7f6]"></a>get_rounded_area</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lv_draw_sw_arc.o(.text.get_rounded_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_rounded_area
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[8f4]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_arc.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[8f6]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_arc.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[8f5]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_arc.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[7bc]"></a>focus_next_core</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, lv_group.o(.text.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>

<P><STRONG><a name="[7bd]"></a>get_indev</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_group.o(.text.get_indev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_indev &rArr; lv_indev_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
</UL>

<P><STRONG><a name="[925]"></a>lv_group_refocus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_refocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[16e]"></a>month_event_cb</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(.text.month_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = month_event_cb &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[1e1]"></a>my_constructor</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(.text.my_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = my_constructor &rArr; lv_dropdown_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.rodata.lv_calendar_header_dropdown_class)
</UL>
<P><STRONG><a name="[16f]"></a>value_changed_event_cb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(.text.value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = value_changed_event_cb &rArr; lv_dropdown_set_selected &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[16d]"></a>year_event_cb</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(.text.year_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = year_event_cb &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[91e]"></a>lv_fs_get_real_path</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_fs.o(.text.lv_fs_get_real_path))
<BR><BR>[Called By]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[920]"></a>lv_fs_read_cached</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, lv_fs.o(.text.lv_fs_read_cached))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_fs_read_cached &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>

<P><STRONG><a name="[221]"></a>lv_win_constructor</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_win.o(.text.lv_win_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_win_constructor &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_win.o(.rodata.lv_win_class)
</UL>
<P><STRONG><a name="[8b9]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_checkbox.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8bc]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_checkbox.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[1e7]"></a>lv_checkbox_constructor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_checkbox_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_checkbox_constructor &rArr; lv_obj_add_flag &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[1e8]"></a>lv_checkbox_destructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_checkbox_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_checkbox_destructor &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[8ae]"></a>lv_checkbox_draw</STRONG> (Thumb, 460 bytes, Stack size 264 bytes, lv_checkbox.o(.text.lv_checkbox_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = lv_checkbox_draw &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
</UL>

<P><STRONG><a name="[1e9]"></a>lv_checkbox_event</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, lv_checkbox.o(.text.lv_checkbox_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = lv_checkbox_event &rArr; lv_checkbox_draw &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[8b0]"></a>lv_font_get_line_height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_checkbox.o(.text.lv_font_get_line_height))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8b1]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8b6]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8b4]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8b3]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8b5]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8b2]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8af]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8bb]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8ba]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8b8]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[8b7]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_draw
</UL>

<P><STRONG><a name="[11a]"></a>color_blend_true_color_additive</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lv_draw_sw_blend.o(.text.color_blend_true_color_additive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = color_blend_true_color_additive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_sw_blend.o(.text.fill_blended)
<LI> lv_draw_sw_blend.o(.text.map_blended)
</UL>
<P><STRONG><a name="[11c]"></a>color_blend_true_color_multiply</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lv_draw_sw_blend.o(.text.color_blend_true_color_multiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = color_blend_true_color_multiply &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_sw_blend.o(.text.fill_blended)
<LI> lv_draw_sw_blend.o(.text.map_blended)
</UL>
<P><STRONG><a name="[11b]"></a>color_blend_true_color_subtractive</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lv_draw_sw_blend.o(.text.color_blend_true_color_subtractive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = color_blend_true_color_subtractive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_sw_blend.o(.text.fill_blended)
<LI> lv_draw_sw_blend.o(.text.map_blended)
</UL>
<P><STRONG><a name="[796]"></a>fill_blended</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, lv_draw_sw_blend.o(.text.fill_blended))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fill_blended
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[799]"></a>fill_normal</STRONG> (Thumb, 1024 bytes, Stack size 128 bytes, lv_draw_sw_blend.o(.text.fill_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fill_normal &rArr; lv_color_mix_premult
</UL>
<BR>[Calls]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_fill
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_premult
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_premult
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[79d]"></a>fill_set_px</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, lv_draw_sw_blend.o(.text.fill_set_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fill_set_px
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[798]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_blend.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_blended
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
</UL>

<P><STRONG><a name="[797]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_blend.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_blended
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
</UL>

<P><STRONG><a name="[5ce]"></a>lv_color_mix</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_draw_sw_blend.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_subtractive
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_multiply
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_additive
</UL>

<P><STRONG><a name="[79c]"></a>lv_color_mix_premult</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lv_draw_sw_blend.o(.text.lv_color_mix_premult))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix_premult
</UL>
<BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[79b]"></a>lv_color_premult</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_draw_sw_blend.o(.text.lv_color_premult))
<BR><BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[8f8]"></a>map_blended</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, lv_draw_sw_blend.o(.text.map_blended))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = map_blended
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[8f9]"></a>map_normal</STRONG> (Thumb, 1004 bytes, Stack size 120 bytes, lv_draw_sw_blend.o(.text.map_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = map_normal &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[8f7]"></a>map_set_px</STRONG> (Thumb, 294 bytes, Stack size 80 bytes, lv_draw_sw_blend.o(.text.map_set_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = map_set_px
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[a13]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[a12]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[9b5]"></a>lv_obj_get_style_arc_color_filtered</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_arc_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_arc_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
</UL>

<P><STRONG><a name="[9b6]"></a>lv_obj_get_style_arc_img_src</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_arc_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_arc_img_src &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
</UL>

<P><STRONG><a name="[9b7]"></a>lv_obj_get_style_arc_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_arc_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_arc_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
</UL>

<P><STRONG><a name="[9b8]"></a>lv_obj_get_style_arc_rounded</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_arc_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_arc_rounded &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
</UL>

<P><STRONG><a name="[9b9]"></a>lv_obj_get_style_arc_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_arc_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
</UL>

<P><STRONG><a name="[9bb]"></a>lv_obj_get_style_bg_color_filtered</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_bg_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9bc]"></a>lv_obj_get_style_bg_dither_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_dither_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_dither_mode &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9bd]"></a>lv_obj_get_style_bg_grad</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_grad))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_grad &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9be]"></a>lv_obj_get_style_bg_grad_color_filtered</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_grad_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_bg_grad_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9bf]"></a>lv_obj_get_style_bg_grad_dir</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_grad_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_grad_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9c0]"></a>lv_obj_get_style_bg_grad_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_grad_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_grad_stop &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9c1]"></a>lv_obj_get_style_bg_img_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_img_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_img_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9c2]"></a>lv_obj_get_style_bg_img_recolor_filtered</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_img_recolor_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_bg_img_recolor_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9c3]"></a>lv_obj_get_style_bg_img_recolor_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_img_recolor_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_img_recolor_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9c4]"></a>lv_obj_get_style_bg_img_src</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_img_src &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9c5]"></a>lv_obj_get_style_bg_img_tiled</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_img_tiled))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_img_tiled &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9c6]"></a>lv_obj_get_style_bg_main_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_main_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_main_stop &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9c7]"></a>lv_obj_get_style_bg_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9c9]"></a>lv_obj_get_style_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_blend_mode &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[9cb]"></a>lv_obj_get_style_border_color_filtered</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_border_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_border_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9cc]"></a>lv_obj_get_style_border_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9ce]"></a>lv_obj_get_style_border_side</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9cf]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9d3]"></a>lv_obj_get_style_img_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_img_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_img_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[9d4]"></a>lv_obj_get_style_img_recolor_filtered</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_img_recolor_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_img_recolor_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[9d5]"></a>lv_obj_get_style_img_recolor_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_img_recolor_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_img_recolor_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[9d6]"></a>lv_obj_get_style_line_color_filtered</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_line_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_line_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
</UL>

<P><STRONG><a name="[9d7]"></a>lv_obj_get_style_line_dash_gap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_line_dash_gap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_line_dash_gap &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
</UL>

<P><STRONG><a name="[9d8]"></a>lv_obj_get_style_line_dash_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_line_dash_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_line_dash_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
</UL>

<P><STRONG><a name="[9d9]"></a>lv_obj_get_style_line_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_line_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_line_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
</UL>

<P><STRONG><a name="[9da]"></a>lv_obj_get_style_line_rounded</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_line_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_line_rounded &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
</UL>

<P><STRONG><a name="[9db]"></a>lv_obj_get_style_line_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_line_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
</UL>

<P><STRONG><a name="[9e3]"></a>lv_obj_get_style_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[9e5]"></a>lv_obj_get_style_outline_color_filtered</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_outline_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_outline_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[982]"></a>lv_obj_get_style_outline_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_outline_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[983]"></a>lv_obj_get_style_outline_pad</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_outline_pad &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[981]"></a>lv_obj_get_style_outline_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_outline_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9f0]"></a>lv_obj_get_style_radius</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_radius &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9f2]"></a>lv_obj_get_style_shadow_color_filtered</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_shadow_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[97f]"></a>lv_obj_get_style_shadow_ofs_x</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_shadow_ofs_x &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[980]"></a>lv_obj_get_style_shadow_ofs_y</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_shadow_ofs_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[97d]"></a>lv_obj_get_style_shadow_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_shadow_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[97e]"></a>lv_obj_get_style_shadow_spread</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_shadow_spread &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[97c]"></a>lv_obj_get_style_shadow_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[9f6]"></a>lv_obj_get_style_text_align</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[9f7]"></a>lv_obj_get_style_text_color_filtered</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[9f8]"></a>lv_obj_get_style_text_decor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_decor))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_decor &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[9fa]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[9fc]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[9ff]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[a01]"></a>lv_obj_get_style_text_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[985]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[984]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[442]"></a>node_set_next</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_ll.o(.text.node_set_next))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>

<P><STRONG><a name="[441]"></a>node_set_prev</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text.node_set_prev))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>

<P><STRONG><a name="[77e]"></a>event_is_bubbled</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lv_event.o(.text.event_is_bubbled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = event_is_bubbled
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>

<P><STRONG><a name="[77f]"></a>event_send_core</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, lv_event.o(.text.event_send_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_event_dsc
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_is_bubbled
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>

<P><STRONG><a name="[780]"></a>lv_obj_get_event_dsc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_event.o(.text.lv_obj_get_event_dsc))
<BR><BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>

<P><STRONG><a name="[8db]"></a>lv_obj_remove_style_all</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_hal_disp.o(.text.lv_obj_remove_style_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[542]"></a>btn_release_handler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_dropdown.o(.text.btn_release_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = btn_release_handler &rArr; lv_dropdown_open &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_is_open
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[6ae]"></a>draw_box</STRONG> (Thumb, 176 bytes, Stack size 104 bytes, lv_dropdown.o(.text.draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = draw_box &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_list
</UL>

<P><STRONG><a name="[6b6]"></a>draw_box_label</STRONG> (Thumb, 208 bytes, Stack size 88 bytes, lv_dropdown.o(.text.draw_box_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = draw_box_label &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_list
</UL>

<P><STRONG><a name="[708]"></a>draw_list</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lv_dropdown.o(.text.draw_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = draw_list &rArr; draw_box_label &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[729]"></a>draw_main</STRONG> (Thumb, 642 bytes, Stack size 136 bytes, lv_dropdown.o(.text.draw_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = draw_main &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected_str
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[7e0]"></a>get_id_on_point</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_dropdown.o(.text.get_id_on_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_id_on_point &rArr; lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_press_handler
</UL>

<P><STRONG><a name="[6b2]"></a>get_label</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_dropdown.o(.text.get_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_label
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id_on_point
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
</UL>

<P><STRONG><a name="[871]"></a>list_press_handler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lv_dropdown.o(.text.list_press_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = list_press_handler &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id_on_point
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[872]"></a>list_release_handler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lv_dropdown.o(.text.list_release_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = list_release_handler &rArr; lv_dropdown_close &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id_on_point
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[1ec]"></a>lv_dropdown_constructor</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_dropdown_constructor &rArr; lv_dropdown_list_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[1ed]"></a>lv_dropdown_destructor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_dropdown_destructor &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[1ee]"></a>lv_dropdown_event</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, lv_dropdown.o(.text.lv_dropdown_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = lv_dropdown_event &rArr; draw_main &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_is_open
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_close
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[90a]"></a>lv_dropdown_list_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_list_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_dropdown_list_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
</UL>

<P><STRONG><a name="[1f1]"></a>lv_dropdown_list_event</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lv_dropdown.o(.text.lv_dropdown_list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lv_dropdown_list_event &rArr; draw_list &rArr; draw_box_label &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_release_handler
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_press_handler
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[1ef]"></a>lv_dropdownlist_constructor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdownlist_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_dropdownlist_constructor &rArr; lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[1f0]"></a>lv_dropdownlist_destructor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_dropdownlist_destructor))
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[6b1]"></a>lv_font_get_line_height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_font_get_line_height))
<BR><BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id_on_point
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
</UL>

<P><STRONG><a name="[72f]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[72a]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[90f]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[72b]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[72c]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[72d]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[6af]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id_on_point
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
</UL>

<P><STRONG><a name="[6b0]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_id_on_point
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
</UL>

<P><STRONG><a name="[730]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_angle &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[90b]"></a>position_to_selected</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_dropdown.o(.text.position_to_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = position_to_selected &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[568]"></a>calc</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, lv_grid.o(.text.calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = calc &rArr; calc_rows &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_align
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_grid_row_align
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_grid_col_align
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[56a]"></a>calc_cols</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, lv_grid.o(.text.calc_cols))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = calc_cols &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_span
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_pos
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_dsc
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_tracks
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[58d]"></a>calc_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_grid.o(.text.calc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[569]"></a>calc_rows</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, lv_grid.o(.text.calc_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = calc_rows &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_span
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_pos
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_dsc
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_tracks
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[576]"></a>count_tracks</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_grid.o(.text.count_tracks))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>

<P><STRONG><a name="[7cd]"></a>get_cell_col_align</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_grid.o(.text.get_cell_col_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_cell_col_align &rArr; lv_obj_get_style_grid_cell_x_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_x_align
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>

<P><STRONG><a name="[7cf]"></a>get_cell_row_align</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_grid.o(.text.get_cell_row_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_cell_row_align &rArr; lv_obj_get_style_grid_cell_y_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_y_align
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>

<P><STRONG><a name="[575]"></a>get_col_dsc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_grid.o(.text.get_col_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_col_dsc &rArr; lv_obj_get_style_grid_column_dsc_array &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_column_dsc_array
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>

<P><STRONG><a name="[57a]"></a>get_col_pos</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_grid.o(.text.get_col_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_col_pos &rArr; lv_obj_get_style_grid_cell_column_pos &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_column_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>

<P><STRONG><a name="[579]"></a>get_col_span</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_grid.o(.text.get_col_span))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_col_span &rArr; lv_obj_get_style_grid_cell_column_span &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_column_span
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>

<P><STRONG><a name="[571]"></a>get_grid_col_align</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_grid.o(.text.get_grid_col_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_grid_col_align &rArr; lv_obj_get_style_grid_column_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_column_align
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[574]"></a>get_grid_row_align</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_grid.o(.text.get_grid_row_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_grid_row_align &rArr; lv_obj_get_style_grid_row_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_row_align
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[58f]"></a>get_row_dsc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_grid.o(.text.get_row_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_row_dsc &rArr; lv_obj_get_style_grid_row_dsc_array &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_row_dsc_array
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
</UL>

<P><STRONG><a name="[591]"></a>get_row_pos</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_grid.o(.text.get_row_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_row_pos &rArr; lv_obj_get_style_grid_cell_row_pos &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_row_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
</UL>

<P><STRONG><a name="[590]"></a>get_row_span</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_grid.o(.text.get_row_span))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_row_span &rArr; lv_obj_get_style_grid_cell_row_span &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_grid_cell_row_span
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
</UL>

<P><STRONG><a name="[572]"></a>grid_align</STRONG> (Thumb, 292 bytes, Stack size 28 bytes, lv_grid.o(.text.grid_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = grid_align
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[14d]"></a>grid_update</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, lv_grid.o(.text.grid_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = grid_update &rArr; lv_obj_refr_size &rArr; calc_content_width &rArr; lv_obj_scroll_to_x &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_dsc
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_dsc
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_free
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_grid.o(.text.lv_grid_init)
</UL>
<P><STRONG><a name="[80d]"></a>item_repos</STRONG> (Thumb, 762 bytes, Stack size 72 bytes, lv_grid.o(.text.item_repos))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = item_repos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_y
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_translate_x
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_span
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_pos
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_span
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_pos
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_row_align
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_col_align
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[859]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>

<P><STRONG><a name="[858]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>

<P><STRONG><a name="[857]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_grid.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>

<P><STRONG><a name="[56d]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[80a]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[7d7]"></a>lv_obj_get_style_grid_cell_column_pos</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_grid_cell_column_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_grid_cell_column_pos &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_pos
</UL>

<P><STRONG><a name="[7d8]"></a>lv_obj_get_style_grid_cell_column_span</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_grid_cell_column_span))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_grid_cell_column_span &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_span
</UL>

<P><STRONG><a name="[7fa]"></a>lv_obj_get_style_grid_cell_row_pos</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_grid_cell_row_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_grid_cell_row_pos &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_pos
</UL>

<P><STRONG><a name="[7fb]"></a>lv_obj_get_style_grid_cell_row_span</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_grid_cell_row_span))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_grid_cell_row_span &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_span
</UL>

<P><STRONG><a name="[7ce]"></a>lv_obj_get_style_grid_cell_x_align</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_grid_cell_x_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_grid_cell_x_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_col_align
</UL>

<P><STRONG><a name="[7d0]"></a>lv_obj_get_style_grid_cell_y_align</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_grid_cell_y_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_grid_cell_y_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_row_align
</UL>

<P><STRONG><a name="[7de]"></a>lv_obj_get_style_grid_column_align</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_grid_column_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_grid_column_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_grid_col_align
</UL>

<P><STRONG><a name="[7d6]"></a>lv_obj_get_style_grid_column_dsc_array</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_grid_column_dsc_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_grid_column_dsc_array &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_dsc
</UL>

<P><STRONG><a name="[7df]"></a>lv_obj_get_style_grid_row_align</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_grid_row_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_grid_row_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_grid_row_align
</UL>

<P><STRONG><a name="[7f7]"></a>lv_obj_get_style_grid_row_dsc_array</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_grid_row_dsc_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_grid_row_dsc_array &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_dsc
</UL>

<P><STRONG><a name="[56f]"></a>lv_obj_get_style_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[56b]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[80b]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[56c]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[80c]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[85a]"></a>lv_obj_get_style_translate_x</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_translate_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_translate_x &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>

<P><STRONG><a name="[85b]"></a>lv_obj_get_style_translate_y</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_translate_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_translate_y &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>

<P><STRONG><a name="[56e]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[731]"></a>draw_main</STRONG> (Thumb, 1216 bytes, Stack size 416 bytes, lv_table.o(.text.draw_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = draw_main &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cell_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[7f1]"></a>get_pressed_cell</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, lv_table.o(.text.get_pressed_cell))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_pressed_cell &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[7f8]"></a>get_row_height</STRONG> (Thumb, 340 bytes, Stack size 96 bytes, lv_table.o(.text.get_row_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = get_row_height &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cell_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
</UL>

<P><STRONG><a name="[73a]"></a>is_cell_empty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_table.o(.text.is_cell_empty))
<BR><BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_height
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[73b]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_table.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[73c]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_table.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[7f9]"></a>lv_font_get_line_height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_table.o(.text.lv_font_get_line_height))
<BR><BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_height
</UL>

<P><STRONG><a name="[739]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressed_cell
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[732]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[9dd]"></a>lv_obj_get_style_max_height</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_max_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_max_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
</UL>

<P><STRONG><a name="[9e0]"></a>lv_obj_get_style_min_height</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_min_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_min_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
</UL>

<P><STRONG><a name="[734]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[735]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressed_cell
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[736]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressed_cell
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[733]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressed_cell
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[9fb]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
</UL>

<P><STRONG><a name="[9fd]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
</UL>

<P><STRONG><a name="[a00]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
</UL>

<P><STRONG><a name="[216]"></a>lv_table_constructor</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_table.o(.text.lv_table_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_table_constructor &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[217]"></a>lv_table_destructor</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_table.o(.text.lv_table_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_table_destructor &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[218]"></a>lv_table_event</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, lv_table.o(.text.lv_table_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = lv_table_event &rArr; draw_main &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressed_cell
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[a92]"></a>refr_size_form_row</STRONG> (Thumb, 182 bytes, Stack size 72 bytes, lv_table.o(.text.refr_size_form_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = refr_size_form_row &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_height
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_height
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_height
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[695]"></a>draw_bg</STRONG> (Thumb, 1008 bytes, Stack size 144 bytes, lv_draw_sw_rect.o(.text.draw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = draw_bg &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_cleanup
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg
</UL>

<P><STRONG><a name="[6a3]"></a>draw_bg_img</STRONG> (Thumb, 612 bytes, Stack size 104 bytes, lv_draw_sw_rect.o(.text.draw_bg_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = draw_bg_img &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg
</UL>

<P><STRONG><a name="[6ab]"></a>draw_border</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, lv_draw_sw_rect.o(.text.draw_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = draw_border &rArr; draw_border_generic &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
</UL>

<P><STRONG><a name="[6ad]"></a>draw_border_simple</STRONG> (Thumb, 236 bytes, Stack size 96 bytes, lv_draw_sw_rect.o(.text.draw_border_simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = draw_border_simple &rArr; lv_draw_sw_blend &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
</UL>

<P><STRONG><a name="[745]"></a>draw_outline</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, lv_draw_sw_rect.o(.text.draw_outline))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = draw_outline &rArr; draw_border_generic &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
</UL>

<P><STRONG><a name="[755]"></a>draw_shadow</STRONG> (Thumb, 3156 bytes, Stack size 192 bytes, lv_draw_sw_rect.o(.text.draw_shadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = draw_shadow &rArr; shadow_draw_corner_buf &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
</UL>

<P><STRONG><a name="[696]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_rect.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[699]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_rect.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[698]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_rect.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[b60]"></a>shadow_blur_corner</STRONG> (Thumb, 438 bytes, Stack size 72 bytes, lv_draw_sw_rect.o(.text.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = shadow_blur_corner &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
</UL>

<P><STRONG><a name="[757]"></a>shadow_draw_corner_buf</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, lv_draw_sw_rect.o(.text.shadow_draw_corner_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = shadow_draw_corner_buf &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[4e8]"></a>apply_theme</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_theme.o(.text.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
</UL>

<P><STRONG><a name="[a1d]"></a>lv_obj_remove_style_all</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_theme.o(.text.lv_obj_remove_style_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
</UL>

<P><STRONG><a name="[424]"></a>elastic_diff</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, lv_indev_scroll.o(.text.elastic_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = elastic_diff &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[425]"></a>find_scroll_obj</STRONG> (Thumb, 574 bytes, Stack size 72 bytes, lv_indev_scroll.o(.text.find_scroll_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = find_scroll_obj &rArr; lv_obj_get_scroll_right &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[435]"></a>find_snap_point_x</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, lv_indev_scroll.o(.text.find_snap_point_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = find_snap_point_x &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
</UL>

<P><STRONG><a name="[433]"></a>find_snap_point_y</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, lv_indev_scroll.o(.text.find_snap_point_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = find_snap_point_y &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
</UL>

<P><STRONG><a name="[426]"></a>init_scroll_limits</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, lv_indev_scroll.o(.text.init_scroll_limits))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = init_scroll_limits &rArr; find_snap_point_y &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[762]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev_scroll.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[75f]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev_scroll.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[761]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_indev_scroll.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[75d]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_indev_scroll.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[75e]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_indev_scroll.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[760]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_indev_scroll.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[42b]"></a>scroll_limit_diff</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lv_indev_scroll.o(.text.scroll_limit_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scroll_limit_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[434]"></a>scroll_throw_predict_x</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_indev_scroll.o(.text.scroll_throw_predict_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scroll_throw_predict_x
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[432]"></a>scroll_throw_predict_y</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_indev_scroll.o(.text.scroll_throw_predict_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scroll_throw_predict_y
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[156]"></a>lv_menu_back_event_cb</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lv_menu.o(.text.lv_menu_back_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = lv_menu_back_event_cb &rArr; lv_menu_set_page &rArr; lv_menu_refr_main_header_mode &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_btn_is_root
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.text.lv_menu_constructor)
</UL>
<P><STRONG><a name="[1ff]"></a>lv_menu_constructor</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, lv_menu.o(.text.lv_menu_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_menu_constructor &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_class)
</UL>
<P><STRONG><a name="[201]"></a>lv_menu_cont_constructor</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_cont_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_menu_cont_constructor &rArr; lv_obj_set_flex_align &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_cont_class)
</UL>
<P><STRONG><a name="[200]"></a>lv_menu_destructor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_menu_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_class)
</UL>
<P><STRONG><a name="[202]"></a>lv_menu_page_constructor</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_page_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_menu_page_constructor &rArr; lv_obj_set_parent &rArr; lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_page_class)
</UL>
<P><STRONG><a name="[203]"></a>lv_menu_page_destructor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_page_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_menu_page_destructor &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_page_class)
</UL>
<P><STRONG><a name="[96a]"></a>lv_menu_refr_main_header_mode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lv_menu.o(.text.lv_menu_refr_main_header_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = lv_menu_refr_main_header_mode &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
</UL>

<P><STRONG><a name="[204]"></a>lv_menu_section_constructor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_section_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_menu_section_constructor &rArr; lv_obj_set_flex_flow &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_section_class)
</UL>
<P><STRONG><a name="[157]"></a>lv_menu_value_changed_event_cb</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_menu_value_changed_event_cb &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_get_cur_sidebar_page
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_get_cur_main_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.text.lv_menu_constructor)
</UL>
<P><STRONG><a name="[6f5]"></a>draw_knob</STRONG> (Thumb, 402 bytes, Stack size 232 bytes, lv_slider.o(.text.draw_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = draw_knob &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slider_horizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[6f7]"></a>is_slider_horizontal</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_slider.o(.text.is_slider_horizontal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_slider_horizontal &rArr; lv_obj_get_width
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[6f9]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[6f6]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[9e7]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[9e9]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[9eb]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[9ed]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[a04]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[a09]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[a0c]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[20e]"></a>lv_slider_constructor</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_slider_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.rodata.lv_slider_class)
</UL>
<P><STRONG><a name="[20f]"></a>lv_slider_event</STRONG> (Thumb, 1392 bytes, Stack size 56 bytes, lv_slider.o(.text.lv_slider_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_slider_event &rArr; lv_slider_set_value &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_value
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_left_value
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_value
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_left_value
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slider_horizontal
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.rodata.lv_slider_class)
</UL>
<P><STRONG><a name="[a48]"></a>lv_slider_get_left_value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_get_left_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_slider_get_left_value
</UL>
<BR>[Calls]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_start_value
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[6fa]"></a>lv_slider_get_mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_get_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_slider_get_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[a46]"></a>lv_slider_get_value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_slider_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[a49]"></a>lv_slider_set_left_value</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_set_left_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_slider_set_left_value &rArr; lv_bar_set_start_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[a47]"></a>lv_slider_set_value</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_slider_set_value &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[6f8]"></a>position_knob</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lv_slider.o(.text.position_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = position_knob &rArr; lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[5da]"></a>convert_cb</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, lv_draw_sw_img.o(.text.convert_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = convert_cb &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
</UL>

<P><STRONG><a name="[8fb]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_img.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
</UL>

<P><STRONG><a name="[5df]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_img.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_cb
</UL>

<P><STRONG><a name="[5dd]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_img.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_cb
</UL>

<P><STRONG><a name="[8fe]"></a>lv_color_mix_premult</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lv_draw_sw_img.o(.text.lv_color_mix_premult))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix_premult
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
</UL>

<P><STRONG><a name="[8fd]"></a>lv_color_premult</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_draw_sw_img.o(.text.lv_color_premult))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
</UL>

<P><STRONG><a name="[92d]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_img_decoder.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[927]"></a>lv_img_decoder_built_in_line_alpha</STRONG> (Thumb, 422 bytes, Stack size 64 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_line_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_img_decoder_built_in_line_alpha &rArr; lv_fs_read &rArr; lv_fs_read_cached &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[92a]"></a>lv_img_decoder_built_in_line_indexed</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_line_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_img_decoder_built_in_line_indexed &rArr; lv_fs_read &rArr; lv_fs_read_cached &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[92b]"></a>lv_img_decoder_built_in_line_true_color</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_line_true_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_img_decoder_built_in_line_true_color &rArr; lv_fs_read &rArr; lv_fs_read_cached &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[92c]"></a>lv_memcpy_small</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_img_decoder.o(.text.lv_memcpy_small))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[1fd]"></a>lv_line_constructor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_line.o(.text.lv_line_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_line_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.rodata.lv_line_class)
</UL>
<P><STRONG><a name="[1fe]"></a>lv_line_event</STRONG> (Thumb, 410 bytes, Stack size 64 bytes, lv_line.o(.text.lv_line_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_line_event &rArr; lv_obj_init_draw_line_dsc &rArr; lv_obj_get_style_line_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_width
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.rodata.lv_line_class)
</UL>
<P><STRONG><a name="[964]"></a>lv_obj_get_style_line_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_line.o(.text.lv_obj_get_style_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_line_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[98f]"></a>obj_del_core</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.obj_del_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + In Cycle
<LI>Call Chain = obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_destruct
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[1db]"></a>lv_btn_constructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_btn.o(.text.lv_btn_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_btn_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btn.o(.rodata.lv_btn_class)
</UL>
<P><STRONG><a name="[700]"></a>draw_letter_normal</STRONG> (Thumb, 754 bytes, Stack size 136 bytes, lv_draw_sw_letter.o(.text.draw_letter_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = draw_letter_normal &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
</UL>

<P><STRONG><a name="[702]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_sw_letter.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[701]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_letter.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[989]"></a>get_instance_size</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_obj_class.o(.text.get_instance_size))
<BR><BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>

<P><STRONG><a name="[98c]"></a>lv_obj_construct</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj_class.o(.text.lv_obj_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_construct &rArr;  lv_obj_construct (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
</UL>

<P><STRONG><a name="[692]"></a>draw_axes</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_chart.o(.text.draw_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = draw_axes &rArr; draw_y_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[6c8]"></a>draw_cursors</STRONG> (Thumb, 600 bytes, Stack size 288 bytes, lv_chart.o(.text.draw_cursors))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = draw_cursors &rArr; lv_chart_get_point_pos_by_id &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[6d4]"></a>draw_div_lines</STRONG> (Thumb, 684 bytes, Stack size 184 bytes, lv_chart.o(.text.draw_div_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = draw_div_lines &rArr; lv_obj_init_draw_line_dsc &rArr; lv_obj_get_style_line_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[750]"></a>draw_series_bar</STRONG> (Thumb, 654 bytes, Stack size 240 bytes, lv_chart.o(.text.draw_series_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = draw_series_bar &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[752]"></a>draw_series_line</STRONG> (Thumb, 1252 bytes, Stack size 288 bytes, lv_chart.o(.text.draw_series_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = draw_series_line &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[754]"></a>draw_series_scatter</STRONG> (Thumb, 1104 bytes, Stack size 272 bytes, lv_chart.o(.text.draw_series_scatter))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = draw_series_scatter &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[694]"></a>draw_x_ticks</STRONG> (Thumb, 890 bytes, Stack size 240 bytes, lv_chart.o(.text.draw_x_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = draw_x_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_gsc
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_axes
</UL>

<P><STRONG><a name="[693]"></a>draw_y_ticks</STRONG> (Thumb, 764 bytes, Stack size 248 bytes, lv_chart.o(.text.draw_y_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = draw_y_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_gsc
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_axes
</UL>

<P><STRONG><a name="[7e2]"></a>get_index_from_x</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lv_chart.o(.text.get_index_from_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_index_from_x &rArr; lv_obj_get_content_width &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[853]"></a>invalidate_point</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, lv_chart.o(.text.invalidate_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = invalidate_point &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_width
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[855]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_chart.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
</UL>

<P><STRONG><a name="[1e4]"></a>lv_chart_constructor</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_chart_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_chart_constructor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[1e5]"></a>lv_chart_destructor</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lv_chart.o(.text.lv_chart_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_chart_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[1e6]"></a>lv_chart_event</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, lv_chart.o(.text.lv_chart_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = lv_chart_event &rArr; draw_axes &rArr; draw_y_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_index_from_x
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[6d8]"></a>lv_obj_get_style_border_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
</UL>

<P><STRONG><a name="[6d9]"></a>lv_obj_get_style_border_side</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_side &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
</UL>

<P><STRONG><a name="[6d5]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
</UL>

<P><STRONG><a name="[753]"></a>lv_obj_get_style_height</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
</UL>

<P><STRONG><a name="[854]"></a>lv_obj_get_style_line_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_line_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
</UL>

<P><STRONG><a name="[6da]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
</UL>

<P><STRONG><a name="[751]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
</UL>

<P><STRONG><a name="[6d6]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_index_from_x
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
</UL>

<P><STRONG><a name="[6db]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
</UL>

<P><STRONG><a name="[6d7]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_bar
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_div_lines
</UL>

<P><STRONG><a name="[6cc]"></a>lv_obj_get_style_width</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_scatter
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_series_line
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursors
</UL>

<P><STRONG><a name="[68a]"></a>draw_arcs</STRONG> (Thumb, 312 bytes, Stack size 144 bytes, lv_meter.o(.text.draw_arcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = draw_arcs &rArr; lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_rounded
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[743]"></a>draw_needles</STRONG> (Thumb, 566 bytes, Stack size 184 bytes, lv_meter.o(.text.draw_needles))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = draw_needles &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_cos
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[758]"></a>draw_ticks_and_labels</STRONG> (Thumb, 1108 bytes, Stack size 400 bytes, lv_meter.o(.text.draw_ticks_and_labels))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = draw_ticks_and_labels &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[848]"></a>inv_arc</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, lv_meter.o(.text.inv_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = inv_arc &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_rounded
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_value
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_start_value
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_end_value
</UL>

<P><STRONG><a name="[84e]"></a>inv_line</STRONG> (Thumb, 420 bytes, Stack size 72 bytes, lv_meter.o(.text.inv_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = inv_line &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_cos
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_value
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_start_value
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_set_indicator_end_value
</UL>

<P><STRONG><a name="[759]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_meter.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
</UL>

<P><STRONG><a name="[68d]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_meter.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
</UL>

<P><STRONG><a name="[75a]"></a>lv_color_mix</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
</UL>

<P><STRONG><a name="[205]"></a>lv_meter_constructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_meter_constructor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.rodata.lv_meter_class)
</UL>
<P><STRONG><a name="[206]"></a>lv_meter_destructor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_meter_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.rodata.lv_meter_class)
</UL>
<P><STRONG><a name="[207]"></a>lv_meter_event</STRONG> (Thumb, 220 bytes, Stack size 104 bytes, lv_meter.o(.text.lv_meter_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = lv_meter_event &rArr; draw_ticks_and_labels &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ticks_and_labels
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.rodata.lv_meter_class)
</UL>
<P><STRONG><a name="[68c]"></a>lv_obj_get_style_arc_rounded</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_obj_get_style_arc_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_arc_rounded &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
</UL>

<P><STRONG><a name="[96f]"></a>lv_obj_get_style_height</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[68e]"></a>lv_obj_get_style_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_arcs
</UL>

<P><STRONG><a name="[96e]"></a>lv_obj_get_style_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[744]"></a>lv_trigo_cos</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_trigo_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_trigo_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_line
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_needles
</UL>

<P><STRONG><a name="[4cc]"></a>allocate_item</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, lv_draw_sw_gradient.o(.text.allocate_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = allocate_item &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterate_cache
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_key
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
</UL>

<P><STRONG><a name="[4ce]"></a>compute_key</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_draw_sw_gradient.o(.text.compute_key))
<BR><BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_item
</UL>

<P><STRONG><a name="[14c]"></a>find_item</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_gradient.o(.text.find_item))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_gradient.o(.text.lv_gradient_get)
</UL>
<P><STRONG><a name="[fd]"></a>find_oldest_item_life</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_sw_gradient.o(.text.find_oldest_item_life))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_gradient.o(.text.allocate_item)
</UL>
<P><STRONG><a name="[7be]"></a>free_item</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lv_draw_sw_gradient.o(.text.free_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = free_item &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cache_item_size
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill_oldest_item
</UL>

<P><STRONG><a name="[7bf]"></a>get_cache_item_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_draw_sw_gradient.o(.text.get_cache_item_size))
<BR><BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_in_cache
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_item
</UL>

<P><STRONG><a name="[4cd]"></a>iterate_cache</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_draw_sw_gradient.o(.text.iterate_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iterate_cache &rArr; next_in_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_in_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_item
</UL>

<P><STRONG><a name="[fe]"></a>kill_oldest_item</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_draw_sw_gradient.o(.text.kill_oldest_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kill_oldest_item &rArr; free_item &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_gradient.o(.text.allocate_item)
</UL>
<P><STRONG><a name="[922]"></a>lv_color_to32</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lv_draw_sw_gradient.o(.text.lv_color_to32))
<BR><BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_calculate
</UL>

<P><STRONG><a name="[85c]"></a>next_in_cache</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lv_draw_sw_gradient.o(.text.next_in_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = next_in_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cache_item_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterate_cache
</UL>

<P><STRONG><a name="[592]"></a>calculate_layer_type</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_obj_style.o(.text.calculate_layer_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = calculate_layer_type &rArr; lv_obj_get_style_transform_zoom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[159]"></a>fade_anim_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_style.o(.text.fade_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = fade_anim_cb &rArr; lv_obj_set_style_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text.lv_obj_fade_in)
</UL>
<P><STRONG><a name="[15a]"></a>fade_in_anim_ready</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style.o(.text.fade_in_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fade_in_anim_ready &rArr; lv_obj_remove_local_style_prop &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text.lv_obj_fade_in)
</UL>
<P><STRONG><a name="[7eb]"></a>get_local_style</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, lv_obj_style.o(.text.get_local_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = get_local_style &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>

<P><STRONG><a name="[7f3]"></a>get_prop_core</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, lv_obj_style.o(.text.get_prop_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_state
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_part
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_prop_group
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>

<P><STRONG><a name="[44d]"></a>get_trans_style</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, lv_obj_style.o(.text.get_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = get_trans_style &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[456]"></a>lv_anim_set_delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_anim_set_delay))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[458]"></a>lv_anim_set_early_apply</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_anim_set_early_apply))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[451]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[457]"></a>lv_anim_set_path_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_anim_set_path_cb))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[453]"></a>lv_anim_set_ready_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_anim_set_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[452]"></a>lv_anim_set_start_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_anim_set_start_cb))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[455]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[454]"></a>lv_anim_set_values</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[450]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[988]"></a>lv_bidi_calculate_align</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_bidi_calculate_align))
<BR><BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
</UL>

<P><STRONG><a name="[b6c]"></a>lv_color_mix</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[987]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
</UL>

<P><STRONG><a name="[596]"></a>lv_obj_get_style_blend_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_blend_mode &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_layer_type
</UL>

<P><STRONG><a name="[449]"></a>lv_obj_get_style_color_filter_dsc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_color_filter_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_color_filter_dsc &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>

<P><STRONG><a name="[44a]"></a>lv_obj_get_style_color_filter_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_color_filter_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>

<P><STRONG><a name="[9d2]"></a>lv_obj_get_style_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[595]"></a>lv_obj_get_style_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_layer_type
</UL>

<P><STRONG><a name="[986]"></a>lv_obj_get_style_text_align</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
</UL>

<P><STRONG><a name="[593]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_angle &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_layer_type
</UL>

<P><STRONG><a name="[594]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_layer_type
</UL>

<P><STRONG><a name="[a10]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[9ee]"></a>lv_style_prop_has_flag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_style.o(.text.lv_style_prop_has_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_style_prop_has_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_prop_lookup_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[a19]"></a>refresh_children_style</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_obj_style.o(.text.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>

<P><STRONG><a name="[a1f]"></a>report_style_change_core</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_obj_style.o(.text.report_style_change_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + In Cycle
<LI>Call Chain = report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[f7]"></a>trans_anim_cb</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, lv_obj_style.o(.text.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[f8]"></a>trans_anim_ready_cb</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lv_obj_style.o(.text.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = trans_anim_ready_cb &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_is_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[135]"></a>trans_anim_start_cb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_obj_style.o(.text.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = trans_anim_start_cb &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_part
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text.lv_anim_set_start_cb)
</UL>
<P><STRONG><a name="[977]"></a>trans_del</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, lv_obj_style.o(.text.trans_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[136]"></a>draw_part_begin_event_cb</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lv_calendar.o(.text.draw_part_begin_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = draw_part_begin_event_cb &rArr; lv_theme_get_color_primary &rArr; lv_theme_get_from_obj &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_has_btn_ctrl
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar.o(.text.lv_calendar_constructor)
</UL>
<P><STRONG><a name="[815]"></a>get_day_of_week</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lv_calendar.o(.text.get_day_of_week))
<BR><BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
</UL>

<P><STRONG><a name="[7ef]"></a>get_month_length</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lv_calendar.o(.text.get_month_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_month_length
</UL>
<BR>[Calls]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
</UL>

<P><STRONG><a name="[813]"></a>highlight_update</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lv_calendar.o(.text.highlight_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_day_of_week
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_today_date
</UL>

<P><STRONG><a name="[7f0]"></a>is_leap_year</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lv_calendar.o(.text.is_leap_year))
<BR><BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_month_length
</UL>

<P><STRONG><a name="[1df]"></a>lv_calendar_constructor</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, lv_calendar.o(.text.lv_calendar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_calendar_constructor &rArr; lv_btnmatrix_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_today_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar.o(.rodata.lv_calendar_class)
</UL>
<P><STRONG><a name="[900]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_layer.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
</UL>

<P><STRONG><a name="[8ff]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw_layer.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
</UL>

<P><STRONG><a name="[8fa]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_sw.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_buffer_copy
</UL>

<P><STRONG><a name="[82e]"></a>indev_button_proc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lv_indev.o(.text.indev_button_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = indev_button_proc &rArr; indev_proc_release &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[832]"></a>indev_click_focus</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, lv_indev.o(.text.indev_click_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = indev_click_focus &rArr; lv_group_focus_obj &rArr; lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[834]"></a>indev_encoder_proc</STRONG> (Thumb, 1014 bytes, Stack size 32 bytes, lv_indev.o(.text.indev_encoder_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = indev_encoder_proc &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_obj_count
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[83c]"></a>indev_gesture</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, lv_indev.o(.text.indev_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = indev_gesture &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[83d]"></a>indev_keypad_proc</STRONG> (Thumb, 558 bytes, Stack size 32 bytes, lv_indev.o(.text.indev_keypad_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = indev_keypad_proc &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[83f]"></a>indev_pointer_proc</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lv_indev.o(.text.indev_pointer_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = indev_pointer_proc &rArr; indev_proc_release &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[831]"></a>indev_proc_press</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, lv_indev.o(.text.indev_proc_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = indev_proc_press &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[82f]"></a>indev_proc_release</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lv_indev.o(.text.indev_proc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = indev_proc_release &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[934]"></a>indev_proc_reset_query_handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_indev.o(.text.indev_proc_reset_query_handler))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[830]"></a>indev_reset_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(.text.indev_reset_check))
<BR><BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[8c4]"></a>lv_color_black</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_style.o(.text.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
</UL>

<P><STRONG><a name="[8c5]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_style.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_white
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>

<P><STRONG><a name="[8ce]"></a>lv_color_white</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_style.o(.text.lv_color_white))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
</UL>

<P><STRONG><a name="[a5c]"></a>lv_style_get_prop_inlined</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, lv_style.o(.text.lv_style_get_prop_inlined))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>

<P><STRONG><a name="[161]"></a>lv_style_set_prop_helper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_set_prop_helper))
<BR>[Address Reference Count : 1]<UL><LI> lv_style.o(.text.lv_style_set_prop)
</UL>
<P><STRONG><a name="[a7c]"></a>lv_style_set_prop_internal</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, lv_style.o(.text.lv_style_set_prop_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_prop_group
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>

<P><STRONG><a name="[973]"></a>lv_font_get_line_height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_msgbox.o(.text.lv_font_get_line_height))
<BR><BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
</UL>

<P><STRONG><a name="[962]"></a>lv_layer_top</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_msgbox.o(.text.lv_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_layer_top &rArr; lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
</UL>

<P><STRONG><a name="[972]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_msgbox.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
</UL>

<P><STRONG><a name="[158]"></a>msgbox_close_click_event_cb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_msgbox.o(.text.msgbox_close_click_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = msgbox_close_click_event_cb &rArr; lv_msgbox_close &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_msgbox.o(.text.lv_msgbox_create)
</UL>
<P><STRONG><a name="[6fe]"></a>draw_label</STRONG> (Thumb, 224 bytes, Stack size 88 bytes, lv_roller.o(.text.draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = draw_label &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
</UL>

<P><STRONG><a name="[73d]"></a>draw_main</STRONG> (Thumb, 400 bytes, Stack size 136 bytes, lv_roller.o(.text.draw_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = draw_main &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[73e]"></a>get_label</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_roller.o(.text.get_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_label
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[6ff]"></a>get_sel_area</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lv_roller.o(.text.get_sel_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_sel_area &rArr; lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_label
</UL>

<P><STRONG><a name="[7fe]"></a>get_selected_label_width</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lv_roller.o(.text.get_selected_label_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = get_selected_label_width &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[845]"></a>inf_normalize</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lv_roller.o(.text.inf_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[b03]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[b07]"></a>lv_anim_set_path_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_anim_set_path_cb))
<BR><BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[b06]"></a>lv_anim_set_ready_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_anim_set_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[b05]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[b04]"></a>lv_anim_set_values</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[b02]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[7fc]"></a>lv_font_get_line_height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_roller.o(.text.lv_font_get_line_height))
<BR><BR>[Called By]<UL><LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
</UL>

<P><STRONG><a name="[9b4]"></a>lv_obj_get_style_anim_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_roller.o(.text.lv_obj_get_style_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_anim_time &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[740]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_roller.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[741]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_roller.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[742]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_roller.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[73f]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_roller.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[7ff]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_roller.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
</UL>

<P><STRONG><a name="[7fd]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_roller.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sel_area
</UL>

<P><STRONG><a name="[20b]"></a>lv_roller_constructor</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lv_roller.o(.text.lv_roller_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_roller_constructor &rArr; lv_roller_set_options &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_class)
</UL>
<P><STRONG><a name="[20c]"></a>lv_roller_event</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, lv_roller.o(.text.lv_roller_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_roller_event &rArr; release_handler &rArr; lv_roller_set_selected &rArr; refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_selected
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_handler
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_class)
</UL>
<P><STRONG><a name="[20d]"></a>lv_roller_label_event</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lv_roller.o(.text.lv_roller_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lv_roller_label_event &rArr; refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_selected_label_width
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_label_class)
</UL>
<P><STRONG><a name="[a44]"></a>refr_position</STRONG> (Thumb, 302 bytes, Stack size 104 bytes, lv_roller.o(.text.refr_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_time
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_ready_cb
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_path_cb
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_selected
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[a42]"></a>release_handler</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, lv_roller.o(.text.release_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = release_handler &rArr; lv_roller_set_selected &rArr; refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_scroll_throw_predict
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_selected
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[134]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_roller.o(.text.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = scroll_anim_ready_cb &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.text.lv_anim_set_ready_cb)
</UL>
<P><STRONG><a name="[12a]"></a>set_y_anim</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_roller.o(.text.set_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = set_y_anim &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_roller.o(.text.lv_roller_event)
<LI> lv_roller.o(.text.refr_position)
<LI> lv_roller.o(.text.lv_anim_set_exec_cb)
</UL>
<P><STRONG><a name="[162]"></a>btns_value_changed_event_cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_tabview.o(.text.btns_value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = btns_value_changed_event_cb &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.text.lv_tabview_constructor)
</UL>
<P><STRONG><a name="[163]"></a>cont_scroll_end_event_cb</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lv_tabview.o(.text.cont_scroll_end_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = cont_scroll_end_event_cb &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_tab_act
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.text.lv_tabview_constructor)
</UL>
<P><STRONG><a name="[a95]"></a>lv_memcpy_small</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_tabview.o(.text.lv_memcpy_small))
<BR><BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
</UL>

<P><STRONG><a name="[5d9]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_tabview.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
</UL>

<P><STRONG><a name="[9e8]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_tabview.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>

<P><STRONG><a name="[9ec]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_tabview.o(.text.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>

<P><STRONG><a name="[219]"></a>lv_tabview_constructor</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, lv_tabview.o(.text.lv_tabview_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_tabview_constructor &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[21a]"></a>lv_tabview_destructor</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_tabview.o(.text.lv_tabview_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_tabview_destructor &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[21b]"></a>lv_tabview_event</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_tabview.o(.text.lv_tabview_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lv_tabview_event &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_tab_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[aa7]"></a>_lv_txt_is_break_char</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lv_txt.o(.text._lv_txt_is_break_char))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
</UL>

<P><STRONG><a name="[aa8]"></a>lv_font_get_line_height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_font_get_line_height))
<BR><BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
</UL>

<P><STRONG><a name="[467]"></a>lv_memcpy_small</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_memcpy_small))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
</UL>

<P><STRONG><a name="[464]"></a>lv_txt_get_next_word</STRONG> (Thumb, 452 bytes, Stack size 80 bytes, lv_txt.o(.text.lv_txt_get_next_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_break_char
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>

<P><STRONG><a name="[6]"></a>lv_txt_unicode_to_utf8</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, lv_txt.o(.text.lv_txt_unicode_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_txt_unicode_to_utf8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_unicode_to_encoded)
</UL>
<P><STRONG><a name="[0]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_get_byte_id)
</UL>
<P><STRONG><a name="[1]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lv_txt.o(.text.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_get_char_id)
</UL>
<P><STRONG><a name="[5]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_get_encoded_length)
</UL>
<P><STRONG><a name="[2]"></a>lv_txt_utf8_next</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, lv_txt.o(.text.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_next)
</UL>
<P><STRONG><a name="[3]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_prev)
</UL>
<P><STRONG><a name="[4]"></a>lv_txt_utf8_size</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_size)
</UL>
<P><STRONG><a name="[6dc]"></a>draw_img</STRONG> (Thumb, 1136 bytes, Stack size 144 bytes, lv_img.o(.text.draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = draw_img &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_img_opa
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_transformed_size
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[6e5]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_img.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6e9]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_img.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_transformed_size
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6e8]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_img.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_transformed_size
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[1f4]"></a>lv_img_constructor</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lv_img.o(.text.lv_img_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_img_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.rodata.lv_img_class)
</UL>
<P><STRONG><a name="[1f5]"></a>lv_img_destructor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_img.o(.text.lv_img_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_img_destructor &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.rodata.lv_img_class)
</UL>
<P><STRONG><a name="[1f6]"></a>lv_img_event</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, lv_img.o(.text.lv_img_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = lv_img_event &rArr; draw_img &rArr; lv_draw_img &rArr; decode_and_draw &rArr; show_error &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click_area
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_transformed_size
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.rodata.lv_img_class)
</UL>
<P><STRONG><a name="[6e7]"></a>lv_img_get_transformed_size</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, lv_img.o(.text.lv_img_get_transformed_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_img_get_transformed_size &rArr; _lv_img_buf_get_transformed_area &rArr; lv_point_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6df]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6de]"></a>lv_obj_get_style_img_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(.text.lv_obj_get_style_img_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_img_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6e3]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6e0]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6e1]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6e2]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[92f]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_img.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[930]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[931]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[3ee]"></a>anim_mark_list_change</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_anim.o(.text.anim_mark_list_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = anim_mark_list_change
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>

<P><STRONG><a name="[4de]"></a>anim_ready_handler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lv_anim.o(.text.anim_ready_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = anim_ready_handler &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[f2]"></a>anim_timer</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, lv_anim.o(.text.anim_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = anim_timer &rArr; anim_ready_handler &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.text._lv_anim_core_init)
</UL>
<P><STRONG><a name="[74d]"></a>draw_scrollbar</STRONG> (Thumb, 174 bytes, Stack size 168 bytes, lv_obj.o(.text.draw_scrollbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = draw_scrollbar &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_right &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[99c]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[208]"></a>lv_obj_constructor</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_constructor &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[209]"></a>lv_obj_destructor</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_destructor &rArr; lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_event_mark_deleted
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[997]"></a>lv_obj_draw</STRONG> (Thumb, 702 bytes, Stack size 176 bytes, lv_obj.o(.text.lv_obj_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lv_obj_draw &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[20a]"></a>lv_obj_event</STRONG> (Thumb, 874 bytes, Stack size 40 bytes, lv_obj.o(.text.lv_obj_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lv_obj_event &rArr; lv_obj_scroll_to_view_recursive &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_mode
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_current_target
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[9a0]"></a>lv_obj_get_style_align</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_align &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[9ba]"></a>lv_obj_get_style_bg_color</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_color &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>

<P><STRONG><a name="[99e]"></a>lv_obj_get_style_bg_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_bg_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[9ca]"></a>lv_obj_get_style_border_color</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_color &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>

<P><STRONG><a name="[9cd]"></a>lv_obj_get_style_border_opa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>

<P><STRONG><a name="[999]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_post &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[9d0]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>

<P><STRONG><a name="[998]"></a>lv_obj_get_style_clip_corner</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_clip_corner &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[9a5]"></a>lv_obj_get_style_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[9a1]"></a>lv_obj_get_style_layout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[9e4]"></a>lv_obj_get_style_opa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>

<P><STRONG><a name="[992]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
</UL>

<P><STRONG><a name="[991]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
</UL>

<P><STRONG><a name="[99d]"></a>lv_obj_get_style_radius</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_radius &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[9f1]"></a>lv_obj_get_style_shadow_color</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_shadow_color &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>

<P><STRONG><a name="[9f3]"></a>lv_obj_get_style_shadow_opa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_shadow_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>

<P><STRONG><a name="[9f4]"></a>lv_obj_get_style_shadow_spread</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_shadow_spread &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>

<P><STRONG><a name="[9f5]"></a>lv_obj_get_style_shadow_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>

<P><STRONG><a name="[99b]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[99a]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[9a4]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[996]"></a>lv_obj_remove_style_all</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_remove_style_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[976]"></a>lv_obj_set_state</STRONG> (Thumb, 464 bytes, Stack size 88 bytes, lv_obj.o(.text.lv_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_state
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_part
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop_inlined
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>

<P><STRONG><a name="[a34]"></a>lv_style_get_prop_inlined</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_style_get_prop_inlined))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[74f]"></a>scrollbar_init_draw_dsc</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lv_obj.o(.text.scrollbar_init_draw_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = scrollbar_init_draw_dsc &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_color
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_opa
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_color
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
</UL>

<P><STRONG><a name="[4d7]"></a>angle_to_mode_color_fast</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, lv_colorwheel.o(.text.angle_to_mode_color_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = angle_to_mode_color_fast &rArr; fast_hsv2rgb
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_hsv2rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
</UL>

<P><STRONG><a name="[687]"></a>double_click_reset</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lv_colorwheel.o(.text.double_click_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = double_click_reset &rArr; lv_colorwheel_set_hsv &rArr; refr_knob_pos &rArr; invalidate_knob &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_wait_release
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_set_hsv
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[6cf]"></a>draw_disc_grad</STRONG> (Thumb, 402 bytes, Stack size 136 bytes, lv_colorwheel.o(.text.draw_disc_grad))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = draw_disc_grad &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_cos
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_to_mode_color_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[6fb]"></a>draw_knob</STRONG> (Thumb, 90 bytes, Stack size 80 bytes, lv_colorwheel.o(.text.draw_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = draw_knob &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_text_color_filtered &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_color_filter_opa &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_get_rgb
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[4d8]"></a>fast_hsv2rgb</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, lv_colorwheel.o(.text.fast_hsv2rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fast_hsv2rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_to_mode_color_fast
</UL>

<P><STRONG><a name="[b00]"></a>get_angle</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_colorwheel.o(.text.get_angle))
<BR><BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>

<P><STRONG><a name="[6fd]"></a>get_knob_area</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lv_colorwheel.o(.text.get_knob_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_knob_area &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_knob
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[852]"></a>invalidate_knob</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lv_colorwheel.o(.text.invalidate_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = invalidate_knob &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>

<P><STRONG><a name="[6d1]"></a>lv_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_colorwheel.o(.text.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
</UL>

<P><STRONG><a name="[8d2]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_colorwheel.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[8d1]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_colorwheel.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[4d9]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_colorwheel.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_to_mode_color_fast
</UL>

<P><STRONG><a name="[1ea]"></a>lv_colorwheel_constructor</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.lv_colorwheel_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_colorwheel_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_colorwheel.o(.rodata.lv_colorwheel_class)
</UL>
<P><STRONG><a name="[1eb]"></a>lv_colorwheel_event</STRONG> (Thumb, 1092 bytes, Stack size 32 bytes, lv_colorwheel.o(.text.lv_colorwheel_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = lv_colorwheel_event &rArr; draw_disc_grad &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_atan2
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_wait_release
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_set_hsv
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_color_mode
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_click_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_colorwheel.o(.rodata.lv_colorwheel_class)
</UL>
<P><STRONG><a name="[6d0]"></a>lv_obj_get_style_arc_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.lv_obj_get_style_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_arc_width &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
</UL>

<P><STRONG><a name="[7ea]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>

<P><STRONG><a name="[7e7]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>

<P><STRONG><a name="[7e8]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>

<P><STRONG><a name="[7e9]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr; get_prop_core &rArr; lv_style_get_prop &rArr; lv_style_get_prop_inlined &rArr; lv_style_prop_get_default &rArr; lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>

<P><STRONG><a name="[6d3]"></a>lv_trigo_cos</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.lv_trigo_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_trigo_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_disc_grad
</UL>

<P><STRONG><a name="[8d3]"></a>next_color_mode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.next_color_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = next_color_mode &rArr; refr_knob_pos &rArr; invalidate_knob &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[8d0]"></a>refr_knob_pos</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lv_colorwheel.o(.text.refr_knob_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = refr_knob_pos &rArr; invalidate_knob &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_cos
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_knob
<LI><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_set_hsv
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_color_mode
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
</UL>

<P><STRONG><a name="[1f7]"></a>lv_keyboard_constructor</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lv_keyboard.o(.text.lv_keyboard_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_keyboard_constructor &rArr; lv_keyboard_update_map &rArr; lv_keyboard_update_ctrl_map &rArr; lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_base_dir
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_keyboard.o(.rodata.lv_keyboard_class)
</UL>
<P><STRONG><a name="[93c]"></a>lv_keyboard_update_ctrl_map</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_keyboard.o(.text.lv_keyboard_update_ctrl_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_keyboard_update_ctrl_map &rArr; lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_map
</UL>

<P><STRONG><a name="[93b]"></a>lv_keyboard_update_map</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_keyboard.o(.text.lv_keyboard_update_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_keyboard_update_map &rArr; lv_keyboard_update_ctrl_map &rArr; lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
</UL>

<P><STRONG><a name="[aa5]"></a>lv_timer_exec</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_timer.o(.text.lv_timer_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_timer_exec &rArr; lv_timer_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_time_remaining
</UL>
<BR>[Called By]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
</UL>

<P><STRONG><a name="[aa6]"></a>lv_timer_time_remaining</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_timer.o(.text.lv_timer_time_remaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_timer_time_remaining &rArr; lv_tick_elaps &rArr; lv_tick_get &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_exec
</UL>

<P><STRONG><a name="[21f]"></a>lv_tileview_constructor</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lv_tileview.o(.text.lv_tileview_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_tileview_constructor &rArr; lv_obj_set_size &rArr; lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.rodata.lv_tileview_class)
</UL>
<P><STRONG><a name="[220]"></a>lv_tileview_tile_constructor</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lv_tileview.o(.text.lv_tileview_tile_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_tileview_tile_constructor &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.rodata.lv_tileview_tile_class)
</UL>
<P><STRONG><a name="[166]"></a>tileview_event_cb</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, lv_tileview.o(.text.tileview_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tileview_event_cb &rArr; lv_obj_set_scroll_dir &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.text.lv_tileview_constructor)
</UL>
<P><STRONG><a name="[8f2]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_rect.o(.text.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[8f3]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_rect.o(.text.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[8c6]"></a>lv_color_black</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_draw_rect.o(.text.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_black
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
</UL>

<P><STRONG><a name="[8c7]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_draw_rect.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_white
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>

<P><STRONG><a name="[8cf]"></a>lv_color_white</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_draw_rect.o(.text.lv_color_white))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_white
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
</UL>

<P><STRONG><a name="[375]"></a>CLOCK_SetDiv</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_port_disp.o(.text.CLOCK_SetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcdClock
</UL>

<P><STRONG><a name="[374]"></a>CLOCK_SetMux</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_port_disp.o(.text.CLOCK_SetMux))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcdClock
</UL>

<P><STRONG><a name="[368]"></a>DEMO_InitLcd</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lv_port_disp.o(.text.DEMO_InitLcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = DEMO_InitLcd &rArr; DEMO_InitLcdBackLight &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeStart
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_EnableInterrupts
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcdClock
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcdBackLight
</UL>
<BR>[Called By]<UL><LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[371]"></a>DEMO_InitLcdBackLight</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_port_disp.o(.text.DEMO_InitLcdBackLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = DEMO_InitLcdBackLight &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
</UL>

<P><STRONG><a name="[36c]"></a>DEMO_InitLcdClock</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_port_disp.o(.text.DEMO_InitLcdClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DEMO_InitLcdClock &rArr; CLOCK_InitVideoPll
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
</UL>

<P><STRONG><a name="[392]"></a>ELCDIF_ClearInterruptStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_port_disp.o(.text.ELCDIF_ClearInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIF_IRQHandler
</UL>

<P><STRONG><a name="[36e]"></a>ELCDIF_EnableInterrupts</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_port_disp.o(.text.ELCDIF_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
</UL>

<P><STRONG><a name="[391]"></a>ELCDIF_GetInterruptStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_port_disp.o(.text.ELCDIF_GetInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIF_IRQHandler
</UL>

<P><STRONG><a name="[370]"></a>ELCDIF_RgbModeStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_port_disp.o(.text.ELCDIF_RgbModeStart))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
</UL>

<P><STRONG><a name="[867]"></a>ELCDIF_SetNextBufferAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_port_disp.o(.text.ELCDIF_SetNextBufferAddr))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fb_flush
</UL>

<P><STRONG><a name="[36f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_port_disp.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
</UL>

<P><STRONG><a name="[36b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_port_disp.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitLcd
</UL>

<P><STRONG><a name="[15d]"></a>lcd_fb_flush</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_port_disp.o(.text.lcd_fb_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lcd_fb_flush &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanInvalidateByRange
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_SetNextBufferAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp.o(.text.lv_port_disp_init)
</UL>
<P><STRONG><a name="[225]"></a>BOARD_ConfigTouchIntPin</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_port_indev.o(.text.BOARD_ConfigTouchIntPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = BOARD_ConfigTouchIntPin &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev.o(.rodata.s_touchConfig)
</UL>
<P><STRONG><a name="[226]"></a>BOARD_PullTouchResetPin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_port_indev.o(.text.BOARD_PullTouchResetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = BOARD_PullTouchResetPin &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev.o(.rodata.s_touchConfig)
</UL>
<P><STRONG><a name="[378]"></a>CLOCK_SetDiv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_port_indev.o(.text.CLOCK_SetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
</UL>

<P><STRONG><a name="[377]"></a>CLOCK_SetMux</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_port_indev.o(.text.CLOCK_SetMux))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMO_InitTouch
</UL>

<P><STRONG><a name="[376]"></a>DEMO_InitTouch</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, lv_port_indev.o(.text.DEMO_InitTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = DEMO_InitTouch &rArr; GT911_Init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_LPI2C_Init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_GetResolution
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[15e]"></a>DEMO_ReadTouch</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_port_indev.o(.text.DEMO_ReadTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DEMO_ReadTouch &rArr; GT911_GetSingleTouch &rArr; GT911_ReadRawTouchData
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_GetSingleTouch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev.o(.text.lv_port_indev_init)
</UL>
<P><STRONG><a name="[a96]"></a>lv_task_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lv_rt_thread_port.o(.text.lv_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_task_handler &rArr; lv_timer_handler &rArr; lv_timer_exec &rArr; lv_timer_del &rArr; lv_mem_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_thread_entry
</UL>

<P><STRONG><a name="[16a]"></a>lvgl_thread_entry</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_rt_thread_port.o(.text.lvgl_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = lvgl_thread_entry &rArr; lvgl_sn_interface_show &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_sn_interface_show
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_rt_thread_port.o(.text.lvgl_thread_init)
</UL>
<P><STRONG><a name="[240]"></a>lvgl_thread_init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lv_rt_thread_port.o(.text.lvgl_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lvgl_thread_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_rt_thread_port.o(.rti_fn.5)
</UL>
<P><STRONG><a name="[f9]"></a>__wqueue_pollwake</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, poll.o(.text.__wqueue_pollwake))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __wqueue_pollwake
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_default_wake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> poll.o(.text._poll_add)
</UL>
<P><STRONG><a name="[171]"></a>_poll_add</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, poll.o(.text._poll_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _poll_add &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> poll.o(.text.poll_table_init)
</UL>
<P><STRONG><a name="[686]"></a>do_pollfd</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, poll.o(.text.do_pollfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = do_pollfd &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>

<P><STRONG><a name="[ae6]"></a>poll_do</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, poll.o(.text.poll_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[ae5]"></a>poll_table_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, poll.o(.text.poll_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = poll_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[ae7]"></a>poll_teardown</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, poll.o(.text.poll_teardown))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = poll_teardown &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[ae8]"></a>poll_wait_timeout</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, poll.o(.text.poll_wait_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = poll_wait_timeout &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>

<P><STRONG><a name="[483]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, poll.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
</UL>

<P><STRONG><a name="[793]"></a>fdszero</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, select.o(.text.fdszero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fdszero
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[ac5]"></a>netdev_auto_change_default</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, netdev.o(.text.netdev_auto_change_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netdev_auto_change_default &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_default
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
</UL>

<P><STRONG><a name="[ac8]"></a>netdev_cmd_netstat</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, netdev.o(.text.netdev_cmd_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = netdev_cmd_netstat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_netstat
</UL>

<P><STRONG><a name="[acb]"></a>netdev_list_dns</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, netdev.o(.text.netdev_list_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netdev_list_dns &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[ace]"></a>netdev_list_if</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, netdev.o(.text.netdev_list_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netdev_list_if &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[acc]"></a>netdev_set_dns</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, netdev.o(.text.netdev_set_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = netdev_set_dns &rArr; netdev_set_dns_server &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[acf]"></a>netdev_set_if</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, netdev.o(.text.netdev_set_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = netdev_set_if &rArr; netdev_set_netmask &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[ad3]"></a>rt_slist_append</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netdev.o(.text.rt_slist_append))
<BR><BR>[Calls]<UL><LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
</UL>

<P><STRONG><a name="[ad2]"></a>rt_slist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netdev.o(.text.rt_slist_init))
<BR><BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
</UL>

<P><STRONG><a name="[ac9]"></a>rt_slist_next</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, netdev.o(.text.rt_slist_next))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_ipaddr
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>

<P><STRONG><a name="[18e]"></a>dfs_net_close</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs_net.o(.text.dfs_net_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dfs_net_close &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.rodata._net_fops)
</UL>
<P><STRONG><a name="[18f]"></a>dfs_net_ioctl</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs_net.o(.text.dfs_net_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_net_ioctl &rArr; sal_ioctlsocket
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.rodata._net_fops)
</UL>
<P><STRONG><a name="[192]"></a>dfs_net_poll</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dfs_net.o(.text.dfs_net_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_net_poll &rArr; sal_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.rodata._net_fops)
</UL>
<P><STRONG><a name="[190]"></a>dfs_net_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfs_net.o(.text.dfs_net_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dfs_net_read &rArr; sal_recvfrom
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.rodata._net_fops)
</UL>
<P><STRONG><a name="[191]"></a>dfs_net_write</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfs_net.o(.text.dfs_net_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dfs_net_write &rArr; sal_sendto
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.rodata._net_fops)
</UL>
<P><STRONG><a name="[1ac]"></a>at_poll</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, af_inet_at.o(.text.at_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_poll &rArr; at_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_socket
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_poll_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_at.o(.rodata.at_socket_ops)
</UL>
<P><STRONG><a name="[525]"></a>rt_poll_add</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, af_inet_at.o(.text.rt_poll_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_poll_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_poll
</UL>

<P><STRONG><a name="[181]"></a>check_netdev_internet_up_work</STRONG> (Thumb, 448 bytes, Stack size 152 bytes, sal_socket.o(.text.check_netdev_internet_up_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = check_netdev_internet_up_work &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_internet_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_socket.o(.text.sal_check_netdev_internet_up)
</UL>
<P><STRONG><a name="[b51]"></a>sal_lock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sal_socket.o(.text.sal_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sal_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[b50]"></a>sal_sockaddr_to_ipaddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sal_socket.o(.text.sal_sockaddr_to_ipaddr))
<BR><BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_bind
</UL>

<P><STRONG><a name="[b54]"></a>sal_unlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sal_socket.o(.text.sal_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sal_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[b61]"></a>socket_alloc</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, sal_socket.o(.text.socket_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = socket_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
</UL>

<P><STRONG><a name="[b4f]"></a>socket_delete</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sal_socket.o(.text.socket_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>

<P><STRONG><a name="[b62]"></a>socket_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sal_socket.o(.text.socket_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[b4e]"></a>socket_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sal_socket.o(.text.socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = socket_init &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
</UL>

<P><STRONG><a name="[b4d]"></a>socket_new</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sal_socket.o(.text.socket_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = socket_new &rArr; socket_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_accept
</UL>

<P><STRONG><a name="[188]"></a>ulog_file_backend_flush_with_buf</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, file_be.o(.text.ulog_file_backend_flush_with_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ulog_file_backend_flush_with_buf &rArr; access &rArr; stat &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_output_with_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_be.o(.text.ulog_file_backend_init)
</UL>
<P><STRONG><a name="[187]"></a>ulog_file_backend_output_with_buf</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, file_be.o(.text.ulog_file_backend_output_with_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ulog_file_backend_output_with_buf &rArr; ulog_file_backend_flush_with_buf &rArr; access &rArr; stat &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_flush_with_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_be.o(.text.ulog_file_backend_init)
</UL>
<P><STRONG><a name="[b72]"></a>ulog_file_rotate</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, file_be.o(.text.ulog_file_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ulog_file_rotate &rArr; open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_file_backend_flush_with_buf
</UL>

<P><STRONG><a name="[683]"></a>do_output</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ulog.o(.text.do_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = do_output &rArr; ulog_output_to_all_backend &rArr; rt_kputs &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[7ed]"></a>get_log_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ulog.o(.text.get_log_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_log_buf &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[adc]"></a>output_lock</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ulog.o(.text.output_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = output_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[add]"></a>output_unlock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ulog.o(.text.output_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = output_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[b71]"></a>rt_slist_append</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ulog.o(.text.rt_slist_append))
<BR><BR>[Called By]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>

<P><STRONG><a name="[b77]"></a>rt_slist_first</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ulog.o(.text.rt_slist_first))
<BR><BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[b75]"></a>rt_slist_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ulog.o(.text.rt_slist_init))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>

<P><STRONG><a name="[b78]"></a>rt_slist_next</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ulog.o(.text.rt_slist_next))
<BR><BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[685]"></a>ulog_output_to_all_backend</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, ulog.o(.text.ulog_output_to_all_backend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ulog_output_to_all_backend &rArr; rt_kputs &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[bb6]"></a>zFTP_pasv_mode</STRONG> (Thumb, 308 bytes, Stack size 160 bytes, zftp.o(.text.zFTP_pasv_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = zFTP_pasv_mode &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
</UL>

<P><STRONG><a name="[bb4]"></a>zFTP_send_cmd_wait_server_ack</STRONG> (Thumb, 268 bytes, Stack size 144 bytes, zftp.o(.text.zFTP_send_cmd_wait_server_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = zFTP_send_cmd_wait_server_ack &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_change_path
</UL>

<P><STRONG><a name="[bb7]"></a>zFTP_upload_file_data</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, zftp.o(.text.zFTP_upload_file_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = zFTP_upload_file_data &rArr; select &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
</UL>

<P><STRONG><a name="[bb5]"></a>zFTP_wait_server_ack</STRONG> (Thumb, 172 bytes, Stack size 136 bytes, zftp.o(.text.zFTP_wait_server_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = zFTP_wait_server_ack &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_upload_file
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zFTP_login
</UL>

<P><STRONG><a name="[4b8]"></a>add_one_pubrec_msg</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, umqtt.o(.text.add_one_pubrec_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = add_one_pubrec_msg &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
</UL>

<P><STRONG><a name="[4ba]"></a>add_one_qos2_msg</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, umqtt.o(.text.add_one_qos2_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = add_one_qos2_msg &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
</UL>

<P><STRONG><a name="[5b9]"></a>clear_one_pubrec_msg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, umqtt.o(.text.clear_one_pubrec_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = clear_one_pubrec_msg &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
</UL>

<P><STRONG><a name="[b9b]"></a>get_next_packetID</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, umqtt.o(.text.get_next_packetID))
<BR><BR>[Called By]<UL><LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish
</UL>

<P><STRONG><a name="[ab7]"></a>pubrec_cycle_callback</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, umqtt.o(.text.pubrec_cycle_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = pubrec_cycle_callback &rArr; qos2_publish_delete &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_send
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qos2_publish_delete
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_thread1
</UL>

<P><STRONG><a name="[af7]"></a>qos2_publish_delete</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, umqtt.o(.text.qos2_publish_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = qos2_publish_delete &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_deliver_message
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubrec_cycle_callback
</UL>

<P><STRONG><a name="[b83]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, umqtt.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
</UL>

<P><STRONG><a name="[4bc]"></a>rt_list_insert_after</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, umqtt.o(.text.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_control
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_qos2_msg
</UL>

<P><STRONG><a name="[af8]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, umqtt.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_delete
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_control
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qos2_publish_delete
</UL>

<P><STRONG><a name="[4bb]"></a>rt_list_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, umqtt.o(.text.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_qos2_msg
</UL>

<P><STRONG><a name="[afa]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, umqtt.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_delete
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qos2_publish_delete
</UL>

<P><STRONG><a name="[b5b]"></a>set_connect_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, umqtt.o(.text.set_connect_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = set_connect_status &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_reconnect_callback
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_keepalive_callback
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
</UL>

<P><STRONG><a name="[b5e]"></a>set_uplink_recon_tick</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, umqtt.o(.text.set_uplink_recon_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = set_uplink_recon_tick &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_reconnect_callback
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_keepalive_callback
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
</UL>

<P><STRONG><a name="[b8a]"></a>topicname_is_matched</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, umqtt.o(.text.topicname_is_matched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = topicname_is_matched
</UL>
<BR>[Called By]<UL><LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_deliver_message
</UL>

<P><STRONG><a name="[b82]"></a>umqtt_check_def_info</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, umqtt.o(.text.umqtt_check_def_info))
<BR><BR>[Called By]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_create
</UL>

<P><STRONG><a name="[b7a]"></a>umqtt_connect</STRONG> (Thumb, 636 bytes, Stack size 104 bytes, umqtt.o(.text.umqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = umqtt_connect &rArr; umqtt_handle_readpacket &rArr; umqtt_decode &rArr; umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_send
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_disconnect
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_connect
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connect_status
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_start
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_thread
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_reconnect_callback
</UL>

<P><STRONG><a name="[af9]"></a>umqtt_deliver_message</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, umqtt.o(.text.umqtt_deliver_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = umqtt_deliver_message &rArr; topicname_is_matched
</UL>
<BR>[Calls]<UL><LI><a href="#[b8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topicname_is_matched
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qos2_publish_delete
</UL>

<P><STRONG><a name="[b80]"></a>umqtt_disconnect</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, umqtt.o(.text.umqtt_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = umqtt_disconnect &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_send
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_stop
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_control
</UL>

<P><STRONG><a name="[b7d]"></a>umqtt_handle_readpacket</STRONG> (Thumb, 1608 bytes, Stack size 176 bytes, umqtt.o(.text.umqtt_handle_readpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = umqtt_handle_readpacket &rArr; umqtt_decode &rArr; umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_send
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_recv
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_decode
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readpacket
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_deliver_message
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connect_status
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qos2_publish_delete
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_one_pubrec_msg
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_qos2_msg
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_pubrec_msg
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_thread
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
</UL>

<P><STRONG><a name="[ab5]"></a>umqtt_keepalive_callback</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, umqtt.o(.text.umqtt_keepalive_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = umqtt_keepalive_callback &rArr; set_uplink_recon_tick &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_send
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connect_status
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_thread1
</UL>

<P><STRONG><a name="[b98]"></a>umqtt_readpacket</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, umqtt.o(.text.umqtt_readpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = umqtt_readpacket &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
</UL>

<P><STRONG><a name="[ab6]"></a>umqtt_reconnect_callback</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, umqtt.o(.text.umqtt_reconnect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = umqtt_reconnect_callback &rArr; umqtt_connect &rArr; umqtt_handle_readpacket &rArr; umqtt_decode &rArr; umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_disconnect
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uplink_recon_tick
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connect_status
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_thread1
</UL>

<P><STRONG><a name="[18b]"></a>umqtt_thread</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, umqtt.o(.text.umqtt_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = umqtt_thread &rArr; umqtt_connect &rArr; umqtt_handle_readpacket &rArr; umqtt_decode &rArr; umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_disconnect
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_handle_readpacket
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umqtt.o(.text.umqtt_create)
</UL>
<P><STRONG><a name="[189]"></a>umqtt_uplink_timer_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, umqtt.o(.text.umqtt_uplink_timer_callback))
<BR>[Address Reference Count : 1]<UL><LI> umqtt.o(.text.umqtt_create)
</UL>
<P><STRONG><a name="[3b0]"></a>MQTTDeserialize_ack</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, umqtt_pkgs_decode.o(.text.MQTTDeserialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MQTTDeserialize_ack &rArr; umqtt_pkgs_decodeBuf &rArr; umqtt_pkgs_decode &rArr; bufchar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readInt
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readChar
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_puback_decode
</UL>

<P><STRONG><a name="[3b4]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, umqtt_pkgs_decode.o(.text.MQTTDeserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readlenstring
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readInt
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readChar
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish_decode
</UL>

<P><STRONG><a name="[b9a]"></a>bufchar</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, umqtt_pkgs_decode.o(.text.bufchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bufchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_decode
</UL>

<P><STRONG><a name="[b79]"></a>umqtt_connack_decode</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, umqtt_pkgs_decode.o(.text.umqtt_connack_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = umqtt_connack_decode &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readChar
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_decode
</UL>

<P><STRONG><a name="[b99]"></a>umqtt_pkgs_decode</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, umqtt_pkgs_decode.o(.text.umqtt_pkgs_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = umqtt_pkgs_decode &rArr; bufchar
</UL>
<BR>[Calls]<UL><LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufchar
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_decodeBuf
</UL>

<P><STRONG><a name="[3b2]"></a>umqtt_pkgs_decodeBuf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, umqtt_pkgs_decode.o(.text.umqtt_pkgs_decodeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = umqtt_pkgs_decodeBuf &rArr; umqtt_pkgs_decode &rArr; bufchar
</UL>
<BR>[Calls]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsuback_decode
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_suback_decode
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connack_decode
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[b87]"></a>umqtt_puback_decode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, umqtt_pkgs_decode.o(.text.umqtt_puback_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = umqtt_puback_decode &rArr; MQTTDeserialize_ack &rArr; umqtt_pkgs_decodeBuf &rArr; umqtt_pkgs_decode &rArr; bufchar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_decode
</UL>

<P><STRONG><a name="[b86]"></a>umqtt_publish_decode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, umqtt_pkgs_decode.o(.text.umqtt_publish_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = umqtt_publish_decode &rArr; MQTTDeserialize_publish &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_decode
</UL>

<P><STRONG><a name="[3b1]"></a>umqtt_readChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, umqtt_pkgs_decode.o(.text.umqtt_readChar))
<BR><BR>[Called By]<UL><LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_suback_decode
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connack_decode
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_decode
</UL>

<P><STRONG><a name="[3b3]"></a>umqtt_readInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, umqtt_pkgs_decode.o(.text.umqtt_readInt))
<BR><BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsuback_decode
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_suback_decode
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readlenstring
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[3b5]"></a>umqtt_readlenstring</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, umqtt_pkgs_decode.o(.text.umqtt_readlenstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = umqtt_readlenstring
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[b88]"></a>umqtt_suback_decode</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, umqtt_pkgs_decode.o(.text.umqtt_suback_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = umqtt_suback_decode &rArr; umqtt_pkgs_decodeBuf &rArr; umqtt_pkgs_decode &rArr; bufchar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readInt
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readChar
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_decode
</UL>

<P><STRONG><a name="[b89]"></a>umqtt_unsuback_decode</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, umqtt_pkgs_decode.o(.text.umqtt_unsuback_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = umqtt_unsuback_decode &rArr; umqtt_pkgs_decodeBuf &rArr; umqtt_pkgs_decode &rArr; bufchar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_readInt
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_decode
</UL>

<P><STRONG><a name="[3b7]"></a>MQTTSerialize_ack</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, umqtt_pkgs_encode.o(.text.MQTTSerialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTSerialize_ack &rArr; umqtt_pkgs_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeInt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeChar
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pubrel_encode
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pubcomp_encode
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_puback_encode
</UL>

<P><STRONG><a name="[3bb]"></a>MQTTSerialize_connect</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, umqtt_pkgs_encode.o(.text.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_connect &rArr; umqtt_writeMQTTString &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeMQTTString
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeInt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeChar
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeCString
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_len
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_encode
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>
<BR>[Called By]<UL><LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_connect_encode
</UL>

<P><STRONG><a name="[3bc]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, umqtt_pkgs_encode.o(.text.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_connectLength &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[3c1]"></a>MQTTSerialize_publish</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, umqtt_pkgs_encode.o(.text.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_publish &rArr; umqtt_writeCString &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeInt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeChar
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeCString
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_len
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_encode
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_publish_encode
</UL>

<P><STRONG><a name="[3c2]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, umqtt_pkgs_encode.o(.text.MQTTSerialize_publishLength))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[3c3]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, umqtt_pkgs_encode.o(.text.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeMQTTString
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeInt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeChar
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_len
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_encode
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
</UL>
<BR>[Called By]<UL><LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_subscribe_encode
</UL>

<P><STRONG><a name="[3c4]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, umqtt_pkgs_encode.o(.text.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[3c5]"></a>MQTTSerialize_unsubscribe</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, umqtt_pkgs_encode.o(.text.MQTTSerialize_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MQTTSerialize_unsubscribe &rArr; MQTTSerialize_unsubscribeLength &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeInt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeChar
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeCString
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_len
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_encode
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribeLength
</UL>
<BR>[Called By]<UL><LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_unsubscribe_encode
</UL>

<P><STRONG><a name="[3c6]"></a>MQTTSerialize_unsubscribeLength</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, umqtt_pkgs_encode.o(.text.MQTTSerialize_unsubscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTSerialize_unsubscribeLength &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
</UL>

<P><STRONG><a name="[3c7]"></a>MQTTSerialize_zero</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, umqtt_pkgs_encode.o(.text.MQTTSerialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTSerialize_zero &rArr; umqtt_pkgs_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeChar
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pkgs_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_pingreq_encode
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_disconnect_encode
</UL>

<P><STRONG><a name="[b7e]"></a>umqtt_connect_encode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, umqtt_pkgs_encode.o(.text.umqtt_connect_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = umqtt_connect_encode &rArr; MQTTSerialize_connect &rArr; umqtt_writeMQTTString &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
</UL>

<P><STRONG><a name="[b8b]"></a>umqtt_disconnect_encode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, umqtt_pkgs_encode.o(.text.umqtt_disconnect_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = umqtt_disconnect_encode &rArr; MQTTSerialize_zero &rArr; umqtt_pkgs_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
</UL>

<P><STRONG><a name="[b92]"></a>umqtt_pingreq_encode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, umqtt_pkgs_encode.o(.text.umqtt_pingreq_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = umqtt_pingreq_encode &rArr; MQTTSerialize_zero &rArr; umqtt_pkgs_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
</UL>

<P><STRONG><a name="[3b9]"></a>umqtt_pkgs_encode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, umqtt_pkgs_encode.o(.text.umqtt_pkgs_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = umqtt_pkgs_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[3bd]"></a>umqtt_pkgs_len</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, umqtt_pkgs_encode.o(.text.umqtt_pkgs_len))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[b8d]"></a>umqtt_puback_encode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, umqtt_pkgs_encode.o(.text.umqtt_puback_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = umqtt_puback_encode &rArr; MQTTSerialize_ack &rArr; umqtt_pkgs_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
</UL>

<P><STRONG><a name="[b8f]"></a>umqtt_pubcomp_encode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, umqtt_pkgs_encode.o(.text.umqtt_pubcomp_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = umqtt_pubcomp_encode &rArr; MQTTSerialize_ack &rArr; umqtt_pkgs_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
</UL>

<P><STRONG><a name="[b8c]"></a>umqtt_publish_encode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, umqtt_pkgs_encode.o(.text.umqtt_publish_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = umqtt_publish_encode &rArr; MQTTSerialize_publish &rArr; umqtt_writeCString &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
</UL>

<P><STRONG><a name="[b8e]"></a>umqtt_pubrel_encode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, umqtt_pkgs_encode.o(.text.umqtt_pubrel_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = umqtt_pubrel_encode &rArr; MQTTSerialize_ack &rArr; umqtt_pkgs_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
</UL>

<P><STRONG><a name="[b90]"></a>umqtt_subscribe_encode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, umqtt_pkgs_encode.o(.text.umqtt_subscribe_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = umqtt_subscribe_encode &rArr; MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
</UL>

<P><STRONG><a name="[b91]"></a>umqtt_unsubscribe_encode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, umqtt_pkgs_encode.o(.text.umqtt_unsubscribe_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = umqtt_unsubscribe_encode &rArr; MQTTSerialize_unsubscribe &rArr; MQTTSerialize_unsubscribeLength &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_encode
</UL>

<P><STRONG><a name="[3be]"></a>umqtt_writeCString</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, umqtt_pkgs_encode.o(.text.umqtt_writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = umqtt_writeCString &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeInt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[3b8]"></a>umqtt_writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, umqtt_pkgs_encode.o(.text.umqtt_writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[3ba]"></a>umqtt_writeInt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, umqtt_pkgs_encode.o(.text.umqtt_writeInt))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeMQTTString
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeCString
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[3bf]"></a>umqtt_writeMQTTString</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, umqtt_pkgs_encode.o(.text.umqtt_writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = umqtt_writeMQTTString &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_writeInt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[b9c]"></a>umqtt_resolve_uri</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, umqtt_transport.o(.text.umqtt_resolve_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = umqtt_resolve_uri &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umqtt_trans_connect
</UL>

<P><STRONG><a name="[ba4]"></a>webclient_clean</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, webclient.o(.text.webclient_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = webclient_clean &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
</UL>

<P><STRONG><a name="[ba5]"></a>webclient_connect</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, webclient.o(.text.webclient_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = webclient_connect &rArr; webclient_resolve_address &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[bae]"></a>webclient_next_chunk</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, webclient.o(.text.webclient_next_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = webclient_next_chunk &rArr; webclient_read_line &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
</UL>

<P><STRONG><a name="[bab]"></a>webclient_read_line</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, webclient.o(.text.webclient_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = webclient_read_line &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
</UL>

<P><STRONG><a name="[baf]"></a>webclient_recv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, webclient.o(.text.webclient_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
</UL>

<P><STRONG><a name="[ba6]"></a>webclient_resolve_address</STRONG> (Thumb, 452 bytes, Stack size 96 bytes, webclient.o(.text.webclient_resolve_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = webclient_resolve_address &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcpy
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[bb1]"></a>webclient_send</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, webclient.o(.text.webclient_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = webclient_send &rArr; send &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
</UL>

<P><STRONG><a name="[ba7]"></a>webclient_send_header</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, webclient.o(.text.webclient_send_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = webclient_send_header &rArr; webclient_header_fields_add &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_formater &rArr; gettimeofday &rArr; get_timeval &rArr;  ulog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[bb3]"></a>webclient_strncasecmp</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, webclient.o(.text.webclient_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = webclient_strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strstri
</UL>

<P><STRONG><a name="[bad]"></a>webclient_strstri</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, webclient.o(.text.webclient_strstri))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = webclient_strstri &rArr; webclient_strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strncasecmp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
</UL>

<P><STRONG><a name="[2d7]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ee]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[2e6]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[f0]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2ef]"></a>_local_sscanf</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
